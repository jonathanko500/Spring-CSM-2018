<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Mike Milinkovich: Eclipse Community Directions for 2018</title>
	<guid isPermaLink="false">http://mmilinkov.wordpress.com/?p=1422</guid>
	<link>https://mmilinkov.wordpress.com/2018/01/22/eclipse-community-directions-for-2018/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As 2018 begins I would like to share a few thoughts on where I think the Eclipse community is heading.  I am looking forward to an incredibly busy year for myself, the staff of the Eclipse Foundation, and our community, because this is going to be a year of tremendous growth and opportunity. I will try to give a brief overview of what I see as some of the exciting things that are going on at the Eclipse Foundation. I am sure that I will miss some, so apologies in advance!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Of course the big news of the past few months was the&lt;/span&gt;&lt;a href=&quot;https://blogs.oracle.com/theaquarium/opening-up-ee-update&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;announcement by Oracle&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; that Java EE is going to be moving to the Eclipse Foundation. This represents the largest single contribution to the Eclipse community since — well, the original Eclipse IDE project in 2001. It is approximately 35 new projects, hundreds of new committers and contributors, and millions of lines of code. It is and was an incredible endorsement of the Eclipse Foundation’s mission as the leading organization for individuals and companies to collaborate on commercial-friendly open source software. Since the announcement in September, we have created the new Eclipse Enterprise for Java (EE4J) top-level project, and source code is starting to move into the projects. During 2018 our collective mission will be to create a functioning and successful community around this code, pick a new brand to replace Java EE going forward, ship a release compatible with Java EE 8, open source the Java EE TCKs, and establish a new specification process to shape the future of cloud native Java. I feel out of breath just thinking of it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;But in addition to this Java EE work, it is clear that the Eclipse Foundation is now playing a pivotal role in the future of the Java ecosystem. Projects such as&lt;/span&gt;&lt;a href=&quot;http://microprofile.io/&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse MicroProfile&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (microservices for Java),&lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/openj9/&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse OpenJ9&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (Java virtual machine),&lt;/span&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.deeplearning4j&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse DeepLearning4J&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (machine learning),&lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Collections&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (highly scalable collections),&lt;/span&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.jnosql&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse JNoSQL&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (NoSQL for Java EE) and&lt;/span&gt;&lt;a href=&quot;http://vertx.io/&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Vert.x&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (reactive apps for Java) are leading the next generation of Java innovation.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;From the Eclipse Science community comes&lt;/span&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/science.xacc&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse XACC&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, which I believe is the world’s first community-led open source project in the new field of quantum computing. Originating from Oak Ridge National Laboratory, XACC is working to integrate quantum processors with the high-performance computing environments that are the backbone of modern scientific computing. It will be exciting to see XACC ship its first release in 2018, and to support its desire to create an open collaboration to shape the next generation of computing hardware and programming paradigms.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The Eclipse IoT community has been a significant growth area within the Eclipse community over the past couple of years. In 2017 Eclipse IoT grew to over 25 projects, and is attracting a substantial developer and corporate community.. It is also a terrifically ambitious group, with a&lt;/span&gt;&lt;a href=&quot;https://iot.eclipse.org/resources/white-papers/Eclipse%20IoT%20White%20Paper%20-%20The%20Three%20Software%20Stacks%20Required%20for%20IoT%20Architectures.pdf&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;vision of providing technology stacks&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; that span the smallest of constrained devices, through device gateways, to cloud-scale data collection and management runtimes. Late in 2017 the group published a&lt;/span&gt;&lt;a href=&quot;https://iot.eclipse.org/resources/white-papers/Eclipse%20IoT%20White%20Paper%20-%20Open%20Source%20Software%20for%20Industry%204.0.pdf&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;white paper&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; on the role that open source will play in Industry 4.0, or industrial IoT. This white paper is important because in many ways it sets out the vision for the group, which has been primarily focused on industrial IoT. In 2018 the primary goal for Eclipse IoT is to start shipping these stacks rather than simply projects. In other words, to create cross-project collaborations that provide IoT adopters with more complete solutions rather than individual building blocks. This will go a long way to paving the way for broad industry adoption of these open source IoT technologies.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Finally, a word on developer tools — the Eclipse Foundation’s original franchise. I noticed recently that according to at least&lt;/span&gt;&lt;a href=&quot;http://pypl.github.io/IDE.html&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;one source&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, the Eclipse IDE is maintaining its position as the #1 IDE in the world, and grew its market share substantially last year. The goal for this year is to continue this trend. In addition, the&lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/che/&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Che&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; cloud IDE continues to grow its community and adoption. As more and more developers work on cloud native applications, the appeal of a cloud IDE that works where they do is going to grow. Che is well positioned to be the leader in this space and is the only community-led cloud IDE.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Anyone who has seen me speak over the past couple of years has likely heard me express the idea that the “community is the capacity.” The Eclipse Foundation is a 30 person organization that supports a community of hundred of projects, hundreds of members, thousands of committers and contributors, and millions of users. Whenever I take a moment to reflect on what we accomplish together it is breathtaking. The breadth of the technology that we collectively produce is vast, and our community spans the globe. Equally exciting, engagement continues to grow with a variety of industries notably automotive, power, transportation, etc. interested in leveraging the Eclipse Foundation as the place for open, commercial collaboration.&lt;/p&gt;
&lt;p&gt;I am incredibly optimistic that 2018 is going to be one of the most exciting years we’ve ever had, so please get involved!&lt;/p&gt;</description>
	<pubDate>Mon, 22 Jan 2018 13:01:45 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus UML support in Hawk</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=1069</guid>
	<link>https://papyrusuml.wordpress.com/2018/01/19/papyrus-uml-support-in-hawk/</link>
	<description>&lt;p&gt;&lt;img align=&quot;right&quot; alt=&quot;mondo project&quot; height=&quot;25%&quot; src=&quot;https://i2.wp.com/api.ning.com/files/ujcza9N5GbJv7*4sWhEl42fjxvc3NEu8iKexmuwI5d7l0xuxOVoUVOT0aFOsqT8nAnFcZncOVdcnt0UFko9J8WJQ-yWFS5EF/MONDOhoriztag.png&quot; width=&quot;25%&quot; /&gt; The &lt;a href=&quot;http://www.mondo-project.org/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Mondo  Project&lt;/a&gt;‘s &lt;a href=&quot;https://github.com/mondo-project/mondo-hawk&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;mondo-hawk&lt;/a&gt; now supports my models!&lt;/p&gt;
&lt;p&gt;You can read more about this on their &lt;a href=&quot;https://github.com/mondo-project/mondo-hawk/wiki/Papyrus-UML-support-in-Hawk&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;announcement page&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Note that they only index my semantic model (i.e., the “.uml” files) and not the diagrams, which makes sense in their context given that diagrams are not semantic elements.&lt;/p&gt;
&lt;p&gt;Still, this is so cool!&lt;/p&gt;</description>
	<pubDate>Fri, 19 Jan 2018 15:00:40 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus has layers (like parfait?)</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=1064</guid>
	<link>https://papyrusuml.wordpress.com/2018/01/17/papyrus-has-layers-like-parfait/</link>
	<description>&lt;p&gt;The Papyrus layers functionality has been in incubation for a while, and some may be wondering what it’s all about:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The Layers mechanism allows to build different views of an underlying UML diagrams by applying selections rules as well as graphical transformation operators.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You can read the description of this function in the &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Oxygen_Work_Description/NewFeature/Layers&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Papyrus Wiki&lt;/a&gt;, and you can also see it in action in this YouTube video:&lt;/p&gt;
&lt;div class=&quot;jetpack-video-wrapper&quot;&gt;&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;</description>
	<pubDate>Wed, 17 Jan 2018 16:17:14 +0000</pubDate>
</item>
<item>
	<title>Chris Aniszczyk: KubeCon CloudNativeCon 2017 Takeaways + 2018 Predictions</title>
	<guid isPermaLink="false">http://aniszczyk.org/?p=4167</guid>
	<link>http://aniszczyk.org/2018/01/15/kubecon-cloudnativecon-2017-takeaways-2018-predictions/</link>
	<description>&lt;p&gt;It was a crazy 2017 for me with 300,000 miles of business travel, but it was all worth it to experience every major cloud provider adopt Kubernetes in some fashion and grow our community to 14 projects total! Also, it was amazing to help host 4000+ people in Austin for &lt;a href=&quot;https://events.linuxfoundation.org/events/kubecon-cloudnativecon-europe-2018/&quot;&gt;KubeCon/CloudNativeCon,&lt;/a&gt; where it actually snowed!&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/KeepAustinWeird?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KeepAustinWeird&lt;/a&gt;&lt;br /&gt;Today’s surprise: snow and bumping into an old friend, &lt;a href=&quot;https://twitter.com/sabdfl?ref_src=twsrc%5Etfw&quot;&gt;@sabdfl&lt;/a&gt; with &lt;a href=&quot;https://twitter.com/rezgol?ref_src=twsrc%5Etfw&quot;&gt;@rezgol&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/CloudNativeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CloudNativeCon&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/austin?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#austin&lt;/a&gt; &lt;a href=&quot;https://t.co/Fs1ykzdFdm&quot;&gt;pic.twitter.com/Fs1ykzdFdm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— zahedab (@zahedab) &lt;a href=&quot;https://twitter.com/zahedab/status/939008977282592768?ref_src=twsrc%5Etfw&quot;&gt;December 8, 2017&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I’d like to share some personal take aways I had from the conference (of course with accompanying tweets) that will serve as predictions for 2018:&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px; font-weight: bold;&quot;&gt;Exciting Times for Boring Container Infrastructure!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;One of the themes from the conference was that the Kubernetes community was working hard to make infrastructure boring. In my humble opinion, Kubernetes becomes something like “POSIX of the cloud” or “Linux of the Cloud” where Kubernetes is solidifying kernel space but the excitement should be in user space.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;The power of boring &lt;a href=&quot;https://twitter.com/hashtag/kubecon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#kubecon&lt;/a&gt; &lt;a href=&quot;https://t.co/x2VuPau6zl&quot;&gt;pic.twitter.com/x2VuPau6zl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Barton George (@barton808) &lt;a href=&quot;https://twitter.com/barton808/status/938800626246537216?ref_src=twsrc%5Etfw&quot;&gt;December 7, 2017&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.opencontainers.org/blog/2017/11/10/oci-update-v1-0-1-release-new-maintainer&quot;&gt;Open Container Initiative (OCI) community&lt;/a&gt; also held a meeting where it celebrated its v1.0 release to make containers a bit more boring and standardized.&lt;/p&gt;
&lt;p&gt;In 2018, look for the boring infrastructure pattern to continue, the OCI community is planning to make distribution a bit more boring via a &lt;a href=&quot;https://github.com/opencontainers/tob/issues/34&quot;&gt;proposed distribution API specification&lt;/a&gt;. I also predict that some of the specialized/boutique cloud providers who haven’t offered Kubernetes integration will do so finally in 2018.&lt;/p&gt;
&lt;h4 style=&quot;text-align: left;&quot;&gt;CNCF + KubeCon and CloudNativeCon: Home of Open Infrastructure&lt;/h4&gt;
&lt;p&gt;CNCF has a &lt;a href=&quot;https://www.cncf.io/projects/&quot;&gt;community of independently governed projects&lt;/a&gt;, as of today which there are 14 of covering all parts of cloud native. There’s &lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt; which integrates beautifully with &lt;a href=&quot;https://kubernetes.io&quot;&gt;Kubernetes&lt;/a&gt; but also brings modern monitoring practices to environments outside of cloud native land too! There’s &lt;a href=&quot;https://www.envoyproxy.io/&quot;&gt;Envoy&lt;/a&gt; which is a cloud native edge and proxy, that integrates with Kubernetes through projects like &lt;a href=&quot;https://github.com/heptio/contour&quot;&gt;Contour&lt;/a&gt; or Istio, however, Envoy can be used in any environment where a reverse proxy is used. &lt;a href=&quot;https://grpc.io/&quot;&gt;gRPC&lt;/a&gt; is a universal RPC framework that can help you build services that run on Kubernetes or any environment for that matter! There are many other CNCF projects that have use cases outside of just purely a cloud native environment and we will see more of that usage grow over time to help companies in transition to a cloud native world.&lt;/p&gt;
&lt;p&gt;In 2018, look for CNCF conferences continue to grow, expand locations (hello China) and truly become the main event for open source infrastructure. In Austin it was incredible to have talks and people from the Ansible to Eclipse to JVM to Openstack to Zephyr communities (and more). I can’t think of any other event that brings together open source infrastructure across all layers of the &lt;a href=&quot;https://github.com/cncf/landscape&quot;&gt;cloud native landscape.&lt;/a&gt;&lt;/p&gt;
&lt;h4 style=&quot;text-align: left;&quot;&gt;Moving up the Stack: 2018 is Year of Service Meshes&lt;/h4&gt;
&lt;p&gt;Service meshes are fairly a new concept (I highly recommend this &lt;a href=&quot;https://medium.com/@mattklein123/service-mesh-data-plane-vs-control-plane-2774e720f7fc&quot;&gt;blog post by Matt Klein&lt;/a&gt; if you’re new to the concept) and will become the middleware of the cloud native world. In CNCF, we currently host Envoy and linkerd which helped poineer this space. In 2018, I expect more service mesh related projects to be open sourced along with more participation from traditional networking vendors. We will also see some of the projects in this space to mature with real production usage.&lt;/p&gt;
&lt;h4 style=&quot;text-align: left;&quot;&gt;Cloud Native AI + Machine Learning: Kubeflow&lt;/h4&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;In 2018, ML focused workloads and projects will find ways to integrate with Kubernetes to help scale and encourage portability of infrastructure. Just take a look at the &lt;a href=&quot;https://github.com/google/kubeflow&quot;&gt;kubeflow&lt;/a&gt; project which aims to make ML with Kubernetes easy, portable and scalable. Note, this doesn’t mean that AI/ML folks will have to become Kubernetes experts, all this means is that Kubernetes will be powering more AI/ML workloads (and potentially even sharing their existing cloud native infrastructure). I expect more startups to form in this space (see &lt;a href=&quot;https://riseml.com&quot;&gt;RiseML&lt;/a&gt; as an example), look to see a “cloud native” AI movement that focuses on portability of workloads.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;font-size: 18px; font-weight: bold;&quot;&gt;Developer Experience Focus and Cloud Native Tooling&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;One of my favorite keynotes from KubeCon was &lt;a href=&quot;https://www.youtube.com/watch?v=gCQfFXSHSxw&quot;&gt;Brendan Burns speaking about metaparticle.io&lt;/a&gt;, a standard library for cloud native applications. I completely agree with his premise that we need to democratize distributed systems development. Not everyone developer needs to know about Kubernetes the same way not every developer needs to understand POSIX. In 2018, we are going to see an explosion of open source “cloud native languages” that will offer multiple approaches to democratizing distributed systems development.&lt;/p&gt;
&lt;p&gt;Also in 2018, I expect us to see growth in cloud native development environments (IDEs) to provide better developer experience. As an example, for those that were wondering why there was an Eclipse Foundation booth at KubeCon, they were demoing a technology called &lt;a href=&quot;https://www.eclipse.org/che/technology/&quot;&gt;Eclipse Che&lt;/a&gt; which is a cloud native IDE framework (your workspace is composed of docker/container images). Che is a framework that helps you build Cloud Native IDEs too, for example, OpenShift.io is OpenShift integrated with Che to provide you a fully blown online development experience.&lt;/p&gt;
&lt;p&gt;Finally in 2018, I expect the developer experience of installing Kubernetes applications improved, including the underlying technology for doing so. For example, the &lt;a href=&quot;https://github.com/kubernetes-incubator/service-catalog&quot;&gt;Service Catalog&lt;/a&gt; work and websites like &lt;a href=&quot;https://kubeapps.com/&quot;&gt;kubeapps.com&lt;/a&gt; showcase what is possible in making it easier for people to install Kubernetes app/integrations, we’ll see this grow significantly in 2018. Also I predict that the Helm community will grow faster than it has before.&lt;/p&gt;
&lt;h4 style=&quot;text-align: left;&quot;&gt;Diversity and Inclusion&lt;/h4&gt;
&lt;p&gt;One of my favorite take aways from the conference was the focus on diversity and inclusion within our community:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;103 attendees here this week received diversity scholarships! This is the largest investment in diversity for ANY conference EVER — thanks to this incredible committee, &lt;a href=&quot;https://twitter.com/googlecloud?ref_src=twsrc%5Etfw&quot;&gt;@googlecloud&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/Azure?ref_src=twsrc%5Etfw&quot;&gt;@Azure&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/awscloud?ref_src=twsrc%5Etfw&quot;&gt;@awscloud&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://twitter.com/twistlockteam?ref_src=twsrc%5Etfw&quot;&gt;@twistlockteam&lt;/a&gt; &lt;img alt=&quot;👏🏼&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.3/72x72/1f44f-1f3fc.png&quot; style=&quot;height: 1em;&quot; /&gt; [LIVE from &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; + &lt;a href=&quot;https://twitter.com/hashtag/CloudNativeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CloudNativeCon&lt;/a&gt;] &lt;a href=&quot;https://t.co/GtxNCjb1g5&quot;&gt;pic.twitter.com/GtxNCjb1g5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— CNCF (@CloudNativeFdn) &lt;a href=&quot;https://twitter.com/CloudNativeFdn/status/938435795022745600?ref_src=twsrc%5Etfw&quot;&gt;December 6, 2017&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;We (thank you amazing diversity committee) raised $250,000 and helped over 100 diversity scholarship recipients attend KubeCon/CloudNativeCon in Austin. In 2018, I predict and truly hope some other event will match or beat this.&lt;/p&gt;
&lt;p&gt;Anyways, after a crazy 2017, I can’t wait to grow our communities in 2018.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;</description>
	<pubDate>Tue, 16 Jan 2018 04:48:53 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: EE4J Code Arrives</title>
	<guid isPermaLink="false">http://mmilinkov.wordpress.com/?p=1419</guid>
	<link>https://mmilinkov.wordpress.com/2018/01/15/ee4j-code-arrives/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Last week the EE4J project achieved an important milestone when the source code for the API and reference implementation of JSON-P JSR-374 project was pushed by &lt;/span&gt;&lt;a href=&quot;https://github.com/m0mus&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Dmitry Kornilov&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; into its &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse-ee4j/jsonp&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;GitHub repository&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; in the EE4J organization. This is the first project of the &lt;/span&gt;&lt;a href=&quot;https://mmilinkov.wordpress.com/2017/11/21/ee4j-progress-nine-new-projects-proposed-at-the-eclipse-foundation/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;initial nine proposed&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to reach this stage.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This may seem like a small step in a very large process, but it is a concrete demonstration of the commitment to move forward with the &lt;/span&gt;&lt;a href=&quot;https://blogs.oracle.com/theaquarium/opening-up-ee-update&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;migration of Java EE to the Eclipse Foundation&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The Oracle team and the Eclipse Foundation staff had a ton of work to do to make this possible. This is definitely one of those cases where the visible code contributions are just the visible tip of an iceberg’s worth of effort.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Here are just a few examples of the work that went on to get to this stage:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The names of the projects such as Glassfish represent important trademarks in the industry. Oracle transferred ownership of these project names to the Eclipse Foundation so that they can be held and protected for the community. &lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The EMO staff reviewed the projects proposals, ran the project creation review, provisioned the repositories and set up the committer lists.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The Oracle team packaged up the source code and updated the file headers to reflect the new EPL-2.0 licensing.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The EMO IP staff scanned the code and ensured that all was well before approving it for initial check-in.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Now that the collective team has run through this process with JSON-P we will be working to get the remaining eight initial projects pushed out as quickly as possible. Hopefully by the end of this month. Meanwhile, more projects will be proposed and we will be migrating a steady stream of Java EE projects into EE4J.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Exciting times!&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 15 Jan 2018 16:51:40 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse IoT Day Santa Clara 2018 | Call for Papers</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/m-u4xUFGRYE/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/m-u4xUFGRYE/</link>
	<description>We're happy to announce the Eclipse IoT Day Santa Clara, taking place May 14, in co-location with IoT World 2018.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/m-u4xUFGRYE&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 15 Jan 2018 14:15:00 +0000</pubDate>
</item>
<item>
	<title>itemis: Machine Learning Formatting with Xtext: Part II</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/machine-learning-formatting-part-ii</guid>
	<link>https://blogs.itemis.com/en/machine-learning-formatting-part-ii</link>
	<description>&lt;p&gt;Hi folks! Some of you might have seen my earlier &lt;a href=&quot;https://hosting.itemis.de/en/machine-learning-formatting-with-xtext&quot;&gt;blogpost&lt;/a&gt; on Machine Learning Formatting. It was more or less meant as an advertiser for the Eclipse Democamp Munich. As promised, here comes the follow up blogpost with more details.&lt;/p&gt;  
&lt;p&gt;&lt;a href=&quot;https://github.com/antlr/codebuff&quot;&gt;Codebuff&lt;/a&gt; is a project started by &lt;a href=&quot;https://github.com/parrt&quot;&gt;Terrence Parr&lt;/a&gt;. The project aims the problem that writing a codeformatter is hard and will not fit all needs. Therefore people want to customize it in every way since formatting is a very individual thing.&lt;/p&gt; 
&lt;p&gt;Codebuff tries to format code by taking already formatted examples and learning out of that how to format code based on the same grammar. To do that it needs the corresponding lexer and parser. The lexer is used to get the tokens and the parser to create an abstract syntax tree out of the tokens. Based on that information &lt;span style=&quot;background-color: transparent;&quot;&gt;Codebuff tries to mimics the behavior of a developer. &lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;Sounds simple, but how does that work?  &lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;First of all code consists of tokens.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;tokens.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/tokens.png?t=1515762170520&amp;amp;width=495&amp;amp;name=tokens.png&quot; style=&quot;width: 495px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;495&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br /&gt;Depending on tokens and the location a developer would normally make a decision to introduce or delete whitespaces. &lt;span&gt;A whitespace could be a simple space, a newline along with an indentation or alignment.&lt;span&gt; Another valid decision could also be to do nothing. &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;To make a decision you need certain criteria. Codebuff works with 21&lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;criterias, so called features &lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;that are taken into account. The following figure shows the 5 most obvious &lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;features&lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;Bildschirmfoto 2017-12-19 um 16.26.00.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Bildschirmfoto%202017-12-19%20um%2016.26.00.png?t=1515762170520&amp;amp;width=468&amp;amp;name=Bildschirmfoto%202017-12-19%20um%2016.26.00.png&quot; style=&quot;width: 468px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;468&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;br /&gt;Based on those 21 &lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;features&lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt; Codebuff analyses the given examples and computes token properties.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;Bildschirmfoto 2017-12-21 um 14.56.14.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Bildschirmfoto%202017-12-21%20um%2014.56.14.png?t=1515762170520&amp;amp;width=471&amp;amp;name=Bildschirmfoto%202017-12-21%20um%2014.56.14.png&quot; style=&quot;width: 471px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;471&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;br /&gt;When training is done all token properties are stored as vectors in a matrix along with the whitespace information.&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;img alt=&quot;Matrix.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Matrix.png?t=1515762170520&amp;amp;width=265&amp;amp;name=Matrix.png&quot; style=&quot;width: 265px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;265&quot; /&gt; 
&lt;div&gt;
 &lt;br /&gt; 
 &lt;p&gt;&lt;br /&gt;From this point on we should start to speak about &lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_learning&quot;&gt;machine learning&lt;/a&gt;. What we want to achieve is finding a match in the computed &lt;span&gt;matrix of &lt;/span&gt;token properties and get the whitespace to inject into the given document at a certain position.&lt;/p&gt; 
 &lt;p&gt;First of all we have to compute where to look at in the examples. For that reason we look at our current position in the document and compute the token property (vector) like we did it in the training without storing it to the matrix.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img alt=&quot;Vector.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Vector.png?t=1515762170520&amp;amp;width=178&amp;amp;name=Vector.png&quot; style=&quot;width: 178px; display: block; margin: 0px auto;&quot; width=&quot;178&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span&gt;&lt;br /&gt;Now that we have that vector we need an algorithm to find a match in the matrix and apply the right whitespace to the document.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;img alt=&quot;Format.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Format.png?t=1515762170520&amp;amp;width=470&amp;amp;name=Format.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 470px;&quot; width=&quot;470&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;br /&gt;For doing that Codebuff uses the simplest machine learning algorithm that exists – the &lt;/span&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm&quot;&gt;K-nearest neighbors algorithm&lt;/a&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;. &lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;The algorithm uses a function to compare a token property to the entries of the existing training-matrix. To do that the a constant named k needs to be specified to define how many nearest neighbors should be used. Mostly k is computed once by taking the root of the number of examples in the corpus, but for Codebuff k is fixed to 11.&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img alt=&quot;Bildschirmfoto 2018-01-03 um 16.19.08.png&quot; height=&quot;393&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Bildschirmfoto%202018-01-03%20um%2016.19.08.png?t=1515762170520&amp;amp;width=590&amp;amp;height=393&amp;amp;name=Bildschirmfoto%202018-01-03%20um%2016.19.08.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;590&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;br /&gt;As shown above, experiments with different languages showed that the median error rate is nearly constant from k = 11 on, so taking this as a constant makes sense for performance reasons. &lt;/p&gt; 
 &lt;p&gt;As we now know the value of k, we can start to find most similar token properties to the one we just computed at the location to format.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img alt=&quot;KNN.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/KNN.png?t=1515762170520&amp;amp;width=481&amp;amp;name=KNN.png&quot; style=&quot;width: 481px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;481&quot; /&gt; &lt;/p&gt; 
 &lt;p&gt;Out of that the algorithm uses a function to weigh the best whitespace. In Codebuff it takes simply the whitespace that appears most often – very simple but efficient. Codebuff's theoretical background is explained in more depth &lt;a href=&quot;https://arxiv.org/pdf/1606.08866v1.pdf&quot;&gt;here&lt;/a&gt; and you can find an entertaining &lt;a href=&quot;https://www.youtube.com/watch?v=Mni2HVGGUdo&quot;&gt;talk by Terence on YouTube&lt;/a&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Mni2HVGGUdo&quot;&gt;.&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;Looking at the way Codebuff works you might ask yourself how many example files you need to get good results? The answer is pretty simple: after a lot of experiments the Codebuff guys found out that from 10 example files on the results will not get better nor worst. The next figure shows for some different languages that after 10 files the error rate stays around the same.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img alt=&quot;Bildschirmfoto 2017-12-21 um 15.18.06.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Bildschirmfoto%202017-12-21%20um%2015.18.06.png?t=1515762170520&amp;amp;width=481&amp;amp;name=Bildschirmfoto%202017-12-21%20um%2015.18.06.png&quot; style=&quot;width: 481px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;481&quot; /&gt;&lt;/p&gt; 
 &lt;h2&gt;&lt;br /&gt;So – what has Codebuff to do with Xtext?&lt;/h2&gt; 
 &lt;p&gt;Now as we know a bit of the theoretical background around Codebuff you may wonder what all that stuff has to do with &lt;a href=&quot;https://www.eclipse.org/Xtext/&quot;&gt;Xtext&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;In Xtext you can create various DSLs for very different domains. For each language you need to specify a formatter. Luckily Xtext comes with two different APIs&lt;span style=&quot;background-color: transparent;&quot;&gt;. The older one relies on tokens only, that means you can define how your DSL should be formatted on a &lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;lexical level&lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;. The newer API relies on the semantic model in addition. Depending on the state of the abstract syntax tree you can treat things different. Cool – but customization of your formatter is not coming out of the box and we know that formatting is an individual thing. So you would end up in a lot of effort to write a reasonable formatter and make customizations possible. Even when you did your best you will always find a special case that someone wants to treat differently. Codebuff sounds like a nice idea to solve that problem...&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;To marry Xtext and Codebuff together you don't need to do much. Ok – Xtext relies on AntLR 3 and bringing AntLR 4 on the classpath will take you into hell, but there is a pragmatic way around that.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;span style=&quot;text-align: center; background-color: transparent;&quot;&gt;DISCLAIMER: From this point on we are talking about a prototype – not ready for production!&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;First we wrote a so-called GeneratorFragment. To understand this you would have to understand how Xtext works under the covers, but for now let's just stay with the fact that Xtext generates it's DSL specific infrastructure out of the Xtext grammar and a GeneratorFragment is one piece of the overall generator.&lt;/p&gt; 
 &lt;p&gt;To come back to our issue – the GeneratorFragment needs to generate an AntLR 4 grammar. Out of that we need to generate the AntLR 4 lexer and parser. To do that we need the &lt;a href=&quot;https://github.com/antlr/antlr4/blob/master/tool/src/org/antlr/v4/Tool.java&quot;&gt;AntLR 4 generator&lt;/a&gt; but we are not allowed to bring that stuff on the classpath. Let's assume we managed to do that – how could we compile the generated code without AntLR 4 on the classpath? Even when we managed that we are not allowed to bring Codebuff on the classpath as it carries AntLR 4 under the covers. Even when we managed that – does Codebuff have an API that fits for us? The documentation just deals with a call of a main method with a bunch of parameters....&lt;/p&gt; 
 &lt;p&gt;Ok – step by step.&lt;/p&gt; 
 &lt;h2&gt;1. Generate the grammar&lt;/h2&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;The major difference between AntLR 3 and 4 is that AntLR 4 does not allow syntactic predicates anymore since it handles &lt;a href=&quot;https://en.wikipedia.org/wiki/Left_recursion&quot;&gt;left recursion&lt;/a&gt; now directly. AntLR 3 is not able to do that and for that reason grammars need to be left refactored. By doing that, syntactic predicates guide the parser on it's way to get rid of ambiguities and make decisions. The other thing is that the syntax has changed a bit from AntLR 3 to 4. Beside that Codebuff has a special need. Whitespaces and comments need to go to the hidden channel.&lt;/span&gt;&lt;/p&gt; 
 &lt;h2&gt;&lt;strong&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;2. Generate lexer and parser&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt; 
 &lt;p&gt;To achieve that we are downloading the necessary jar on demand once, like we already do it in Xtext for AntLR 3. To invoke the so called Tool of AntLR 4 we created a URLClassLoader that points to the jar. As Xtext uses AntLR 3 we need to leave the parent classloader empty to avoid confusions. After that we need to use reflection to call the right API.&lt;/p&gt; 
 &lt;p&gt;As a fun fact we observed that the AntLR 4 Tool has two methods to process a grammar and both produce lexer and parser - but they are not equal. After fighting with that situation we found out that the method &lt;code&gt;process&lt;/code&gt; is not the right choice as Codebuff got stuck with that the generated sources. &lt;code&gt;P&lt;span style=&quot;background-color: transparent;&quot;&gt;rocessGrammarsOnCommandLine &lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;produced the right result since it reorders the tokens by calling  &lt;/span&gt;&lt;code&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;sortGrammarByTokenVocab &lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;and then called &lt;code&gt;process&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;Of course the generated classes are stored in a separated folder that is no source folder. Otherwise we would end up in compile errors in the project. ;-)&lt;/span&gt;&lt;/p&gt; 
 &lt;h2&gt;&lt;strong&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;3. Compile lexer and parser&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;We cannot simply compile the lexer and parser like the rest of the code since AntLR 4 is not on the classpath. To achieve compiling we used the &lt;/span&gt;&lt;code style=&quot;background-color: transparent; font-size: 16px;&quot;&gt;javax.tools.JavaCompiler &lt;/code&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;directly. To use it we need to bring referenced classes into a special classloader. For this use-case the AntLR 4 jar is enough. After that we need to handle in the files to compile - that's it. &lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;Of course the compiled class files are stored in a separated folder as well. ;-)&lt;/span&gt;&lt;/p&gt; 
 &lt;h2&gt;&lt;strong&gt;4. Use Codebuff with the compiled classes without bringing it on the classpath&lt;/strong&gt;&lt;/h2&gt; 
 &lt;p&gt;To achieve that we used the same trick as for AntLR 4 and downloaded Codebuff on demand once. So we ended up in two jars, AntLR 4 and Codebuff, a grammar and compiled lexer and parser. Now we need to combine all those things.&lt;/p&gt; 
 &lt;p&gt;Codebuff does not really have an &lt;a href=&quot;https://github.com/antlr/codebuff/blob/master/src/org/antlr/codebuff/Tool.java&quot;&gt;API&lt;/a&gt; to use it somewhere else then the commandline. Normally the &lt;a href=&quot;https://github.com/antlr/codebuff/blob/master/src/org/antlr/codebuff/Tool.java&quot;&gt;Tool&lt;/a&gt; class needs a bunch of information including a destination file.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img alt=&quot;Bildschirmfoto 2018-01-04 um 10.48.02.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Bildschirmfoto%202018-01-04%20um%2010.48.02.png?t=1515762170520&amp;amp;width=640&amp;amp;name=Bildschirmfoto%202018-01-04%20um%2010.48.02.png&quot; style=&quot;width: 640px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;640&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;br /&gt;The formatter API in Xtext does not write to a file directly. It needs to set the formatted text as a string. Because of that the given approach does not work for use. &lt;span style=&quot;background-color: transparent;&quot;&gt;We digged a bit in the code and yes there is a way that is slightly complicated and as you know we have to do everything through reflection ;-)&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;To explain it in a simple way we will just mention the steps without showing the ugly reflective code.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;We need to instantiate a &lt;code&gt;org.antlr.codebuff.misc.LangDescriptor&lt;/code&gt; that holds all necessary information about the language. That includes the folder of the examples, a regex to identify examples, the compiled lexer and parser, the root rule of the grammar, the amount of spaces that make an indentation and the rule for comments.&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;We need to load all examples to invoke the train method that fills the matrix with token properties.&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;We need to parse the document that we want to format.&lt;/li&gt; 
  &lt;li&gt;We need to instantiate the formatter and fill in the necessary information including the training result.&lt;/li&gt; 
  &lt;li&gt; We need to invoke the formatter to get a string back that represents the formatted document.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;br /&gt;Sounds simple but we have to admit that it was pain. If Codebuff would have a more user friendly API, it would have been much simpler – we are planning to create a pullrequest to Codebuff to make it easier.&lt;/p&gt; 
 &lt;p&gt;On Xtext side the story is simple – we need to bind a &lt;code&gt;org.eclipse.xtext.ui.editor.formatting.IContentFormatterFactory&lt;/code&gt; to create our &lt;code&gt;org.eclipse.jface.text.formatter.IContentFormatter&lt;/code&gt; that has only one method that gets the document that holds all necessary information and we can directly set the new formatted text.&lt;/p&gt; 
 &lt;p&gt;The only tricky part that is left is classloading. We need to have Codebuff, AntLR4 and the compiled lexer and parser in a classloader. Of course a URLClassLoader solves the problem as we already downloaded the necessary jars and compiled the lexer and parser.&lt;/p&gt; 
 &lt;p&gt;As a wrap up we can say that Codebuff creates a nice way to get rid of an old problem – but it's not perfect. For the future of Xtext it would be nice to have something like that included. Currently we are looking into alternative approaches and enhancements of the existing Codebuff codebase. Stay tuned.&lt;/p&gt; 
&lt;/div&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fmachine-learning-formatting-part-ii&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 12 Jan 2018 11:12:00 +0000</pubDate>
	<author>schill@itemis.com (Holger Schill)</author>
</item>
<item>
	<title>Orion: Announcing Orion 17</title>
	<guid isPermaLink="false">http://planetorion.org/news/?p=910</guid>
	<link>http://planetorion.org/news/2018/01/announcing-orion-17/</link>
	<description>&lt;p&gt;We are pleased to announce the seventeenth release of Orion, “Your IDE in the Cloud”. You can run it now at &lt;a href=&quot;https://orionhub.org/&quot;&gt;OrionHub,&lt;/a&gt; from &lt;a href=&quot;https://www.npmjs.com/package/orion&quot;&gt;NPM&lt;/a&gt; or &lt;a href=&quot;http://download.eclipse.org/orion/drops/R-17.0-201801111044/index.html&quot;&gt;download the server&lt;/a&gt; to run your own instance locally.&lt;/p&gt;
&lt;p&gt;Once again, thank you to all committers and contributors for your hard work this release. There were 86 bugs and enhancements fixed, across 248 commits from 13 authors!&lt;/p&gt;
&lt;p&gt;This release was focussed entirely on making compatibility, stability and overall quality improvements to the Node.js server.&lt;/p&gt;</description>
	<pubDate>Thu, 11 Jan 2018 18:52:41 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: German TUV Sud Joins Eclipse openPASS Working Group</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/2K_LU5LxqMs/OpenPASS-WG</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/2K_LU5LxqMs/OpenPASS-WG</link>
	<description>On Jan 1, 2018 the German TUV Sud has joined as a new member of the Eclipse Foundation &amp;amp; Eclipse openPASS Working Group.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/2K_LU5LxqMs&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 11 Jan 2018 16:10:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: SWT Spy – debugging SWT layouts</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=37780</guid>
	<link>https://eclipsesource.com/blogs/2018/01/10/swt-spy-debugging-swt-layouts/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Do you have to debug an existing SWT view and you are not sure what elements are really on screen? Are you tired of manually coloring composites to find out what’s wrong in your layout?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It is time to remember an oldie but goodie: The SWT spy!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It is a fairly old tool, but still very useful, so let us have a quick look.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Spy can augments a running tool and provide valuable information to debug any SWT application. This can be the IDE in case you are a plugin developer or any RCP or Eclipse 4 application. You can get SWT spy from this location:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;http://download.eclipse.org/eclipse/updates/4.7&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Either add it to your target platform or directly install it into your IDE.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In case you install SWT spy into the IDE, you can open it by pressing:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;SHIFT+CTRL+ALT+F9&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you would like to use SWT spy in a custom application, you need to include the bundle “org.eclipse.tools.layout.spy” into your product. To trigger the spy, there are two options:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you run on the compatibility layer (3.x), the key binding will also work&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you are running on Eclipse 4, you can embed the following code to open the SWT spy window:&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;final LayoutSpyDialog popupDialog = new LayoutSpyDialog(shell);
popupDialog.open();&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The SWT spy will open as a separate dialog, which is connected to the running application. It allows for the inspection of any SWT element with a focus on layout information. To navigate you can either browse the hierarchy or directly jump to an element. The hierarchy is shown as a list on the left side. By double clicking on an element within the current container you will walk down the SWT widget tree, the button on the top left corner will send you one level up. To jump to a specific element, click the button “Select Control” and hover over any element in the running application. A yellow border will help you with the selection. If you check the option “Show overlay”, SWT spy will draw a yellow border around the currently selected element.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-37781 size-full&quot; height=&quot;393&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/01/image2.jpg&quot; width=&quot;1193&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The text field on the right side shows the layout data of the current parent composite. If you select an element on the left, you see its layout data in the text field below. This is very helpful to debug layouts. Furthermore, you can use existing layouts as a template. The SWT spy directly shows you how to create the layout data for a selected element, e.g.&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;GridDataFactory.fillDefaults()
    .grab(true, false)
    .align(SWT.FILL, SWT.BEGINNING)
    .minSize(0, 0)
    .hint(107, SWT.DEFAULT)&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;During our work on &lt;/span&gt;&lt;a href=&quot;http://emfforms.org&quot;&gt;&lt;span&gt;EMF Forms&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, we often develop or adapt renderers. The goal of EMF Forms is to ease the creation of forms, especially concerning the layout. However, before this can happen, you must first create a renderer which will take care of the layout for you. EMF Forms ships with default layouts, but you might want to adapt them.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;When debugging the layout of a combination of renderers, it is often helpful to visualize all elements, which are on screen. Sometimes, elements are not visible (e.g. composites) or have the same background color as their parent. For this purpose, the SWT spy allows you to color controls. If you check the option “Color controls …”, the spy will assign different background colors to each level in your widgets tree. This looks ugly, but is helpful in finding hidden composites or to see how much space certain elements occupy.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-37782 size-full&quot; height=&quot;270&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/01/image1.jpg&quot; width=&quot;735&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 10 Jan 2018 13:28:45 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: RHAMT Eclipse Plugin 4.0.0.Final has been released!</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/windup_4.0.0.ga_release.html</guid>
	<link>https://tools.jboss.org/blog/windup_4.0.0.ga_release.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We are happy to announce the latest release of the Red Hat Application Migration Toolkit (RHAMT) Eclipse Plugin.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;getting-started&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#getting-started&quot;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It is now available through JBoss Central, and from the update site &lt;a href=&quot;http://download.jboss.org/jbosstools/oxygen/stable/updates/rhamt/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-rhamt&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-rhamt&quot;&gt;&lt;/a&gt;What is RHAMT?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;RHAMT is an automated application migration and assessment tool.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Example ways to RHAMT up your code:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Moving your application from WebLogic to EAP, or WebSphere to EAP&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Version upgrade from Hibernate 3 to Hibernate 4, or EAP 6 to EAP 7&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Change UI technologies from Seam 2 to pure JSF 2.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;An example of how to run the RHAMT CLI:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;$ ./rhamt-cli --input /path/to/jee-example-app-1.0.0.ear --output /path/to/output --source weblogic --target eap:7&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The output is a report used to assess and prioritize migration and modernization efforts.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;the-rhamt-eclipse-plugin-what-does-it-do&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#the-rhamt-eclipse-plugin-what-does-it-do&quot;&gt;&lt;/a&gt;The RHAMT Eclipse Plugin - What does it do?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Consider an application migration comprised of thousands of files, with a myriad of small changes, not to mention the tediousness of switching between
       the report and your IDE. Who wants to be the engineer assigned to that task? :)
      Instead, this tooling marks the source files containing issues, making it easy to organize, search, and in many cases automatically fix issues using quick fixes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let me give you a quick walkthrough.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;ruleset-wizard&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#ruleset-wizard&quot;&gt;&lt;/a&gt;Ruleset Wizard&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We now have quickstart template code generators.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Rueset Wizard&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/ruleset_wizard.gif&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;rule-creation-from-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#rule-creation-from-code&quot;&gt;&lt;/a&gt;Rule Creation From Code&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We have also added rule generators for selected snippets of code.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Rule Generation From Source&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/type_implements.gif&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;ruleset-graphical-editor&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#ruleset-graphical-editor&quot;&gt;&lt;/a&gt;Ruleset Graphical Editor&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Ruleset navigation and editing is faster and more intuitive thanks to the new graphical editor.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Graphical Editor&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/ruleset_editor.gif&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;ruleset-view&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#ruleset-view&quot;&gt;&lt;/a&gt;Ruleset View&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We have created a view dedicated to the management of rulesets. Default rulesets shipped with RHAMT can now be opened, edited, and referenced while authoring
      your own custom rulesets.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Ruleset View&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/ruleset_view.gif&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;run-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#run-configuration&quot;&gt;&lt;/a&gt;Run Configuration&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Eclipse plugin interacts with the RHAMT CLI process, thereby making it possible to specify command line options and custom rulesets.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Run Configuration&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/run_configuration.gif&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;ruleset-submission&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#ruleset-submission&quot;&gt;&lt;/a&gt;Ruleset Submission&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Lastly, contribute your custom rulesets back to the community from within the IDE.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Ruleset Submission&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/ruleset_submission.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can find more detailed information &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_application_migration_toolkit/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Our goal is to make the RHAMT tooling easy to use. We look forward to your feedback and comments!&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Have fun!&lt;br /&gt;
      John Steele&lt;br /&gt;
      &lt;a href=&quot;https://github.com/johnsteele/&quot;&gt;github/johnsteele&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 10 Jan 2018 07:42:24 +0000</pubDate>
</item>
<item>
	<title>InfoQ Eclipse feed: Hazelcast Joins the Eclipse Foundation</title>
	<guid isPermaLink="true">http://www.infoq.com/news/2018/01/hazelcast-joins-eclipse?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</guid>
	<link>http://www.infoq.com/news/2018/01/hazelcast-joins-eclipse?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</link>
	<description>&lt;img src=&quot;http://www.infoq.com/styles/i/logo_bigger.jpg&quot; /&gt;&lt;p&gt;Hazelcast, a provider in open source In-Memory Data Grid (IMDG), recently joined the Eclipse Foundation to work with the other members of the Eclipse community to mainly focus on JCache, Eclipse MicroProfile, and EE4J. Greg Luck, CEO at Hazelcast, spoke to InfoQ about Hazelcast joining the Eclipse Foundation.
&lt;/p&gt; &lt;i&gt;By Michael Redlich&lt;/i&gt;</description>
	<pubDate>Tue, 09 Jan 2018 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Eclipse Collections 9.1 Released</title>
	<guid isPermaLink="false">https://medium.com/p/24c413d200ec</guid>
	<link>https://medium.com/@donraab/eclipse-collections-9-1-released-24c413d200ec?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;New Features, more languages, better symmetry and other improvements&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*ZgPZPNVLMlletjZogDJ76w.png&quot; /&gt;&lt;/figure&gt;&lt;blockquote&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; is a collections framework for Java. It has optimized List, Set and Map implementations with a rich and fluent API. The library provides additional data structures not found in the JDK like Bags, Multimaps and BiMaps. The framework also provides primitive versions of Lists, Sets, Bags, Stacks and Maps with a rich and fluent API. There is support for both Mutable and Immutable versions of all containers in the library.&lt;/blockquote&gt;&lt;p&gt;The Eclipse Collections community continues to grow. There were ten developers who contributed to the Eclipse Collections 9.1.0 release. I want to thank everyone who made a contribution. If this was your first contribution to an open source project, congratulations and welcome!&lt;/p&gt;&lt;p&gt;The release notes for Eclipse Collections 9.1.0 are here:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/releases/tag/9.1.0&quot;&gt;eclipse/eclipse-collections&lt;/a&gt;&lt;/p&gt;&lt;h4&gt;Multi-language Website&lt;/h4&gt;&lt;p&gt;In addition to code contributions, several developers worked on translating our Eclipse Collections Website to other spoken languages. This is an amazing example of how you can use more than just your coding skills to help open source projects. Thank you to both the contributors and reviewers!&lt;/p&gt;&lt;p&gt;Here are our website links:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/&quot;&gt;English&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/ja/index.html&quot;&gt;Japanese&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/ru/index.html&quot;&gt;Russian&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/pt-br/index.html&quot;&gt;Brazilian Portuguese&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A Chinese translation is in the works, and we will be looking to add other languages in the future. Please feel to submit an issue or pull request if you’d like to work on a translation to a spoken language you are fluent in.&lt;/p&gt;&lt;h4&gt;The Eclipse Collections Katas&lt;/h4&gt;&lt;p&gt;Both of the Eclipse Collections katas are now available in &lt;a href=&quot;https://revealjs.com/#/&quot;&gt;Reveal.js&lt;/a&gt; as of this release.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/company-kata/#/&quot;&gt;Company Kata&lt;/a&gt; (&lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata/blob/master/docs/company-kata/slides.md&quot;&gt;markdown file&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/pet-kata/#/&quot;&gt;Pet Kata&lt;/a&gt; (&lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata/blob/master/docs/pet-kata/slides.md&quot;&gt;markdown file&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We also had our first ever contribution of a live video demonstration of the Eclipse Collections Pet Kata using Eclipse Oxygen presented in Brazilian Portuguese. Great work and thank you Leo!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=1TH0tdU_esQ&quot;&gt;https://www.youtube.com/watch?v=1TH0tdU_esQ&lt;/a&gt;&lt;/p&gt;&lt;p&gt;It would be great to have multi-language translations of our katas as well. Our katas are hosted now as simple markdown files which get translated to web based slides using &lt;a href=&quot;https://revealjs.com/#/&quot;&gt;Reveal.js&lt;/a&gt;. Feel free to submit a pull request if you’d like to translate the katas to another spoken language.&lt;/p&gt;&lt;h4&gt;New Collectors&lt;/h4&gt;&lt;p&gt;Several new Collector implementations were added to the Collectors2 utility class in this release. We continue to look to provide good integration between the Streams library and Eclipse Collections. Here’s an example of using the new &lt;em&gt;countBy&lt;/em&gt; Collector with a Stream of String.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void countBy()&lt;br /&gt;{&lt;br /&gt;    Stream&amp;lt;String&amp;gt; stream = Stream.&lt;em&gt;of&lt;/em&gt;(&lt;br /&gt;            &lt;strong&gt;&quot;One&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Three&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;tHrEe&quot;&lt;/strong&gt;);&lt;br /&gt;&lt;br /&gt;    Bag&amp;lt;String&amp;gt; counts =&lt;br /&gt;            stream.collect(&lt;br /&gt;                    Collectors2.&lt;em&gt;countBy&lt;/em&gt;(String::toLowerCase));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(1, counts.occurrencesOf(&lt;strong&gt;&quot;one&quot;&lt;/strong&gt;));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(2, counts.occurrencesOf(&lt;strong&gt;&quot;two&quot;&lt;/strong&gt;));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(3, counts.occurrencesOf(&lt;strong&gt;&quot;three&quot;&lt;/strong&gt;));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;You can now consider using the &lt;em&gt;countBy&lt;/em&gt; Collector as an alternative to using the &lt;em&gt;groupingBy&lt;/em&gt; and &lt;em&gt;counting&lt;/em&gt; alternative from the JDK shown below.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void groupingByCounting()&lt;br /&gt;{&lt;br /&gt;    Stream&amp;lt;String&amp;gt; stream = Stream.&lt;em&gt;of&lt;/em&gt;(&lt;br /&gt;            &lt;strong&gt;&quot;One&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Three&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;tHrEe&quot;&lt;/strong&gt;);&lt;br /&gt;&lt;br /&gt;    Map&amp;lt;String, Long&amp;gt; counts =&lt;br /&gt;            stream.collect(&lt;br /&gt;                    Collectors.&lt;em&gt;groupingBy&lt;/em&gt;(String::toLowerCase,&lt;br /&gt;                            Collectors.&lt;em&gt;counting&lt;/em&gt;()));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(Long.&lt;em&gt;valueOf&lt;/em&gt;(1), counts.get(&lt;strong&gt;&quot;one&quot;&lt;/strong&gt;));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(Long.&lt;em&gt;valueOf&lt;/em&gt;(2), counts.get(&lt;strong&gt;&quot;two&quot;&lt;/strong&gt;));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(Long.&lt;em&gt;valueOf&lt;/em&gt;(3), counts.get(&lt;strong&gt;&quot;three&quot;&lt;/strong&gt;));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;There were also Collectors added for &lt;strong&gt;&lt;em&gt;groupByEach&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;groupByUniqueKey &lt;/em&gt;&lt;/strong&gt;on the &lt;strong&gt;&lt;em&gt;Collectors2&lt;/em&gt;&lt;/strong&gt; class in this release.&lt;/p&gt;&lt;h4&gt;&lt;a href=&quot;https://medium.com/@donraab/symmetric-sympathy-2c59d4541d60&quot;&gt;Symmetric Sympathy&lt;/a&gt; Continues&lt;/h4&gt;&lt;p&gt;You can now use &lt;em&gt;zip&lt;/em&gt; with primitive Lists. There are two varieties of zip for primitive Lists.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Zipping a primitive and an object List.&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;@Test&lt;br /&gt;public void zipPrimitiveWithObject()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;IntObjectPair&amp;lt;String&amp;gt;&amp;gt; zipped =&lt;br /&gt;            IntLists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3)&lt;br /&gt;                    .zip(Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;one&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;));&lt;br /&gt;&lt;br /&gt;    List&amp;lt;IntObjectPair&amp;lt;String&amp;gt;&amp;gt; expected =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(1, &lt;strong&gt;&quot;one&quot;&lt;/strong&gt;),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(2, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(3, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(expected, zipped);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;2. Zipping two primitive Lists of the same type.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void zipIntToInt()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;IntIntPair&amp;gt; zipped =&lt;br /&gt;            IntLists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3)&lt;br /&gt;                    .zipInt(IntInterval.&lt;em&gt;oneTo&lt;/em&gt;(3).asReversed());&lt;br /&gt;&lt;br /&gt;    List&amp;lt;IntIntPair&amp;gt; expected =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(1, 3),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(2, 2),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(3, 1));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(expected, zipped);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;There is a zip&amp;lt;Type&amp;gt; method for each primitive type. Here is an example of the &lt;em&gt;zipChar&lt;/em&gt; method available on &lt;em&gt;CharAdapter&lt;/em&gt;, which is an &lt;em&gt;ImmutableCharList&lt;/em&gt;. We can obtain a &lt;em&gt;CharAdapter&lt;/em&gt; now simply by using the new &lt;em&gt;Strings&lt;/em&gt; factory class.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void zipCharToChar()&lt;br /&gt;{&lt;br /&gt;    ImmutableList&amp;lt;CharCharPair&amp;gt; zipped =&lt;br /&gt;            Strings.&lt;em&gt;asChars&lt;/em&gt;(&lt;strong&gt;&quot;hello&quot;&lt;/strong&gt;)&lt;br /&gt;                    .zipChar(Strings.&lt;em&gt;asChars&lt;/em&gt;(&lt;strong&gt;&quot;hello&quot;&lt;/strong&gt;).asReversed());&lt;br /&gt;&lt;br /&gt;    List&amp;lt;CharCharPair&amp;gt; expected =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(&lt;strong&gt;'h'&lt;/strong&gt;, &lt;strong&gt;'o'&lt;/strong&gt;),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(&lt;strong&gt;'e'&lt;/strong&gt;, &lt;strong&gt;'l'&lt;/strong&gt;),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(&lt;strong&gt;'l'&lt;/strong&gt;, &lt;strong&gt;'l'&lt;/strong&gt;),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(&lt;strong&gt;'l'&lt;/strong&gt;, &lt;strong&gt;'e'&lt;/strong&gt;),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(&lt;strong&gt;'o'&lt;/strong&gt;, &lt;strong&gt;'h'&lt;/strong&gt;));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(expected, zipped);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Abandoning Symmetry for a better design&lt;/h4&gt;&lt;p&gt;Sometimes providing good symmetry may not be the best solution to a problem. There has been a method called &lt;em&gt;zipWithIndex&lt;/em&gt; available on Eclipse Collections object collections for a very long time. &lt;em&gt;ZipWithIndex&lt;/em&gt; was added before we had primitive collections in Eclipse Collections, so its return type unfortunately boxes an Integer for the index. I did not want to add a primitive version of of the same API. Instead, I added a new method to both object and primitive Lists (Symmetry!) called &lt;strong&gt;&lt;em&gt;collectWithIndex&lt;/em&gt;&lt;/strong&gt;. &lt;em&gt;CollectWithIndex&lt;/em&gt; can be used to implement &lt;em&gt;zipWithIndex &lt;/em&gt;by collecting to a &lt;em&gt;ObjectIntPair&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void whereIsZipWithIndex()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;Pair&amp;lt;String, &lt;strong&gt;Integer&lt;/strong&gt;&amp;gt;&amp;gt; original =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;2&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;3&quot;&lt;/strong&gt;)&lt;br /&gt;                    .zipWithIndex();&lt;br /&gt;&lt;br /&gt;    MutableList&amp;lt;ObjectIntPair&amp;lt;String&amp;gt;&amp;gt; improved =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;2&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;3&quot;&lt;/strong&gt;)&lt;br /&gt;                    .collectWithIndex(PrimitiveTuples::&lt;em&gt;pair&lt;/em&gt;);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            original.get(0).getTwo().intValue(),&lt;br /&gt;            improved.get(0).getTwo());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            original.get(1).getTwo().intValue(),&lt;br /&gt;            improved.get(1).getTwo());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            original.get(2).getTwo().intValue(),&lt;br /&gt;            improved.get(2).getTwo());&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Ideally, &lt;em&gt;zipWithIndex&lt;/em&gt; would have returned &lt;em&gt;ObjectIntPair&lt;/em&gt;, but this type wasn’t available when the API was originally added. Since we don’t like breaking backwards compatibility on existing methods unless there is a very compelling reason to, we’ll probably never change the return type for &lt;em&gt;zipWithIndex&lt;/em&gt;. The &lt;em&gt;collectWithIndex&lt;/em&gt; method can return any type you want, not just a Pair. I believe &lt;em&gt;collectWithIndex&lt;/em&gt; will prove to be a more useful method than &lt;em&gt;zipWithIndex&lt;/em&gt; in the long run.&lt;/p&gt;&lt;h4&gt;And of there is more…&lt;/h4&gt;&lt;p&gt;Have a look at some of the other features listed in the &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/releases/tag/9.1.0&quot;&gt;release notes&lt;/a&gt;. We look forward to seeing more contributors to Eclipse Collections in the future.&lt;/p&gt;&lt;p&gt;Happy New Year and have fun using Eclipse Collections 9.1 in your Java projects!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=24c413d200ec&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 05 Jan 2018 19:39:34 +0000</pubDate>
</item>
<item>
	<title>Ian Skerrett: Time for a New Challenge</title>
	<guid isPermaLink="false">http://ianskerrett.wordpress.com/?p=4454</guid>
	<link>http://feedproxy.google.com/~r/IanSkerrett/~3/dp2fpochwkk/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The new year brings a big change; I will be leaving the Eclipse Foundation at the end of January. This has been a difficult decision to make but it is time to take on a new challenge.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;I am extremely proud to have been part of the Eclipse Foundation and Eclipse community since the early days. I fondly remember the chaotic and exciting early years of setting up the Foundation and the explosive growth of projects, members and users. The Eclipse Foundation was one of the first open source foundations that showed how professional staff can help bring together companies and open source developers to create innovative open source communities. In some ways, the Eclipse Foundation became the template for many of the new open source foundations started in the last 5 years.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It is great to be leaving when the Foundation is gaining tremendous momentum. In particular, EE4J, Eclipse Microprofile, DeepLearning4J, OpenJ9 and other projects are all showing Eclipse is becoming the place for open source enterprise Java. The Eclipse IoT working group continues to grow and is certainly the largest IoT open source community in the industry. The Foundation is definitely on a roll.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Of course I will miss the amazing people at the Foundation and in the Eclipse community. I am privileged to have worked with so many individuals from many different organizations. One of the best parts of my role is being able to learn from some of the world’s best. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It is time to start looking for a new challenge. I am going to take some time to look for a new position. My passion is working with smart technologists to create and implement strategies to promote the market adoption of new technologies and solutions. Today there are some fascinating new technologies being introduced, like AI/ML, Blockchain/Distributed Ledgers, Cloud Native Computing, IoT, etc. It is an exciting time to work in the technology industry and I look forward to taking on a new challenge.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;My last day with the Eclipse Foundation will be January 26, 2018. The technology industry is very small so I hope and expect to keep in touch with many people from the Eclipse community. I will continue to be active on my blog, &lt;a href=&quot;https://twitter.com/ianskerrett&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/ianskerrett/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/ianskerrett.wordpress.com/4454/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/ianskerrett.wordpress.com/4454/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=ianskerrett.wordpress.com&amp;amp;blog=405862&amp;amp;post=4454&amp;amp;subd=ianskerrett&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/IanSkerrett/~4/dp2fpochwkk&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 04 Jan 2018 13:39:24 +0000</pubDate>
</item>
<item>
	<title>Doug Schaefer: Following the Community's Lead</title>
	<guid isPermaLink="false">https://cdtdoug.ca/tag/eclipse/rss/5a4d3387a395eb05edc6c3ec</guid>
	<link>https://cdtdoug.ca/following-the-communitys-lead/</link>
	<description>&lt;div class=&quot;kg-card-markdown&quot;&gt;&lt;p&gt;I posted this tweet a couple of weeks ago and thought I'd explain it a bit more.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;2018 is going to be a defining year. Either it'll be the end and a new beginning, or it'll be a revival. Not sure I control either path other than my desire to not walk it alone.&lt;/p&gt;— Doug Schaefer (@dougschaefer) &lt;a href=&quot;https://twitter.com/dougschaefer/status/943888353564549120?ref_src=twsrc%5Etfw&quot;&gt;December 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;I wrote it shortly after posting the final bits for the CDT 9.4 release and was starting to think about my plans for 2018. And certainly the current state of Eclipse tools projects including the CDT has been weighing on my mind.&lt;/p&gt;
&lt;p&gt;When QNX started the CDT project, we embraced open source as a means of sharing in a common effort to build a great C/C++ IDE. We didn't have a huge team and we knew that many platform vendors were in a similar situation. By working together, we all benefit. And for many years it worked and we now have the embedded industry's most popular IDE that we all should be proud of.&lt;/p&gt;
&lt;p&gt;But times they are a changing. &lt;a href=&quot;https://cdtdoug.ca/looking-forward-to-2017/&quot;&gt;As I blogged last year around this time&lt;/a&gt;, web technologies are becoming the platform of choice, not just for web, &lt;a href=&quot;https://electronjs.org/&quot;&gt;but with the help of Electron&lt;/a&gt;, for the desktop as well. We can not discount the popularity of &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; and the ecosystem that has quickly developed around it. And with shared technologies like language servers, the door is being opened to choice like we've never had before.&lt;/p&gt;
&lt;p&gt;So as I was inferring from my tweet, it's time to take stock of where we are and where we are going. I was encouraged with the discussions I had at EclipseCon around the future of CDT. I've done what I can to help keep things rolling but at the end of the day the community leads the way and I need to be honest with myself and my customers and go where they go.&lt;/p&gt;
&lt;/div&gt;</description>
	<pubDate>Wed, 03 Jan 2018 21:35:22 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: The 4am Jamestown-Scotland ferry and other optimization strategies</title>
	<guid isPermaLink="false">https://medium.com/p/66365ac415ef</guid>
	<link>https://medium.com/@donraab/the-4am-jamestown-scotland-ferry-and-other-optimization-strategies-66365ac415ef?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;When performance is important, so is understanding your available options.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*BUyYy1ntHACBHXnccAHvNA.png&quot; /&gt;Shortcuts sometimes aren’t.&lt;/figure&gt;&lt;p&gt;Happy New Year!&lt;/p&gt;&lt;p&gt;I thought I would start out 2018 with a performance optimization story from 2017.&lt;/p&gt;&lt;h4&gt;Takeaways from this blog&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Java Iteration Pattern Optimization Strategies&lt;/li&gt;&lt;li&gt;A few &lt;a href=&quot;http://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt; and Java Stream Iteration Pattern options.&lt;/li&gt;&lt;li&gt;Recommendations at the end&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;A shortcut with a twist&lt;/h4&gt;&lt;p&gt;On January 2nd 2017, I sat with my family in our Honda Pilot on a pier at 3:30am for a half hour waiting for the 4am &lt;a href=&quot;http://www.virginiadot.org/travel/ferry-jamestown.asp&quot;&gt;Jamestown-Scotland ferry&lt;/a&gt; to arrive. I had come to the literal end of the road on a shortcut that wasn’t exactly as I had expected. I decided to take the shorter distance route on my car’s Nav System to avoid having to go north on Interstate 95 only then to have to go south to get to Williamsburg, Virginia. I’ve gotten stuck in bumper to bumper traffic in Virginia on Route 95 on late night rides coming back from Florida a few times before. When we got to the end of the road on our shorter route, the Nav System indicated the next turn was to get on the ferry (see picture above).&lt;/p&gt;&lt;p&gt;I was willing to take slower local roads, especially since it was early in the morning and there would be no traffic on them. We discovered too late that the path that our chosen path included a ferry ride. At this point, we only had two options. We could wait for the ferry and hope it was running, or turn around and add another 3 to 4 hours to our trip. A classic &lt;a href=&quot;https://en.wikipedia.org/wiki/Hobson%27s_choice&quot;&gt;Hobson’s Choice&lt;/a&gt;. We waited for the ferry. It turned out to be a fun experience once we parked our car on the ferry, but I would have preferred an alternative at 4am after driving 14 hours.&lt;/p&gt;&lt;h4&gt;“Two roads diverged in a wood…” — Robert Frost&lt;/h4&gt;&lt;p&gt;I certainly took the one less traveled by. I did learn a new route that I didn’t know before for getting to Williamsburg from Orlando, as well as the planning required to optimize that route with the ferry schedule.&lt;/p&gt;&lt;p&gt;What does this trip have to do with Eclipse Collections, you may ask? Well, the path I took was the &lt;strong&gt;&lt;em&gt;Serial&lt;/em&gt;&lt;/strong&gt; (one lane Colonial era roads), &lt;strong&gt;&lt;em&gt;Lazy&lt;/em&gt;&lt;/strong&gt; (ferry does the work until you get to the dock), and &lt;strong&gt;&lt;em&gt;Boxed&lt;/em&gt;&lt;/strong&gt; (your car is literally boxed in on the ferry by other cars) — just one of many options you can choose with Eclipse Collections and Java Streams.&lt;/p&gt;&lt;h4&gt;“Premature optimization is the root of all evil” — Donald Knuth&lt;/h4&gt;&lt;p&gt;Readability should be prioritized above performance when writing code. However, it helps to know what your available performance optimization options are, before you discover last minute your only option is stopping and waiting for the next ferry. You may actually be able to achieve better performance without sacrificing readability. In fact, there may be options you were unaware of previously that improve both readability and performance.&lt;/p&gt;&lt;p&gt;There is a set of Iteration Pattern Optimization Strategies that I believe all developers should become aware of so they can appropriately tune their code for the best performance.&lt;/p&gt;&lt;p&gt;Don’t guess when optimizing code. First prove you have a problem that needs to be fixed. Then benchmark any solutions you think may help to prove that they actually do.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Travelers Beware:&lt;/strong&gt; You can lose many hours of your life measuring performance optimization benefits. The tests I have run below take 45–50 minutes to run each time. I had to run them several times along with unit tests to validate that the results were the same across all similar tests. When you see the charts, you may be at first compelled by the graphs in terms of wanting to change your code to be more “optimal”. Optimal may not equate to noticeably faster in terms of your application’s overall performance. Each of these tests take at most hundreds of milliseconds to run. They are all “fast”, because they are all in memory. The optimal solutions may only accumulate savings over a large number of executions. If you happen to see a more readable solution you were not aware of here, go for that one.&lt;/p&gt;&lt;h4&gt;Iteration Pattern Optimization Strategies&lt;/h4&gt;&lt;p&gt;Do you know how to leverage all of these strategies separately and together to increase performance without sacrificing readability?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Eager&lt;/strong&gt; — executes immediately with potential optimizations specific to each algorithm and data structure. Eager algorithms are as close to a hand coded for-loop as you will get, so they are easy to understand and debug. &lt;em&gt;I prefer eager as the default option for iterating over collections. It is the simplest and usually most succinct and readable solution available. I consider every other solution a potential optimization, which may prove pre-mature.&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Primitive&lt;/strong&gt; — If you can avoid boxing primitives, you can reduce memory cost and potentially increase performance. &lt;em&gt;I always use primitive collections and algorithms when I can.&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Lazy&lt;/strong&gt; — executes only when a terminal operation is called. Optimizations include reducing the amount of memory required and total computation when multiple operation are executed. Short-circuiting effects can really help performance when run lazily. &lt;em&gt;I prefer lazy as soon as I am executing multiple operations that would result in temporary collections being created.&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Parallel&lt;/strong&gt; — It costs more to run in parallel. You need the right data size, algorithm and multiple cores. If you have all of these, you may benefit from running in parallel. &lt;em&gt;Measure it to prove it.&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Eager vs. Lazy — Understanding how they work&lt;/h4&gt;&lt;p&gt;Let’s take a list of five integers and perform a filter, map, and reduce set of operations both eagerly and lazily.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void eagerVsLazy()&lt;br /&gt;{&lt;br /&gt;    long eagerSum = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5)&lt;br /&gt;            .tap(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;eager select: &quot; &lt;/strong&gt;+ i))&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .tap(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;eager collect: &quot; &lt;/strong&gt;+ i))&lt;br /&gt;            .collectInt(i -&amp;gt; i * 2)&lt;br /&gt;            .tap(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;eager sum: &quot; &lt;/strong&gt;+ i))&lt;br /&gt;            .sum();&lt;br /&gt;    System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(eagerSum);&lt;br /&gt;&lt;br /&gt;    long lazySum = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5)&lt;br /&gt;            .asLazy()&lt;br /&gt;            .tap(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;lazy select: &quot; &lt;/strong&gt;+ i))&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .tap(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;lazy collect: &quot; &lt;/strong&gt;+ i))&lt;br /&gt;            .collectInt(i -&amp;gt; i * 2)&lt;br /&gt;            .tap(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;lazy sum: &quot; &lt;/strong&gt;+ i))&lt;br /&gt;            .sum();&lt;br /&gt;    System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(lazySum);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(eagerSum, lazySum);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Except for the additional call to asLazy in the lazy example, the code should look identical. The printed results are as follows:&lt;/p&gt;&lt;pre&gt;eager select: 1&lt;br /&gt;eager select: 2&lt;br /&gt;eager select: 3&lt;br /&gt;eager select: 4&lt;br /&gt;eager select: 5&lt;br /&gt;eager collect: 2&lt;br /&gt;eager collect: 4&lt;br /&gt;eager sum: 4&lt;br /&gt;eager sum: 8&lt;br /&gt;12&lt;/pre&gt;&lt;pre&gt;lazy select: 1&lt;br /&gt;lazy select: 2&lt;br /&gt;lazy collect: 2&lt;br /&gt;lazy sum: 4&lt;br /&gt;lazy select: 3&lt;br /&gt;lazy select: 4&lt;br /&gt;lazy collect: 4&lt;br /&gt;lazy sum: 8&lt;br /&gt;lazy select: 5&lt;br /&gt;12&lt;/pre&gt;&lt;p&gt;Notice how the order of execution changes on the lambdas in the lazy case. In the eager case, two additional lists are created as intermediate results during the execution. A List of Integer with two Integers (2, 4) and then an IntList with two ints (4, 8) are created before the final call to sum. In the lazy case, there are no intermediate collections created. This results in less garbage being generated. This is why I prefer lazy execution when there are multiple operations involved. If there was a single operation involved, then I would default to using the eager solution.&lt;/p&gt;&lt;p&gt;If we look at the serial Stream solution, it’s execution order will be the same as the lazy Eclipse Collections solution.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void stream()&lt;br /&gt;{&lt;br /&gt;    int streamSum = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5)&lt;br /&gt;            .stream()&lt;br /&gt;            .peek(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;stream filter: &quot;&lt;/strong&gt;+ i))&lt;br /&gt;            .filter(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .peek(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;stream map: &quot;&lt;/strong&gt;+ i))&lt;br /&gt;            .mapToInt(i -&amp;gt; i * 2)&lt;br /&gt;            .peek(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;stream sum: &quot;&lt;/strong&gt;+ i))&lt;br /&gt;            .sum();&lt;br /&gt;    System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(streamSum);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Here is the output:&lt;/p&gt;&lt;pre&gt;stream filter: 1&lt;br /&gt;stream filter: 2&lt;br /&gt;stream map: 2&lt;br /&gt;stream sum: 4&lt;br /&gt;stream filter: 3&lt;br /&gt;stream filter: 4&lt;br /&gt;stream map: 4&lt;br /&gt;stream sum: 8&lt;br /&gt;stream filter: 5&lt;br /&gt;12&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Lazy + Parallel = Harder to Follow&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Using Eclipse Collections lazy parallel with a batch size of one so we can see the results for a very small list.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void parallel()&lt;br /&gt;{&lt;br /&gt;    long parallelSum = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5)&lt;br /&gt;            .&lt;strong&gt;asParallel&lt;/strong&gt;(Executors.&lt;em&gt;newWorkStealingPool&lt;/em&gt;(), &lt;strong&gt;1&lt;/strong&gt;)&lt;br /&gt;            .select(i -&amp;gt; {&lt;br /&gt;                System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;parallel select: &quot; &lt;/strong&gt;+ i);&lt;br /&gt;                return i % 2 == 0;&lt;br /&gt;            })&lt;br /&gt;            .collect(i -&amp;gt; {&lt;br /&gt;                System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;parallel collect: &quot; &lt;/strong&gt;+ i);&lt;br /&gt;                return i * 2;&lt;br /&gt;            })&lt;br /&gt;            .sumOfInt(i -&amp;gt; {&lt;br /&gt;                System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;parallel sum: &quot; &lt;/strong&gt;+ i);&lt;br /&gt;                return i;&lt;br /&gt;            });&lt;br /&gt;    System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(parallelSum);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;Run 1:&lt;br /&gt;&lt;/strong&gt;parallel select: 2&lt;br /&gt;parallel select: 1&lt;br /&gt;parallel select: 4&lt;br /&gt;parallel collect: 4&lt;br /&gt;parallel select: 3&lt;br /&gt;sum: 8&lt;br /&gt;parallel select: 5&lt;br /&gt;parallel collect: 2&lt;br /&gt;sum: 4&lt;br /&gt;12&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;Run 2:&lt;br /&gt;&lt;/strong&gt;parallel select: 1&lt;br /&gt;parallel select: 3&lt;br /&gt;parallel select: 2&lt;br /&gt;parallel select: 5&lt;br /&gt;parallel select: 4&lt;br /&gt;parallel collect: 2&lt;br /&gt;parallel collect: 4&lt;br /&gt;parallel sum: 4&lt;br /&gt;parallel sum: 8&lt;br /&gt;12&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;Run 3:&lt;br /&gt;&lt;/strong&gt;parallel select: 4&lt;br /&gt;parallel select: 2&lt;br /&gt;parallel collect: 2&lt;br /&gt;parallel select: 5&lt;br /&gt;parallel select: 3&lt;br /&gt;parallel select: 1&lt;br /&gt;parallel sum: 4&lt;br /&gt;parallel collect: 4&lt;br /&gt;parallel sum: 8&lt;br /&gt;12&lt;/pre&gt;&lt;p&gt;The result is consistent between runs, but the order of execution of lambdas is not guaranteed nor consistent.&lt;/p&gt;&lt;p&gt;Using parallel Streams:&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void parallelStream()&lt;br /&gt;{&lt;br /&gt;    int streamSum = Interval.&lt;em&gt;oneTo&lt;/em&gt;(5).toList()&lt;br /&gt;            .parallelStream()&lt;br /&gt;            .peek(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;stream filter: &quot;&lt;/strong&gt;+ i))&lt;br /&gt;            .filter(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .peek(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;stream map: &quot;&lt;/strong&gt;+ i))&lt;br /&gt;            .mapToInt(i -&amp;gt; i * 2)&lt;br /&gt;            .peek(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;stream sum: &quot;&lt;/strong&gt;+ i))&lt;br /&gt;            .sum();&lt;br /&gt;    System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(streamSum);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;Run 1:&lt;br /&gt;&lt;/strong&gt;stream filter: 4&lt;br /&gt;stream filter: 1&lt;br /&gt;stream map: 4&lt;br /&gt;stream filter: 2&lt;br /&gt;stream sum: 8&lt;br /&gt;stream filter: 3&lt;br /&gt;stream filter: 5&lt;br /&gt;stream map: 2&lt;br /&gt;stream sum: 4&lt;br /&gt;12&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;Run 2:&lt;br /&gt;&lt;/strong&gt;stream filter: 5&lt;br /&gt;stream filter: 1&lt;br /&gt;stream filter: 3&lt;br /&gt;stream filter: 2&lt;br /&gt;stream filter: 4&lt;br /&gt;stream map: 2&lt;br /&gt;stream map: 4&lt;br /&gt;stream sum: 4&lt;br /&gt;stream sum: 8&lt;br /&gt;12&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;Run 3:&lt;br /&gt;&lt;/strong&gt;stream filter: 2&lt;br /&gt;stream filter: 4&lt;br /&gt;stream map: 2&lt;br /&gt;stream map: 4&lt;br /&gt;stream sum: 8&lt;br /&gt;stream filter: 1&lt;br /&gt;stream filter: 3&lt;br /&gt;stream filter: 5&lt;br /&gt;stream sum: 4&lt;br /&gt;12&lt;/pre&gt;&lt;h4&gt;Measure, Execute and Repeat.&lt;/h4&gt;&lt;p&gt;I am going to show different options and their performance characteristics for a set of use cases using a million randomly generated integers stored in Lists. These are not likely to be the use cases you will encounter in production code, but they should hopefully illustrate some options you may not have been aware of next time you find a bottleneck you were not expecting in your basic Java data structures and algorithms. I will demonstrate the performance differences between using object and primitive lists, eager and lazy APIs, with both serial and parallel execution, with four different use cases.&lt;/p&gt;&lt;p&gt;In each use case, I share what I observed — expected and unexpected. I only observed. I have not dug into the why the results were what they were. “The why” perhaps is a topic for another blog.&lt;/p&gt;&lt;h4&gt;Use Cases — Filter, Map, Reduce, and Filter/Map/Reduce&lt;/h4&gt;&lt;pre&gt;1. Filter even integers into a List&lt;br /&gt;2. Multiply the integers by 2 and storing the result in a List&lt;br /&gt;3. Sum all the integers into a long&lt;br /&gt;4. Filter/Map/Reduce (Filter Evens, Multiply x 2, Sum into long)&lt;/pre&gt;&lt;h4&gt;The Data — 1,000,000 Integers&lt;/h4&gt;&lt;pre&gt;private List&amp;lt;Integer&amp;gt; jdkList;&lt;br /&gt;private MutableList&amp;lt;Integer&amp;gt; ecList;&lt;br /&gt;private IntList ecPrimitiveList;&lt;br /&gt;private ExecutorService executorService;&lt;/pre&gt;&lt;pre&gt;@Setup&lt;br /&gt;public void setup()&lt;br /&gt;{&lt;br /&gt;    PrimitiveIterator.OfInt intGenerator = &lt;br /&gt;        new Random(1L).ints(-1000, 1000).iterator();&lt;br /&gt;    this.ecList = &lt;br /&gt;        FastList.&lt;em&gt;newWithNValues&lt;/em&gt;(1_000_000, intGenerator::nextInt);&lt;br /&gt;    this.jdkList = new ArrayList&amp;lt;&amp;gt;(1_000_000);&lt;br /&gt;    this.jdkList.addAll(this.ecList);&lt;br /&gt;    this.ecPrimitiveList = &lt;br /&gt;        this.ecList.collectInt(i -&amp;gt; i, new IntArrayList(1_000_000));&lt;br /&gt;    this.executorService = Executors.&lt;em&gt;newWorkStealingPool&lt;/em&gt;();&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Hardware&lt;/h4&gt;&lt;p&gt;I will be using a MacPro with the following hardware specs to measure the benchmarks:&lt;/p&gt;&lt;pre&gt;Processor Name: 12-Core Intel Xeon E5&lt;br /&gt;Processor Speed: 2.7 GHz&lt;br /&gt;Number of Processors: 1&lt;br /&gt;Total Number of Cores: 12&lt;br /&gt;L2 Cache (per Core): 256 KB&lt;br /&gt;L3 Cache: 30 MB&lt;br /&gt;Memory: 64 GB&lt;/pre&gt;&lt;h4&gt;Software&lt;/h4&gt;&lt;p&gt;To illustrate the different options that are available for these particular use cases, I will be using JDK 1.8.0_152 with &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; and Streams.&lt;/p&gt;&lt;h4&gt;Benchmarking&lt;/h4&gt;&lt;p&gt;I am using &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot;&gt;JMH&lt;/a&gt; version 1.19 as the benchmark harness for my tests. I am running 30 warmup iterations, and 20 measurement iterations with 2 forks. I am using Mode.Throughput with the tests so they are easy to read. The numbers are in Operations per Second. &lt;em&gt;The bigger the number, the better the result.&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;public static void main(String[] args) throws RunnerException&lt;br /&gt;{&lt;br /&gt;    Options options = new OptionsBuilder()&lt;br /&gt;        .include(&lt;strong&gt;&quot;.*&quot; &lt;/strong&gt;+ IntListJMHTest.class.getSimpleName() + &lt;strong&gt;&quot;.*&quot;&lt;/strong&gt;)&lt;br /&gt;            .forks(2)&lt;br /&gt;            .mode(Mode.&lt;strong&gt;&lt;em&gt;Throughput&lt;/em&gt;&lt;/strong&gt;)&lt;br /&gt;            .timeUnit(TimeUnit.&lt;strong&gt;&lt;em&gt;SECONDS&lt;/em&gt;&lt;/strong&gt;)&lt;br /&gt;            .warmupIterations(30)&lt;br /&gt;            .build();&lt;br /&gt;    new Runner(options).run();&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;I will highlight in &lt;strong&gt;&lt;em&gt;dark green&lt;/em&gt;&lt;/strong&gt; the best overall result in the run. I will highlight in &lt;strong&gt;&lt;em&gt;light green&lt;/em&gt;&lt;/strong&gt; the best serial execution result. Where I use EC in a label in the chart it stands for a solution using Eclipse Collections. Where I used JDK, the solution uses a standard JDK approach.&lt;/p&gt;&lt;h4&gt;Filter even integers&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/752/1*E_rVn4mHtKIJs78KDP6dzg.png&quot; /&gt;Filter even numbers from a List of 1,000,000 Integers&lt;/figure&gt;&lt;p&gt;&lt;em&gt;Expected:&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I expected ECParallelEager to perform better.&lt;/li&gt;&lt;li&gt;I expected primitive collections to outperform boxed collections.&lt;/li&gt;&lt;li&gt;I expected serial eager to outperform serial lazy.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Unexpected:&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I did not expect parallel streams to perform this poorly.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public MutableList&amp;lt;Integer&amp;gt; &lt;strong&gt;filterECBoxedEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList.select(i -&amp;gt; i % 2 == 0);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public MutableList&amp;lt;Integer&amp;gt; &lt;strong&gt;filterECBoxedLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asLazy()&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .toList();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public MutableList&amp;lt;Integer&amp;gt; &lt;strong&gt;filterECParallelEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return ParallelIterate.&lt;em&gt;select&lt;/em&gt;(&lt;br /&gt;            this.ecList,&lt;br /&gt;            i -&amp;gt; i % 2 == 0,&lt;br /&gt;            new CompositeFastList&amp;lt;&amp;gt;(),&lt;br /&gt;            false);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public MutableList&amp;lt;Integer&amp;gt; &lt;strong&gt;filterECParallelLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asParallel(this.executorService, 50_000)&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .toList();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public IntList &lt;strong&gt;filterECPrimitiveEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecPrimitiveList.select(i -&amp;gt; i % 2 == 0);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public IntList &lt;strong&gt;filterECPrimitiveLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecPrimitiveList&lt;br /&gt;            .asLazy()&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .toList();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public List&amp;lt;Integer&amp;gt; &lt;strong&gt;filterJDKBoxedParallelStream&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.jdkList&lt;br /&gt;            .parallelStream()&lt;br /&gt;            .filter(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .collect(Collectors.&lt;em&gt;toList&lt;/em&gt;());&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public List&amp;lt;Integer&amp;gt; &lt;strong&gt;filterJDKBoxedStream&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.jdkList&lt;br /&gt;            .stream()&lt;br /&gt;            .filter(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .collect(Collectors.&lt;em&gt;toList&lt;/em&gt;());&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Map each integer x 2&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/752/1*2Z3CRHb8BnOhPdp2akeBug.png&quot; /&gt;Multiply times two, each integer in a List of 1,000,000 Integers&lt;/figure&gt;&lt;p&gt;&lt;em&gt;Expected:&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I expected primitive collections to outperform boxed collections.&lt;/li&gt;&lt;li&gt;I expected serial eager to outperform serial lazy.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Unexpected:&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I did not expected ECParallelLazy to perform so poorly.&lt;/li&gt;&lt;li&gt;I did not expect either Stream solutions to perform so poorly.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public MutableList&amp;lt;Integer&amp;gt; &lt;strong&gt;mapECBoxedEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList.collect(i -&amp;gt; i * 2);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public MutableList&amp;lt;Integer&amp;gt; &lt;strong&gt;mapECBoxedLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asLazy()&lt;br /&gt;            .collect(i -&amp;gt; i * 2)&lt;br /&gt;            .toList();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public MutableList&amp;lt;Integer&amp;gt; &lt;strong&gt;mapECParallelEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return ParallelIterate.&lt;em&gt;collect&lt;/em&gt;(&lt;br /&gt;            this.ecList, i -&amp;gt; i * 2,&lt;br /&gt;            new CompositeFastList&amp;lt;&amp;gt;(),&lt;br /&gt;            false);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public MutableList&amp;lt;Integer&amp;gt; &lt;strong&gt;mapECParallelLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asParallel(this.executorService, 50_000)&lt;br /&gt;            .collect(i -&amp;gt; i * 2)&lt;br /&gt;            .toList();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public IntList &lt;strong&gt;mapECPrimitiveEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecPrimitiveList&lt;br /&gt;            .collectInt(i -&amp;gt; i * 2, IntLists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty());&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public IntList &lt;strong&gt;mapECPrimitiveLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecPrimitiveList&lt;br /&gt;            .asLazy()&lt;br /&gt;            .collectInt(i -&amp;gt; i * 2)&lt;br /&gt;            .toList();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public List&amp;lt;Integer&amp;gt; &lt;strong&gt;mapJDKBoxedParallelStream&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.jdkList&lt;br /&gt;            .parallelStream()&lt;br /&gt;            .mapToInt(i -&amp;gt; i * 2)&lt;br /&gt;            .boxed()&lt;br /&gt;            .collect(Collectors.&lt;em&gt;toList&lt;/em&gt;());&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public List&amp;lt;Integer&amp;gt; mapJDKBoxedStream()&lt;br /&gt;{&lt;br /&gt;    return this.jdkList&lt;br /&gt;            .stream()&lt;br /&gt;            .mapToInt(i -&amp;gt; i * 2)&lt;br /&gt;            .boxed()&lt;br /&gt;            .collect(Collectors.&lt;em&gt;toList&lt;/em&gt;());&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Sum all integers&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/752/1*gSrwPZqSVOUDp_pFMM0Okg.png&quot; /&gt;Sum 1,000,000 Integers&lt;/figure&gt;&lt;p&gt;&lt;em&gt;Expected:&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I expected primitive collections to outperform boxed collections.&lt;/li&gt;&lt;li&gt;I expected little benefit from parallelization here. Summing ints is a very fast operation. I expected eager primitive to be faster than most of the parallel options.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Unexpected:&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I did not expect serial streams to get crushed. There seems to have been an improvement made in Java 9. I ran the benchmarks again with Java 9 and this particular benchmark improved by ~7–8x.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;sumECBoxedEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList.sumOfInt(Integer::intValue);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;sumECBoxedLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asLazy()&lt;br /&gt;            .sumOfInt(Integer::intValue);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;sumECParallelEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return ParallelIterate.&lt;em&gt;sumByInt&lt;/em&gt;(&lt;br /&gt;            this.ecList,&lt;br /&gt;            i -&amp;gt; Integer.&lt;em&gt;valueOf&lt;/em&gt;(0),&lt;br /&gt;            Integer::intValue).get(0);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;sumECParallelLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asParallel(this.executorService, 50_000)&lt;br /&gt;            .sumOfInt(Integer::intValue);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;sumECPrimitiveEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecPrimitiveList.sum();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;sumECPrimitiveLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecPrimitiveList&lt;br /&gt;            .asLazy()&lt;br /&gt;            .sum();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;sumJDKBoxedParallelStream&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.jdkList&lt;br /&gt;            .parallelStream()&lt;br /&gt;            .mapToLong(Integer::longValue)&lt;br /&gt;            .sum();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;sumJDKBoxedStream&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.jdkList&lt;br /&gt;            .stream()&lt;br /&gt;            .mapToLong(Integer::longValue)&lt;br /&gt;            .sum();&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Filter, Map, Sum&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/752/1*X9IwHMNWscNvELlnvoU1qg.png&quot; /&gt;Filter even integers, multiply remaining x 2 and return their sum&lt;/figure&gt;&lt;p&gt;&lt;em&gt;Expected:&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I expected lazy operations to outperform eager.&lt;/li&gt;&lt;li&gt;I expected primitive lazy would outperform all of the other serial operations.&lt;/li&gt;&lt;li&gt;I expected JDKBoxedParallelStream would perform well with this use case.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Unexpected:&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I did not expect ECParallelEager to do as well as or better than ECParallelLazy, even though it was optimized.&lt;/li&gt;&lt;li&gt;I did not expect JDKBoxedParallelStream to do better than ECParallelLazy.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumECBoxedEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .sumOfInt(i -&amp;gt; i * 2);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumECBoxedLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asLazy()&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .sumOfInt(i -&amp;gt; i * 2);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumECOptimizedParallelEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return ParallelIterate.&lt;em&gt;sumByInt&lt;/em&gt;(&lt;br /&gt;            this.ecList,&lt;br /&gt;            i -&amp;gt; i % 2,&lt;br /&gt;            i -&amp;gt; i * 2).get(0);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumECOptimizedParallelLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asParallel(this.executorService, 50_000)&lt;br /&gt;            .sumOfInt(i -&amp;gt; i % 2 == 0 ? i * 2 : 0);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumECParallelLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asParallel(this.executorService, 50_000)&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .sumOfInt(i -&amp;gt; i * 2);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumECPrimitiveEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecPrimitiveList&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .collectInt(i -&amp;gt; i * 2, IntLists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty())&lt;br /&gt;            .sum();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumECPrimitiveLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecPrimitiveList&lt;br /&gt;            .asLazy()&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .collectInt(i -&amp;gt; i * 2)&lt;br /&gt;            .sum();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumJDKBoxedParallelStream&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.jdkList&lt;br /&gt;            .parallelStream()&lt;br /&gt;            .filter(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .mapToLong(i -&amp;gt; (long) (i * 2))&lt;br /&gt;            .sum();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumJDKBoxedStream&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.jdkList&lt;br /&gt;            .stream()&lt;br /&gt;            .filter(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .mapToLong(i -&amp;gt; (long) (i * 2))&lt;br /&gt;            .sum();&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Congratulations!&lt;/h4&gt;&lt;p&gt;I hope you enjoyed the blog and learned some new things about Iteration Pattern Options and Optimization Strategies using Eclipse Collections and Java Streams. If your only tool is a hammer, everything else is a nail. Knowing your available options before you get started on your journey and adapting as needs arise is one of the keys to writing better and more responsive applications. This can also help you execute a less stressful trip from Orlando to Williamsburg, if ever that occasion happens to arise.&lt;/p&gt;&lt;h4&gt;Recommendations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Prefer Primitives over Boxing.&lt;/li&gt;&lt;li&gt;Prefer Eager iteration for single or fused operations.&lt;/li&gt;&lt;li&gt;Prefer Lazy iteration for multi-step operations.&lt;/li&gt;&lt;li&gt;Prove it before going Parallel.&lt;/li&gt;&lt;li&gt;Try &lt;a href=&quot;http://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt; if you want more than &lt;a href=&quot;https://en.wikipedia.org/wiki/Hobson%27s_choice&quot;&gt;Hobson’s Choice&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=66365ac415ef&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 03 Jan 2018 05:16:00 +0000</pubDate>
</item>
<item>
	<title>Lorenzo Bettini: Analyzing Eclipse plug-in projects with Sonarqube</title>
	<guid isPermaLink="false">http://www.lorenzobettini.it/?p=1013</guid>
	<link>http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/</link>
	<description>&lt;p&gt;In this tutorial I’m going to show how to analyze multiple Eclipse plug-in projects with Sonarqube. In particular, I’m going to focus on peculiarities that have to be taken care of due to the standard way Sonarqube analyzes sources and to the structure of typical Eclipse plug-in projects (concerning tests and code coverage).&lt;/p&gt;
&lt;p&gt;The code of this example is available on Github: &lt;a href=&quot;https://github.com/LorenzoBettini/tycho-sonarqube-example&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://github.com/LorenzoBettini/tycho-sonarqube-example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This can be seen as a follow-up of &lt;a href=&quot;http://www.lorenzobettini.it/2017/02/jacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects/&quot;&gt;my previous post on “Jacoco code coverage and report of multiple Eclipse plug-in projects&lt;/a&gt;. I’ll basically reuse almost the same structure of that example and a few things. The part of Jacoco report is not related to Sonarqube but I’ll leave it there.&lt;/p&gt;
&lt;p&gt;The structure of the projects is as follows:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/tycho-sonarqube-project-structure/&quot; rel=&quot;attachment wp-att-1017&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1017&quot; height=&quot;415&quot; src=&quot;https://i2.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/01/tycho-sonarqube-project-structure.png?resize=435%2C415&quot; width=&quot;435&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Each project’s code is tested in a specific .tests project. The code consists of simple Java classes doing nothing interesting, and tests just call that code.&lt;/p&gt;
&lt;p&gt;The project &lt;strong&gt;example.tests.parent&lt;/strong&gt; contains all the common configurations for test projects (and test report, please refer to &lt;a href=&quot;http://www.lorenzobettini.it/2017/02/jacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects/&quot;&gt;my previous post on “Jacoco code coverage and report of multiple Eclipse plug-in projects&lt;/a&gt; for the details of this report project, which is not strictly required for Sonarqube).&lt;/p&gt;
&lt;p&gt;This is its pom&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
  &amp;lt;parent&amp;gt;
    &amp;lt;groupId&amp;gt;example&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;example.parent&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
  &amp;lt;/parent&amp;gt;

  &amp;lt;artifactId&amp;gt;example.tests.parent&amp;lt;/artifactId&amp;gt;
  &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt;

  &amp;lt;properties&amp;gt;
    &amp;lt;!-- this will be overridden in jacoco profile with tycho.testArgLine, 
      which, in turn, will be set by Jacoco prepare-agent goal. This property can 
      then be used in argLine for custom tycho-surefire configuration, both when 
      Jacoco is used and when it is not used. --&amp;gt;
    &amp;lt;additionalTestArgLine&amp;gt;&amp;lt;/additionalTestArgLine&amp;gt;
    &amp;lt;jacoco-version&amp;gt;0.7.9&amp;lt;/jacoco-version&amp;gt;
  &amp;lt;/properties&amp;gt;

  &amp;lt;profiles&amp;gt;
    &amp;lt;profile&amp;gt;
      &amp;lt;id&amp;gt;jacoco&amp;lt;/id&amp;gt;
      &amp;lt;activation&amp;gt;
        &amp;lt;activeByDefault&amp;gt;false&amp;lt;/activeByDefault&amp;gt;
      &amp;lt;/activation&amp;gt;
      &amp;lt;properties&amp;gt;
        &amp;lt;!-- This will be set by Jacoco prepare-agent goal --&amp;gt;
        &amp;lt;additionalTestArgLine&amp;gt;${tycho.testArgLine}&amp;lt;/additionalTestArgLine&amp;gt;
      &amp;lt;/properties&amp;gt;
      &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
          &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.jacoco&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jacoco-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${jacoco-version}&amp;lt;/version&amp;gt;
            &amp;lt;configuration&amp;gt;
              &amp;lt;excludes&amp;gt;
                &amp;lt;exclude&amp;gt;**/plugin1/Main.class&amp;lt;/exclude&amp;gt;
              &amp;lt;/excludes&amp;gt;
            &amp;lt;/configuration&amp;gt;
            &amp;lt;executions&amp;gt;
              &amp;lt;execution&amp;gt;
                &amp;lt;goals&amp;gt;
                  &amp;lt;goal&amp;gt;prepare-agent&amp;lt;/goal&amp;gt;
                &amp;lt;/goals&amp;gt;
              &amp;lt;/execution&amp;gt;
            &amp;lt;/executions&amp;gt;
          &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
      &amp;lt;/build&amp;gt;
    &amp;lt;/profile&amp;gt;
  &amp;lt;/profiles&amp;gt;

&amp;lt;/project&amp;gt;&lt;/pre&gt;&lt;p&gt;Note that this also shows a possible way of dealing with custom argLine for tycho-surefire configuration: &lt;strong&gt;tycho.testArgLine&lt;/strong&gt; will be automatically set the &lt;strong&gt;jacoco:prepare-agent&lt;/strong&gt; goal, with the path of jacoco agent (needed for code coverage); the property tycho.testArgLine is &lt;strong&gt;automatically used by tycho-surefire&lt;/strong&gt;. But if you have a custom configuration of tycho-surefire with additional arguments you want to pass in argLine, you must be careful not to overwrite the value set by jacoco. If you simply refer to tycho.testArgLine in the custom tycho-surefire configuration’s argLine, it will work when the jacoco profile is active but it will fail when it is not active since that property will not exist. Don’t try to define it as an empty property by default, since when tycho-surefire runs it will use that empty value, ignoring the one set by jacoco:prepare-agent (argLine’s properties are resolved before jacoco:prepare-agent is executed). Instead, &lt;strong&gt;use another level of indirection&lt;/strong&gt;: refer to a new property, e.g., &lt;strong&gt;additionalTestArgLine&lt;/strong&gt;, which by default is empty. In the jacoco profile, set additionalTestArgLine referring to tycho.testArgLine (in that profile, that property is surely set by jacoco:prepare-agent). Then, in the custom argLine, refer to additionalTestArgLine. An example is shown in the project &lt;strong&gt;example.plugin2.tests&lt;/strong&gt; pom:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
  &amp;lt;parent&amp;gt;
    &amp;lt;groupId&amp;gt;example&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;example.tests.parent&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;relativePath&amp;gt;../example.tests.parent&amp;lt;/relativePath&amp;gt;
  &amp;lt;/parent&amp;gt;

  &amp;lt;artifactId&amp;gt;example.plugin2.tests&amp;lt;/artifactId&amp;gt;
  &amp;lt;packaging&amp;gt;eclipse-test-plugin&amp;lt;/packaging&amp;gt;

  &amp;lt;build&amp;gt;
    &amp;lt;plugins&amp;gt;
      &amp;lt;plugin&amp;gt;
        &amp;lt;groupId&amp;gt;org.eclipse.tycho&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;tycho-surefire-plugin&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${tycho-version}&amp;lt;/version&amp;gt;
        &amp;lt;configuration&amp;gt;
          &amp;lt;!-- additionalTestArgLine is set in the parent project with the 
            Jacoco agent when the jacoco profile is active (and it will be empty when 
            jacoco profile is not active). This way, you can customize argLine without 
            overwriting the jacoco agent set by jacoco:prepare-agent. --&amp;gt;
          &amp;lt;argLine&amp;gt;${additionalTestArgLine} -DbuildingWithTycho=true&amp;lt;/argLine&amp;gt;
        &amp;lt;/configuration&amp;gt;
      &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
  &amp;lt;/build&amp;gt;
&amp;lt;/project&amp;gt;&lt;/pre&gt;&lt;p&gt;You can check that code coverage works as expected by running (it’s important to verify that jacoco has been configured correctly in your projects before running Sonarqube analysis: if it’s not working in Sonarqube then it’s something wrong in the configuration for Sonarqube, not in the jacoco configuration, as we’ll see in a minute):&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;mvn clean verify -Pjacoco&lt;/pre&gt;&lt;p&gt;Mare sure that &lt;strong&gt;example.tests.report/target/site/jacoco-aggregate/index.html&lt;/strong&gt; reports some code coverage (in this example, example.plugin1 has some code uncovered by intention).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now I assume you already have Sonarqube installed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let’s run a first Sonarqube analysis with&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;mvn clean verify -Pjacoco sonar:sonar&lt;/pre&gt;&lt;p&gt;This is the result:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/tycho-sonarqube-analysis1/&quot; rel=&quot;attachment wp-att-1021&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1021&quot; height=&quot;289&quot; src=&quot;https://i1.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/01/tycho-sonarqube-analysis1.png?resize=625%2C289&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So &lt;strong&gt;Unit Tests are correctly collected&lt;/strong&gt;! What about Code Coverage? Something is shown, but if you click on that you see some bad surprises:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/tycho-sonarqube-analysis2/&quot; rel=&quot;attachment wp-att-1023&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1023&quot; height=&quot;239&quot; src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/01/tycho-sonarqube-analysis2.png?resize=625%2C239&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code coverage only on tests (which is irrelevant) and no coverage for our SUT (Software Under Test) classes!&lt;/p&gt;
&lt;p&gt;That’s because jacoco .exec files are by default generated in the target folder of the tests project, now when Sonarqube analyzes the projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it finds the jacoco.exec file when it analyzes a tests project but can only see the sources of the tests project (not the ones of the SUT)&lt;/li&gt;
&lt;li&gt;when it analyzes a SUT project it cannot find any jacoco.exec file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We could fix this by configuring the maven jacoco plugin to generate jacoco.exec in the SUT project, but then the aggregate report configuration should be updated accordingly (while it works out of the box with the defaults). Another way of fixing the problem is to use the Sonarqube maven property &lt;strong&gt;sonar.jacoco.reportPaths&lt;/strong&gt; and “trick” Sonarqube like that (we do that in the parent pom properties section):&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;lt;!-- Always refer to the corresponding tests project (if it exists) otherwise 
      Sonarqube won't be able to collect code coverage. For example, when analyzing 
      project foo it wouldn't find code coverage information if it doesn't use 
      foo.tests jacoco.exec. --&amp;gt;
    &amp;lt;sonar.jacoco.reportPaths&amp;gt;
      ../${project.artifactId}.tests/target/jacoco.exec
    &amp;lt;/sonar.jacoco.reportPaths&amp;gt;&lt;/pre&gt;&lt;p&gt;This way, when it analyzes example.plugin1 it will use the jacoco.exec found in example.plugin1.tests project (if you follow the convention foo and foo.tests this works out of the box, otherwise, you have to list all the jacoco.exec paths in all the projects in that property, separated by comma).&lt;/p&gt;
&lt;p&gt;Let’s run the analysis again:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/tycho-sonarqube-analysis3/&quot; rel=&quot;attachment wp-att-1025&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1025&quot; height=&quot;246&quot; src=&quot;https://i1.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/01/tycho-sonarqube-analysis3.png?resize=625%2C246&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OK, now code coverage is collected on the SUT classes as we wanted. Of course, now test classes appear as uncovered (remember, when it analyzes example.plugin1.tests it now searchs for jacoco.exec in example.plugin1.tests.tests, which does not even exist).&lt;/p&gt;
&lt;p&gt;This leads us to another problem: test classes should be excluded from Sonarqube analysis. This works out of the box in standard Maven projects because source folders of SUT and source folders of test classes are separate and in the same project (that’s also why code coverage for pure Maven projects works out of the box in Sonarqube); this is not the case for Eclipse projects, where SUT and tests are in separate projects.&lt;/p&gt;
&lt;p&gt;In fact, issues are reported also on test classes:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/tycho-sonarqube-analysis4/&quot; rel=&quot;attachment wp-att-1026&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1026&quot; height=&quot;284&quot; src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/01/tycho-sonarqube-analysis4.png?resize=625%2C284&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We can fix both problems by putting in the &lt;strong&gt;tests.parent pom properties&lt;/strong&gt; these two Sonarqube properties (note the link to the Eclipse bug about this behavior)&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;lt;!-- Workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=397015 --&amp;gt;
    &amp;lt;sonar.sources&amp;gt;&amp;lt;/sonar.sources&amp;gt;
    &amp;lt;sonar.tests&amp;gt;src&amp;lt;/sonar.tests&amp;gt;&lt;/pre&gt;&lt;p&gt;This will be inherited by our tests projects and for those projects, Sonarqube will not analyze test classes.&lt;/p&gt;
&lt;p&gt;Run the analysis again and see the results: code coverage only on SUT and issues only on SUT (remember that in this example MyClass1 is not uncovered completely by intention):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/tycho-sonarqube-analysis5/&quot; rel=&quot;attachment wp-att-1027&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1027&quot; height=&quot;188&quot; src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/01/tycho-sonarqube-analysis5.png?resize=625%2C188&quot; width=&quot;625&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/tycho-sonarqube-analysis6/&quot; rel=&quot;attachment wp-att-1028&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1028&quot; height=&quot;222&quot; src=&quot;https://i1.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/01/tycho-sonarqube-analysis6.png?resize=625%2C222&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You might be tempted to use the property sonar.skip set to true for test projects, but you will use JUnit test reports collection.&lt;/p&gt;
&lt;p&gt;The final bit of customization is to exclude the Main.java class from code coverage. We have already configured the jacoco maven plugin to do so, but this won’t be picked up by Sonarqube (that configuration only tells jacoco to skip that class when it generates the HTML report).&lt;/p&gt;
&lt;p&gt;We have to repeat that exclusion with a Sonarqube maven property, in the parent pom:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;lt;!-- Example of skipping code coverage (comma separated Java files). --&amp;gt;
    &amp;lt;sonar.coverage.exclusions&amp;gt;
      **/plugin1/Main.java
    &amp;lt;/sonar.coverage.exclusions&amp;gt;&lt;/pre&gt;&lt;p&gt;Note that in the jacoco maven configuration we had excluded a .class file, while here we exclude Java files.&lt;/p&gt;
&lt;p&gt;Run the analysis again and Main is not considered in code coverage:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/tycho-sonarqube-analysis7/&quot; rel=&quot;attachment wp-att-1030&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1030&quot; height=&quot;166&quot; src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/01/tycho-sonarqube-analysis7.png?resize=625%2C166&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you can have fun in fixing Sonarqube issues, which is out of the scope of this tutorial &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.3/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This example is also analyzed from Travis using Sonarcloud (&lt;a href=&quot;https://sonarcloud.io/dashboard?id=example%3Aexample.parent&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://sonarcloud.io/dashboard?id=example%3Aexample.parent&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Hope you enjoyed this tutorial and Happy new year! &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.3/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;div class=&quot;sociable&quot;&gt;&lt;div class=&quot;sociable_tagline&quot;&gt;Be Sociable, Share!&lt;/div&gt;&lt;ul class=&quot;clearfix&quot;&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://twitter.com/intent/tweet?text=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube%20-%20http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F%20&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Twitter&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.facebook.com/share.php?u=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;t=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;https://mail.google.com/mail/?view=cm&amp;amp;fs=1&amp;amp;to&amp;amp;su=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;body=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;ui=2&amp;amp;tf=1&amp;amp;shva=1&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;email&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; rel=&quot;nofollow&quot; title=&quot;Add to favorites - doesn't work in Chrome&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.stumbleupon.com/submit?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;StumbleUpon&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://delicious.com/post?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;notes=In%20this%20tutorial%20I%27m%20going%20to%20show%20how%20to%20analyze%20multiple%20Eclipse%20plug-in%20projects%20with%20Sonarqube.%20In%20particular%2C%20I%27m%20going%20to%20focus%20on%20peculiarities%20that%20have%20to%20be%20taken%20care%20of%20due%20to%20the%20standard%20way%20Sonarqube%20analyzes%20sources%20and%20to%20the%20structu&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Delicious&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.google.com/reader/link?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;srcURL=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;srcTitle=Lorenzo+Bettini+My+Home+Page&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Google Reader&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.linkedin.com/shareArticle?mini=true&amp;amp;url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;source=Lorenzo+Bettini+My+Home+Page&amp;amp;summary=In%20this%20tutorial%20I%27m%20going%20to%20show%20how%20to%20analyze%20multiple%20Eclipse%20plug-in%20projects%20with%20Sonarqube.%20In%20particular%2C%20I%27m%20going%20to%20focus%20on%20peculiarities%20that%20have%20to%20be%20taken%20care%20of%20due%20to%20the%20standard%20way%20Sonarqube%20analyzes%20sources%20and%20to%20the%20structu&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;LinkedIn&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.blinklist.com/index.php?Action=Blink/addblink.php&amp;amp;Url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;Title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&quot; rel=&quot;nofollow&quot; style=&quot;background-position: 0px 0px;&quot; target=&quot;_blank&quot; title=&quot;BlinkList&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a rel=&quot;nofollow&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;img src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/plugins/sociable/images/more.png?w=625&quot; /&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div id=&quot;sociable-post-1013&quot; style=&quot;display: none;&quot;&gt;   

    &lt;div id=&quot;sociable&quot; style=&quot;display: block;&quot;&gt;



		&lt;div class=&quot;popup&quot;&gt;

			&lt;div class=&quot;content&quot;&gt;

				&lt;ul&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.myspace.com/Modules/PostTo/Pages/?u=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;t=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Myspace&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://digg.com/submit?phase=2&amp;amp;url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;bodytext=In%20this%20tutorial%20I%27m%20going%20to%20show%20how%20to%20analyze%20multiple%20Eclipse%20plug-in%20projects%20with%20Sonarqube.%20In%20particular%2C%20I%27m%20going%20to%20focus%20on%20peculiarities%20that%20have%20to%20be%20taken%20care%20of%20due%20to%20the%20standard%20way%20Sonarqube%20analyzes%20sources%20and%20to%20the%20structu&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Digg&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://reddit.com/submit?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Reddit&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.google.com/bookmarks/mark?op=edit&amp;amp;bkmk=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;annotation=In%20this%20tutorial%20I%27m%20going%20to%20show%20how%20to%20analyze%20multiple%20Eclipse%20plug-in%20projects%20with%20Sonarqube.%20In%20particular%2C%20I%27m%20going%20to%20focus%20on%20peculiarities%20that%20have%20to%20be%20taken%20care%20of%20due%20to%20the%20standard%20way%20Sonarqube%20analyzes%20sources%20and%20to%20the%20structu&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Google Bookmarks&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://news.ycombinator.com/submitlink?u=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;t=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;HackerNews&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://reporter.es.msn.com/?fn=contribute&amp;amp;Title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;URL=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;cat_id=6&amp;amp;tag_id=31&amp;amp;Remark=In%20this%20tutorial%20I%27m%20going%20to%20show%20how%20to%20analyze%20multiple%20Eclipse%20plug-in%20projects%20with%20Sonarqube.%20In%20particular%2C%20I%27m%20going%20to%20focus%20on%20peculiarities%20that%20have%20to%20be%20taken%20care%20of%20due%20to%20the%20standard%20way%20Sonarqube%20analyzes%20sources%20and%20to%20the%20structu&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;MSNReporter&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://sphinn.com/index.php?c=post&amp;amp;m=submit&amp;amp;link=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Sphinn&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://posterous.com/share?linkto=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;selection=In%20this%20tutorial%20I%27m%20going%20to%20show%20how%20to%20analyze%20multiple%20Eclipse%20plug-in%20projects%20with%20Sonarqube.%20In%20particular%2C%20I%27m%20going%20to%20focus%20on%20peculiarities%20that%20have%20to%20be%20taken%20care%20of%20due%20to%20the%20standard%20way%20Sonarqube%20analyzes%20sources%20and%20to%20the%20structu&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Posterous&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.tumblr.com/share?v=3&amp;amp;u=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;t=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;s=In%20this%20tutorial%20I%27m%20going%20to%20show%20how%20to%20analyze%20multiple%20Eclipse%20plug-in%20projects%20with%20Sonarqube.%20In%20particular%2C%20I%27m%20going%20to%20focus%20on%20peculiarities%20that%20have%20to%20be%20taken%20care%20of%20due%20to%20the%20standard%20way%20Sonarqube%20analyzes%20sources%20and%20to%20the%20structu&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Tumblr&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;			

			&lt;/div&gt;        

		  &lt;a class=&quot;close&quot; style=&quot;cursor: pointer;&quot;&gt;

		  &lt;img src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/plugins/sociable/images/closelabel.png?w=625&quot; title=&quot;close&quot; /&gt;

		  &lt;/a&gt;

		&lt;/div&gt;

	&lt;/div&gt; 

  &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;sociable&quot; style=&quot;float: none;&quot;&gt;&lt;ul class=&quot;clearfix&quot;&gt;&lt;li id=&quot;Twitter_Counter&quot;&gt;&lt;a class=&quot;twitter-share-button&quot; href=&quot;https://twitter.com/share&quot;&gt;Tweet&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;Facebook_Counter&quot;&gt;&lt;/li&gt;&lt;li id=&quot;Google_p&quot;&gt;&lt;/li&gt;&lt;li id=&quot;LinkedIn_Counter&quot;&gt;&lt;/li&gt;&lt;li id=&quot;StumbleUpon_Counter&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 02 Jan 2018 10:16:33 +0000</pubDate>
</item>
<item>
	<title>Nikhil Nanivadekar: In Review — 2017</title>
	<guid isPermaLink="false">https://medium.com/p/de974766b753</guid>
	<link>https://medium.com/@nikhilnanivadekar/in-review-2017-de974766b753?source=rss-4285d8a2ca86------2</link>
	<description>&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*4DwxX57Nb3FaR3GOn3Q9Hg.jpeg&quot; /&gt;Sunset on Miyajima (Dusk of 2017)&lt;/figure&gt;&lt;p&gt;As the sun is about to set for 2017, I but can’t help reflect what an amazing year 2017 has been! For me personally 2017 was a year of many “firsts”. I have summarized few of the many awesome experiences I had in 2017.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Experiencing the Land of the Rising Sun:&lt;/strong&gt; In February I visited Japan and was awestruck by the beauty, heritage, friendliness, hospitality, cleanliness and most importantly the delicious food. I do not speak Japanese, and at first I was a bit apprehensive of how the visit will turn out. Few of my Japanese friends taught me some important phrases and I ventured ahead. I am happy to say, it was an experience of the lifetime. The people in Japan were very friendly and accommodating. I tried to converse with them in a mixture of English, Hindi, Marathi, sign-language and most importantly tried hard to learn new bits and pieces of Japanese. One of the humbling experiences was in Hiroshima when I was trying to get to Miyajima. I got on the wrong bus and ended up at a completely different train station. Patiently the bus driver explained the route to me with just numbers and sign-language and I reached the ferry to Miyajima without any further issues. This was my first visit to Japan but definitely &lt;em&gt;not &lt;/em&gt;the last one!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Devoxx US:&lt;/strong&gt; In March I was one of the speakers at &lt;a href=&quot;https://devoxx.us/&quot;&gt;Devoxx US&lt;/a&gt;. The conference was filled with rich content, amazing speakers and gave numerous opportunities to network, share ideas and concepts. I co-presented &lt;a href=&quot;https://youtu.be/hWwbPguayNA&quot;&gt;Collections.compare&lt;/a&gt; and &lt;a href=&quot;https://youtu.be/nlRhL892hXw&quot;&gt;Robots for the Kid in Us&lt;/a&gt; talks. I was also one of the conductors for Devoxx4Kids workshop which took place before Devoxx. This was my first Devoxx experience and I enjoyed it a lot. I hope to have the opportunity to present at many more Devoxx-es in the future.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Eclipse Collections Project Lead:&lt;/strong&gt; In April, I was handed over the reins of &lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt; and made the &lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections/who&quot;&gt;active project lead&lt;/a&gt;. I have been a contributor to the framework for more than 2 years and it was an amazing feeling to be recognized as a project lead. I worked hard to continue the legacy of successful project leads like Hiroshi, Craig and Don. This year we designed the official Eclipse Collections project &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/artwork/eclipse-collections-logo.png&quot;&gt;logo&lt;/a&gt;, released &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/releases/tag/9.0.0&quot;&gt;9.0.0&lt;/a&gt; major version which works fine with JDK 9, presented Eclipse Collections via numerous &lt;a href=&quot;https://twitter.com/TheDonRaab/status/946876656479801344&quot;&gt;avenues&lt;/a&gt;. I have highlighted my experience leading Eclipse Collections in this &lt;a href=&quot;https://medium.com/@nikhilnanivadekar/leading-eclipse-collections-my-6-month-story-3dcb71bf76d6&quot;&gt;blog&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;GIDS 2017&lt;/strong&gt;: In April, I traveled to India, my homeland and presented at the &lt;a href=&quot;http://www.developermarch.com/developersummit/&quot;&gt;Great Indian Developer Summit&lt;/a&gt; (GIDS 2017). This was my first time at GIDS and I will highly recommend developers to participate in GIDS as a speaker or as an attendee. The conference organizers do a phenomenal job putting the event together. They take good care of not just the attendees but also the speakers. The 4-day event was sold out with standing room only for pretty much all presentations. Looking forward to continued participation at GIDS.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;JavaOne:&lt;/strong&gt; In September, I was happy to be a part of the &lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=nanivadekar&amp;amp;showEnrolled=false&quot;&gt;speaker lineup&lt;/a&gt; for JavaOne and JavaOne4Kids. This was my third JavaOne (second as a speaker) and like every year it was an amazing week. I was delighted to reconnect with many friends, Java Gurus, developer advocates, awesome people from the community. I learnt a lot of new things with the main theme being JDK 9, advancing Eclipse Collections and open source participation. I also planned my UK, Ireland JUG tour during the tail end of JavaOne. JavaOne was definitely one the highlights of my year.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;UK, Ireland JUG tour:&lt;/strong&gt; As the year drew to an end, I visited UK, Ireland in November. I presented at various Java User Groups during my visit. In summer, I had visited Manchester and met one of my good friends Nick. Nick is also one of the organizers of Manchester Java Community (MJC) and floated the idea of me returning to Manchester to present at an MJC event. This was really the beginning of the tour planning. It was an amazing experience to travel to London, Belfast, Dublin, Edinburgh, Manchester, Birmingham and meet with the Java community and have a ton of amazing discussions. I have written my tour experience on this &lt;a href=&quot;https://medium.com/@nikhilnanivadekar/november-java-user-group-tour-2017-dbb103b80532&quot;&gt;blog&lt;/a&gt;. I would definitely want to do a similar tour again.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Wrap it up in India:&lt;/strong&gt; I decided what other better way to end an awesome year than to visit family and take a break for a couple of weeks. 2017 was definitely a year of many firsts, I hope to continue the streak in 2018 and wish that it is much more positively eventful with many firsts and seconds.&lt;/p&gt;&lt;p&gt;I would like to thank each and every one who was a part of my 2017 and hoping to create even more awesome memories in 2018.&lt;/p&gt;&lt;p&gt;Wishing everyone a Happy, Healthy and Safe New Year!&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*OlY4d20oAocaLPfK_J6dqg.jpeg&quot; /&gt;Sunrise on Crete (Dawn of 2018)&lt;/figure&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=de974766b753&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 31 Dec 2017 15:30:47 +0000</pubDate>
</item>
<item>
	<title>Fabian Steeg: Java annotation processing in Eclipse</title>
	<guid isPermaLink="true">http://fsteeg.com/notes/java-annotation-processing-in-eclipse</guid>
	<link>http://fsteeg.com/notes/java-annotation-processing-in-eclipse</link>
	<description>&lt;p&gt;Java annotations provide metadata for Java code. Many developers use annotations provided by standard Java APIs (like &lt;code&gt;@Override&lt;/code&gt;) or by frameworks (like &lt;code&gt;@Test&lt;/code&gt;). Developers can define their own annotations and process them at runtime using reflection. Additionally, Java provides APIs for writing custom annotation processors that can process these annotations at compile time.&lt;/p&gt;&lt;p&gt;Eclipse provides support for hooking these processors into the compilation process. So when you edit code with these annotations, the processor can analyse the source files, do stuff, and report information back to you.&lt;/p&gt;&lt;p&gt;To give you an idea about how that works, I’ll use Contracts for Java as an example, a tool that implements &lt;a href=&quot;https://github.com/nhatminhle/cofoja#usage&quot;&gt;a contract model similar to that of Eiffel&lt;/a&gt; in Java, based on annotations. For our setup, we’ll need Eclipse 4.7 (Oxygen, the 2017 release) or later.&lt;/p&gt;&lt;p&gt;To use Contracts for Java, create a Java project, and add &lt;a href=&quot;https://github.com/nhatminhle/cofoja/releases&quot;&gt;the latest release&lt;/a&gt; to the build path:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;Java project&quot; src=&quot;http://fsteeg.com/images/jdt-apt-1.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;Then add some code that uses contract annotations (copy and paste the code below into the src folder of your project):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import com.google.java.contract.Ensures;
import com.google.java.contract.Requires;
 
public class Contracts {
    public static void main(String[] args) {
        System.out.println(new Numbers().add(-10, 5));
    }
}
 
class Numbers {
    @Requires({ &quot;c &amp;gt; 0&quot;, &quot;b &amp;gt; 0&quot; })
    @Ensures({ &quot;result &amp;gt; a&quot;, &quot;result &amp;gt; b&quot; })
    int add(int a, int b) {
        return a - b;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point, the project should not report any issues. Normal compilation of the Java source file works just fine. Our processor is not enabled for our annotations yet. To configure the annotation processing we go to Project &amp;gt; Properties &amp;gt; Java Compiler &amp;gt; Annotation Processing.&lt;/p&gt;&lt;p&gt;Select &lt;em&gt;Enable project specific settings&lt;/em&gt; and add the following options that we want to pass to the annotation processor: set &lt;code&gt;com.google.java.contract.classpath&lt;/code&gt; to &lt;code&gt;%classpath%&lt;/code&gt; and &lt;code&gt;com.google.java.contract.classoutput&lt;/code&gt; to &lt;code&gt;%PROJECT.DIR%/.apt_generated&lt;/code&gt; (the location of your project’s generated source directory):&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;Project &amp;amp;gt; Properties &amp;amp;gt; Java Compiler &amp;amp;gt; Annotation Processing&quot; src=&quot;http://fsteeg.com/images/jdt-apt-2.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;These properties are used by the processor to compile the annotated files, and to create output files. The &lt;code&gt;%classpath%&lt;/code&gt; placeholder is replaced with your Java project’s build path by Eclipse, so that the annotation processor can access all the libraries used in your project when compiling your code. The &lt;code&gt;%PROJECT.DIR%&lt;/code&gt; placeholder is replaced with the path to your Java project.&lt;/p&gt;&lt;p&gt;Finally we add the processor Jar to Project &amp;gt; Properties &amp;gt; Java Compiler &amp;gt; Annotation Processing &amp;gt; Factory Path:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;Project &amp;amp;gt; Properties &amp;amp;gt; Java Compiler &amp;amp;gt; Annotation Processing &amp;amp;gt; Factory Path&quot; src=&quot;http://fsteeg.com/images/jdt-apt-3.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;After confirming these changes, and running a full build, compilation issues in the annotations are now reported in the editor. Our code contains a precondition mentioning a variable called &lt;code&gt;c&lt;/code&gt;. But the annotated method has no &lt;code&gt;c&lt;/code&gt; parameter. This is reported as an error in the editor:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;Java editor&quot; src=&quot;http://fsteeg.com/images/jdt-apt-4.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;After we fix the first precondition to &lt;code&gt;a &amp;gt; 0&lt;/code&gt;, the code compiles, and we can run it (Run &amp;gt; Run as &amp;gt; Java application).&lt;/p&gt;&lt;p&gt;To see the files generated by the processor in the &lt;code&gt;.apt_generated&lt;/code&gt; directory in Eclipse, you should disable filtering of &lt;code&gt;.*resources&lt;/code&gt; in the Package Explorer’s view menu (the little triangle &amp;gt; Filters…):&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;View menu&quot; src=&quot;http://fsteeg.com/images/jdt-apt-5.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;Also make sure you have set up your workspace to refresh automatically in Preferences &amp;gt; General &amp;gt; Workspace &amp;gt; &lt;em&gt;Refresh using native hooks or polling&lt;/em&gt;:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;Preferences &amp;amp;gt; General &amp;amp;gt; Workspace&quot; src=&quot;http://fsteeg.com/images/jdt-apt-6.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;Besides the annotation processing at compile time, Contracts for Java also uses bytecode instrumentation for its runtime checks. To have the contracts checked at runtime, add &lt;code&gt;-javaagent:cofoja.contracts.asm-1.3-20160207.jar&lt;/code&gt; to the VM arguments of your run configuration (go to Run &amp;gt; Run Configurations, activate the &lt;em&gt;Arguments&lt;/em&gt; tab):&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;Run configuration&quot; src=&quot;http://fsteeg.com/images/jdt-apt-7.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;Now, when running, we are made aware of the violated precondition in our code, since we are passing &lt;code&gt;-10&lt;/code&gt; as &lt;code&gt;a&lt;/code&gt;, which is not larger than &lt;code&gt;0&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;Precondition error&quot; src=&quot;http://fsteeg.com/images/jdt-apt-8.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;After we fix the call violating the precondition to &lt;code&gt;new Numbers().add(10, 5);&lt;/code&gt; we now see that our implementation of &lt;code&gt;add&lt;/code&gt; does not fulfill the postcondition, since the result is not larger than &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;Postcondition error&quot; src=&quot;http://fsteeg.com/images/jdt-apt-9.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;After fixing our implementation to return &lt;code&gt;a + b&lt;/code&gt;, not &lt;code&gt;a - b&lt;/code&gt;, all contracts are fulfilled and the code now runs without errors.&lt;/p&gt;&lt;p&gt;Contracts for Java uses annotations in an interesting way and shows what can be achieved with annotation processing as a tool, and how Java annotation processors can integrate with Eclipse.&lt;/p&gt;&lt;p&gt;If you’re interested in creating your own processors, check out my &lt;a href=&quot;https://github.com/fsteeg/eclipse-341298&quot;&gt;test projects&lt;/a&gt; for &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=341298&quot;&gt;bug 341298&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; to get a basic setup where an annotation processor compiles the annotated Java source file.&lt;/p&gt;&lt;p&gt;For more information on these tools check out the &lt;a href=&quot;https://github.com/nhatminhle/cofoja&quot;&gt;Contracts for Java&lt;/a&gt; and &lt;a href=&quot;http://www.eclipse.org/jdt/apt/index.php&quot;&gt;JDT-APT&lt;/a&gt; project sites.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; That bug came up &lt;a href=&quot;https://fsteeg.wordpress.com/2011/02/07/setting-up-contracts-for-java-in-eclipse/&quot;&gt;in the comments&lt;/a&gt; of a &lt;a href=&quot;http://fsteeg.com/notes/setting-up-contracts-for-java-in-eclipse&quot;&gt;previous post&lt;/a&gt; about using Contracts for Java in Eclipse. &lt;/p&gt;</description>
	<pubDate>Sat, 30 Dec 2017 05:00:01 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: Remote Services without OSGi bundles</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-6467694675345091712</guid>
	<link>http://eclipseecf.blogspot.com/2017/12/remote-services-without-osgi-bundles.html</link>
	<description>Remote Services provides a dynamic, transport-independent, simple, modular way to expose micro services.   ECF has created a &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_Communication_Framework_Project&quot; target=&quot;_blank&quot;&gt;spec-compliant implementation&lt;/a&gt; along with a large and growing number of open and extensible &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot; target=&quot;_blank&quot;&gt;distribution providers&lt;/a&gt;.   &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Remote services are frequently useful for fog/edge use cases, where the communication transports (e.g. MQTT) may be different than those typically used in the cloud (e.g. http/https, jaxrs, enterprise messaging, etc).   &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Typically, remote services are run on OSGi-based frameworks and apps such as Equinox, Felix, Karaf, Eclipse, and others, and indeed ECF's RSA implementation works very well in any of these environments.   &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Perhaps less well known, however, is that remote services can be used in other inter-process environments...for example &lt;a href=&quot;https://dzone.com/articles/remote-services-between-python-and-java&quot; target=&quot;_blank&quot;&gt;between Java and Python&lt;/a&gt;.  &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It's also possible to use &lt;a href=&quot;https://wiki.eclipse.org/ECF&quot; target=&quot;_blank&quot;&gt;ECF remote services&lt;/a&gt; without an OSGi framework, i.e. running only as Java applications.   &lt;a href=&quot;https://github.com/ECF/ServiceRegistry&quot; target=&quot;_blank&quot;&gt;This repository&lt;/a&gt; has an example of using ECF remote services without an OSGi framework.   The projects are Java applications (no OSGi framework assumed), on both the &lt;a href=&quot;https://github.com/ECF/ServiceRegistry/tree/master/projects/examples/com.mycorp.examples.timeservice.sr.host&quot; target=&quot;_blank&quot;&gt;remote service provider side&lt;/a&gt;, as well as the &lt;a href=&quot;https://github.com/ECF/ServiceRegistry/tree/master/projects/examples/com.mycorp.examples.timeservice.sr.consumer.ds&quot; target=&quot;_blank&quot;&gt;remote service consumer side&lt;/a&gt;.   The examples may be run within Eclipse by using the launch configs in the example projects.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Most of the benefits of OSGi Remote Services are still available...for example the ability to use multiple distribution providers for a service, the ability to remotely discover services and dynamically respond to network failure, and the ability to use the OSGi service registry for service dynamics, and service injection.   Also, the service definition, implementation, registration and lookup are exactly the same whether via an OSGi bundle or a Java application.   This allows services to be defined consistently across runtime environments in addition to cross-distribution mechanisms.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Please &lt;a href=&quot;https://github.com/ECF/ServiceRegistry&quot; target=&quot;_blank&quot;&gt;clone the ServiceRegistry github repository&lt;/a&gt; and give things a try!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 28 Dec 2017 01:25:45 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>

</channel>
</rss>
