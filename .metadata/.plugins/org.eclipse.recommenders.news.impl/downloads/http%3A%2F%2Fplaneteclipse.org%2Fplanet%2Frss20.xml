<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Scott Lewis: ECF Photon supports OSGi Async Intent</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-5680104965640748238</guid>
	<link>http://eclipseecf.blogspot.com/2018/05/ecf-photon-supports-osgi-async-intent.html</link>
	<description>In a &lt;a href=&quot;http://eclipseecf.blogspot.com/2018/04/ecf-photon-supports-osgi-r7.html&quot;&gt;previous post&lt;/a&gt;, I indicated that ECF Photon will support OSGi R7.   What does this mean for  remote service developers?&lt;br /&gt;&lt;br /&gt;Support &lt;b&gt;osgi.async&lt;/b&gt; Remote Service Intent&lt;br /&gt;&lt;br /&gt;The &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html&quot;&gt;OSGi R7 Remote Services specification&lt;/a&gt; has been enhanced with new remote service &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html#i1693415&quot;&gt;intents&lt;/a&gt;.  Remote Service Intents allow remote service authors to specify requirements on the underlying distribution system.   The &lt;b&gt;osgi.async&lt;/b&gt; intent allows the service interface to use return types like Java8's &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html&quot;&gt;CompletableFuture&lt;/a&gt; or OSGi's &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/util.promise.html&quot;&gt;Promise&lt;/a&gt;.   When a distribution provider supports this intent, the remote service proxy will automatically implement the asynchronous/non-blocking behavior for the service consumer.&lt;br /&gt;&lt;br /&gt;For example, consider a service interface:&lt;br /&gt;&lt;pre class=&quot;brush:java&quot;&gt;public interface Hello {&lt;br /&gt;    CompletableFuture&amp;lt;String&amp;gt; hello(String greetingMessage);&lt;br /&gt;}&lt;/pre&gt;When an implementation of this service is registered and exported as a remote service:&lt;br /&gt;&lt;pre class=&quot;brush:java&quot;&gt;@Component(property = { &quot;service.exported.interfaces=*&quot;, &quot;service.intents=osgi.async&quot; })&lt;br /&gt;public class HelloImpl implements Hello {&lt;br /&gt;    public CompletableFuture hello(String greetingMessage) {&lt;br /&gt;          CompletableFuture&amp;lt;String&amp;gt; future = new CompletableFuture&amp;lt;String&amp;gt;();&lt;br /&gt;          future.complete(&quot;Hi.  This a response to the greeting: &quot;+greetingMessage);&lt;br /&gt;          return future;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;Then when a Hello servicee consumer discovers, imports and the remote service is injected by DS:&lt;br /&gt;&lt;pre class=&quot;brush:java&quot;&gt;@Component(immediate=true)&lt;br /&gt;public class HelloConsumer {&lt;br /&gt;&lt;br /&gt;    @Reference&lt;br /&gt;    private Hello helloService;&lt;br /&gt;&lt;br /&gt;    @Activate&lt;br /&gt;    void activate() throws Exception {&lt;br /&gt;        // Call helloService.hello remote service without blocking&lt;br /&gt;        helloService.hello(&quot;hi there&quot;).whenComplete((result,exception) -&amp;gt; {&lt;br /&gt;            if (exception != null)&lt;br /&gt;                exception.printStackTrace(exception);&lt;br /&gt;            else&lt;br /&gt;                System.out.println(&quot;hello service responds: &quot; + result);&lt;br /&gt;        });&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;The injected &lt;b&gt;helloService &lt;/b&gt;instance will automatically implement the asynchronous/non-blocking remote call via the &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot;&gt;distribution provider&lt;/a&gt;.   No need for the consumer to implement anything other than calling the 'hello' method and handling the response via implementing &lt;b&gt;whenComplete&lt;/b&gt;.   The Java8 CompletionStage, Future, and OSGi's Promise are also supported return types.&lt;br /&gt;&lt;br /&gt;This makes it very easy to define, implement, and efficiently use loosely-coupled asynchronous remote services.   It also makes remote service contracts transport independent, allowing the swapping of &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot;&gt;distribution providers&lt;/a&gt; or custom providers without changes to the service interface contract.</description>
	<pubDate>Wed, 09 May 2018 21:27:23 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>itemis: New File Wizard – einfach mit Xtext 2.14 generieren</title>
	<guid isPermaLink="true">https://blogs.itemis.com/de/new-file-wizard-einfach-mit-xtext-2.14-generieren</guid>
	<link>https://blogs.itemis.com/de/new-file-wizard-einfach-mit-xtext-2.14-generieren</link>
	<description>&lt;p&gt;&lt;span&gt;Dass Xtext 2.14 in der Lage ist, einen &lt;/span&gt;&lt;a href=&quot;https://blogs.itemis.com/de/new-project-wizard-einfach-mit-xtext-2-14-generieren&quot; style=&quot;background-color: #ffffff;&quot;&gt;&lt;span&gt;New Project Wizard zu generieren&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, wurde bereits im Blog berichtet. Aber auch ein vergleichbarer, ebenfalls auf Templates basierender Wizard, um DSL-Dateien in bestehenden Projekten zu erzeugen, ist nun neu dazu gekommen.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Dieser Wizard wird mit &lt;/span&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/modeling.tmf.xtext&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Photon im Juni 2018&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; erscheinen – hier aber schon mal eine kurze Vorschau.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Erzeugen des New File Wizards&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Der Wizard für neue Dateien wird nahezu genauso erzeugt wie der Wizard für neue Projekte. In der mwe2-Datei, die definiert, was generiert wird, muss folgender Abschnitt eingefügt werden:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;language = StandardLanguage {&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    name = &quot;org.xtext.example.mydsl.MyDsl&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    fileExtensions = &quot;mydsl&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    serializer = {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        generateStub = false&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;strong&gt;fileWizard = {&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;        generate = true&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;    }&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Die Generierung mittels &lt;/span&gt;&lt;code&gt;Run As -&amp;gt; MWE2 Workflow&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; generiert nun den Wizard und ein beispielhaftes Template.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Im UI-Projekt der Sprache wird ein Package &lt;/span&gt;&lt;code&gt;wizard&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; generiert, das vor allem eine Datei &lt;/span&gt;&lt;code&gt;MyDslFileTemplateProvider.xtend&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; enthält (wobei der Name der Datei von dem Namen der Sprache abhängt). In dieser Datei wird der Inhalt des Wizards definiert. Weitere Konfigurationen sind normalerweise nicht nötig.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Wenn lediglich ein einzelnes Template für eine Sprache generiert wird, dann hat der Wizard nur eine Seite. Auf ihr werden neben dem Verzeichnis und einem Namen alle Parameter des Templates angegeben.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Xtext-214-new-file-wizard&quot; height=&quot;493&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Xtext-214-new-file-wizard.png?t=1525700151012&amp;amp;width=511&amp;amp;height=493&amp;amp;name=Xtext-214-new-file-wizard.png&quot; style=&quot;width: 511px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;511&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Gibt es mehrere Templates, wird auf der ersten Seite eine Combo-Box zur Auswahl des Templates angezeigt. Die Parameter werden dann auf der optionalen, zweiten Seite konfiguriert.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Definieren eigener Templates&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Um das “Hello World” an die eigene Sprache anzupassen oder weitere Templates hinzuzufügen, muss der &lt;/span&gt;&lt;code&gt;TemplateProvider &lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;– eine Klasse, die &lt;/span&gt;&lt;code&gt;&lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/IFileTemplateProvider.java&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;IFileTemplateProvider&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; implementiert – angepasst werden. Dieser liefert mit der Methode &lt;/span&gt;&lt;code&gt;getFileTemplates &lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;eine Liste mit allen verfügbaren Templates für die Sprache zurück. Standardmäßig sieht die Implementierung wie folgt aus:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;class MyDslFileTemplateProvider implements IFileTemplateProvider {&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    override getFileTemplates() {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        #[new HelloWorldFile]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Das Hinzufügen eines weiteren Templates ist also das Hinzufügen einer neuen Instanz zu dieser Liste – zum Beispiel:&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Das neue Template muss eine Subklasse von &lt;/span&gt;&lt;code&gt;&lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/AbstractFileTemplate.java&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;AbstractFileTemplate&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; sein. Am einfachsten lässt sich eine solche durch die Nutzung der Active Annotation &lt;/span&gt;&lt;code&gt;&lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/FileTemplate.xtend&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;FileTemplate&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; erzeugen. Diese Annotation bietet die Möglichkeit, den Namen, ein Icon sowie einen Beschreibungstext für das Template festzulegen. Diese regeln die Darstellung des Templates in der Liste der verfügbaren Templates im Wizard.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Man würde also in etwa so beginnen:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;@FileTemplate(label=&quot;Test&quot;, icon=&quot;file_template.png&quot;,&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    description=&quot;This creates a new hello world file.&quot;)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;final class HelloWorldFile {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Hier ist zumindest die Methode &lt;/span&gt;&lt;code&gt;generateFile(IFileGenerator)&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; zu implementieren. Der übergebene &lt;/span&gt;&lt;code&gt;&lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/IFileGenerator.java&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;IFileGenerator&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; enthält dabei eine einzelne Methode &lt;/span&gt;&lt;code&gt;generate(CharSequence, CharSequence)&lt;span&gt;, &lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;die man nun beliebig oft aufrufen kann, um beim Beenden des Wizards Dateien anzulegen.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Ein Aufruf, um ein einfaches “Hello World” zu erzeugen, kann dann zum Beispiel so aussehen:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;override generateFiles(IFileGenerator generator) {&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;generator.generate('''«folder»/«name».mydsl''', '''&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Hello «helloName»!&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;''')&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Zusätzliche Aufrufe von &lt;/span&gt;&lt;code&gt;generate &lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;erzeugt weitere Dateien. Die Parameter für die Templates werden mit derselben API definiert, wie die Project Templates. Das vollständige “Hello World” sieht dann so aus:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;class MyDslFileTemplateProvider implements IFileTemplateProvider {&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;override getFileTemplates() {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;#[new HelloWorldFile]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;@FileTemplate(label=&quot;Hello World&quot;, icon=&quot;file_template.png&quot;,&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;description=&quot;Create a hello world for MyDsl.&quot;)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;final class HelloWorldFile {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;val helloName = combo(&quot;Hello Name:&quot;, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;#[&quot;Xtext&quot;, &quot;World&quot;, &quot;Foo&quot;, &quot;Bar&quot;], &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;&quot;The name to say 'Hello' to&quot;)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;override generateFiles(IFileGenerator generator) {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;generator.generate('''«folder»/«name».mydsl''', '''&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Hello «helloName»!&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;''')&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;br /&gt;Auch das Beisteuern weiterer Templates funktioniert analog zu den Projekt Templates über einen Extension Point. In diesem Fall über &quot;org.eclipse.xtext.ui.fileTemplate&quot;.&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Da Eclipse Photon noch in etwa zwei Monaten Entfernung liegt, kommt hier schon einmal der Link zur nächtlichen Update Site:&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;&lt;a href=&quot;http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fde%2Fnew-file-wizard-einfach-mit-xtext-2.14-generieren&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 07 May 2018 14:17:32 +0000</pubDate>
	<author>adeutsch@itemis.de (Arne Deutsch)</author>
</item>
<item>
	<title>Donald Raab: EC by Example: Counting</title>
	<guid isPermaLink="false">https://medium.com/p/688dfaaf513c</guid>
	<link>https://medium.com/@donraab/ec-by-example-counting-688dfaaf513c?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Learn how to count the elements of a collection that match a Predicate using &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*n16KdxFkWicvN3BKn-Hatg.png&quot; /&gt;How many helicopters are there?&lt;/figure&gt;&lt;h3&gt;How do you count using Eclipse Collections?&lt;/h3&gt;&lt;p&gt;The method &lt;em&gt;count&lt;/em&gt; takes a &lt;em&gt;Predicate&lt;/em&gt; as a parameter and returns the number of the elements in a collection that match.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/561/1*YpDqfdVYmxNEK-ivgbwxZg.png&quot; /&gt;Counting with a Predicate&lt;/figure&gt;&lt;p&gt;There is also a &lt;em&gt;countWith&lt;/em&gt; method which takes a &lt;em&gt;Predicate2&lt;/em&gt; and a &lt;em&gt;countBy&lt;/em&gt; method which takes a &lt;em&gt;Function&lt;/em&gt;.&lt;/p&gt;&lt;h3&gt;Counting elements of a Collection&lt;/h3&gt;&lt;p&gt;Here’s a simple enum we’ll use to identify different things in a Collection.&lt;/p&gt;&lt;pre&gt;public enum SkyEntity&lt;br /&gt;{&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;HELICOPTER&lt;/em&gt;&lt;/strong&gt;(true), &lt;strong&gt;&lt;em&gt;SKYSCRAPER&lt;/em&gt;&lt;/strong&gt;(false), &lt;strong&gt;&lt;em&gt;BIRD&lt;/em&gt;&lt;/strong&gt;(true);&lt;br /&gt;&lt;br /&gt;    SkyEntity(boolean flies)&lt;br /&gt;    {&lt;br /&gt;        this.flies = flies;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    private boolean flies;&lt;br /&gt;&lt;br /&gt;    public boolean canFly()&lt;br /&gt;    {&lt;br /&gt;        return this.flies;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Now, let’s count some things. First, I will create a &lt;em&gt;MutableBag&lt;/em&gt; of &lt;em&gt;SkyEntity&lt;/em&gt; instances using &lt;em&gt;addOccurrences&lt;/em&gt; to set the counts directly. Then I will convert the &lt;em&gt;MutableBag&lt;/em&gt; to a &lt;em&gt;MutableList&lt;/em&gt;. Then I will use &lt;em&gt;count&lt;/em&gt; to count the number of HELICOPTER and &lt;em&gt;countWith&lt;/em&gt; to count the number of SKYSCRAPER.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void count()&lt;br /&gt;{&lt;br /&gt;    MutableBag&amp;lt;SkyEntity&amp;gt; bag = Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;    bag.addOccurrences(SkyEntity.&lt;strong&gt;&lt;em&gt;HELICOPTER&lt;/em&gt;&lt;/strong&gt;, 12);&lt;br /&gt;    bag.addOccurrences(SkyEntity.&lt;strong&gt;&lt;em&gt;SKYSCRAPER&lt;/em&gt;&lt;/strong&gt;, 10);&lt;br /&gt;    bag.addOccurrences(SkyEntity.&lt;strong&gt;&lt;em&gt;BIRD&lt;/em&gt;&lt;/strong&gt;, 100);&lt;br /&gt;    MutableList&amp;lt;SkyEntity&amp;gt; list = bag.toList();&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            bag.occurrencesOf(SkyEntity.&lt;strong&gt;&lt;em&gt;HELICOPTER&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;            list.count(SkyEntity.&lt;strong&gt;&lt;em&gt;HELICOPTER&lt;/em&gt;&lt;/strong&gt;::equals));&lt;br /&gt;    &lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            bag.occurrencesOf(SkyEntity.&lt;strong&gt;&lt;em&gt;SKYSCRAPER&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;            list.countWith(Object::equals, SkyEntity.&lt;strong&gt;&lt;em&gt;SKYSCRAPER&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;&lt;br /&gt;    Bag&amp;lt;Boolean&amp;gt; flies = list.countBy(SkyEntity::canFly);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            flies.occurrencesOf(Boolean.&lt;strong&gt;&lt;em&gt;TRUE&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;            list.count(SkyEntity::canFly));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Finally, I group and count the &lt;em&gt;SkyEntity&lt;/em&gt; who can and can’t fly using &lt;em&gt;countBy&lt;/em&gt; with a &lt;em&gt;Function&lt;/em&gt; which returns a &lt;em&gt;Boolean&lt;/em&gt;.&lt;/p&gt;&lt;h3&gt;Counting Primitive Collections&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; has a full complement of primitive collections. Each primitive collections supports a count API. Here are a couple examples of counting with primitive collections.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void countPrimitive()&lt;br /&gt;{&lt;br /&gt;    IntList intList = IntInterval.&lt;em&gt;oneTo&lt;/em&gt;(10);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(5, intList.count(IntPredicates.&lt;em&gt;isEven&lt;/em&gt;()));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(5, intList.count(IntPredicates.&lt;em&gt;isOdd&lt;/em&gt;()));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(3, intList.count(i -&amp;gt; i % 3 == 0));&lt;br /&gt;&lt;br /&gt;    CharAdapter chars =&lt;br /&gt;        Strings.&lt;em&gt;asChars&lt;/em&gt;(&lt;br /&gt;            &lt;strong&gt;&quot;the quick brown fox jumps over the lazy dog&quot;&lt;/strong&gt;);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(2, chars.count(c -&amp;gt; c == &lt;strong&gt;'t'&lt;/strong&gt;));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(8, chars.count(Character::&lt;em&gt;isWhitespace&lt;/em&gt;));&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;APIs covered in the examples&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/api/RichIterable.html#count-org.eclipse.collections.api.block.predicate.Predicate-&quot;&gt;count&lt;/a&gt; / &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/api/RichIterable.html#countWith-org.eclipse.collections.api.block.predicate.Predicate2-P-&quot;&gt;countWith&lt;/a&gt; — counts the number of elements of a collection that match a given &lt;em&gt;Predicate&lt;/em&gt; or &lt;em&gt;Predicate2&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/api/RichIterable.html#countBy-org.eclipse.collections.api.block.function.Function-R-&quot;&gt;countBy&lt;/a&gt; — counts elements of a collection grouping them by some &lt;em&gt;Function&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/impl/factory/Bags.html&quot;&gt;Bags&lt;/a&gt;.mutable.empty — creates an empty &lt;em&gt;MutableBag&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/api/bag/Bag.html#occurrencesOf-java.lang.Object-&quot;&gt;occurrencesOf&lt;/a&gt; — counts the number of occurrences of an item in a &lt;em&gt;Bag&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/api/RichIterable.html#toList--&quot;&gt;toList&lt;/a&gt; — converts a collection to a MutableList.&lt;/li&gt;&lt;li&gt;IntInterval.&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/impl/list/primitive/IntInterval.html#oneTo-int-&quot;&gt;oneTo&lt;/a&gt; — creates an IntInterval which is an &lt;em&gt;ImmutableIntList&lt;/em&gt; from one to the specified number.&lt;/li&gt;&lt;li&gt;IntPredicates.&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/impl/block/factory/primitive/IntPredicates.html#isEven--&quot;&gt;isEven&lt;/a&gt; / &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/impl/block/factory/primitive/IntPredicates.html#isOdd--&quot;&gt;isOdd&lt;/a&gt; — creates an IntPredicate which tests if an int is even or odd.&lt;/li&gt;&lt;li&gt;Strings.&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/impl/factory/Strings.html#asChars-java.lang.String-&quot;&gt;asChars&lt;/a&gt; — creates a &lt;em&gt;CharAdapter&lt;/em&gt; wrapping the specified String.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Check out this &lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/api-design&quot;&gt;presentation&lt;/a&gt; to learn more about the origins, design and evolution of the Eclipse Collections API.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=688dfaaf513c&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 07 May 2018 04:08:40 +0000</pubDate>
</item>
<item>
	<title>Chris Aniszczyk: Copenhagen: KubeCon and CloudNativeCon 2018 Takeaways</title>
	<guid isPermaLink="false">http://aniszczyk.org/?p=4215</guid>
	<link>http://aniszczyk.org/2018/05/06/copenhagen-kubecon-and-cloudnativecon-2018-takeaways/</link>
	<description>&lt;p&gt;What a crazy week helping host our annual European community conference in Copenhagen… it’s been wild to see the community grow since the CNCF took over the stewardship of the conference (thank you&lt;a href=&quot;https://twitter.com/asynchio&quot;&gt; Joseph Jacks&lt;/a&gt;, still remember those conversations we had in the early days):&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Somehow the crowd at &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; is simply stunning… &lt;a href=&quot;https://t.co/MMzXgfSARg&quot;&gt;pic.twitter.com/MMzXgfSARg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Dirk Hohndel (@_dirkhh) &lt;a href=&quot;https://twitter.com/_dirkhh/status/991709991034851328?ref_src=twsrc%5Etfw&quot;&gt;May 2, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I was also just blown away by the amount of CNCF ecosystem related jobs out there:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Want to work with Cloud Native tech? &lt;a href=&quot;https://twitter.com/hashtag/jobsboard?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#jobsboard&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; &lt;a href=&quot;https://t.co/6N0rUDmESU&quot;&gt;pic.twitter.com/6N0rUDmESU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Tracy Miranda (@tracymiranda) &lt;a href=&quot;https://twitter.com/tracymiranda/status/992333900730028032?ref_src=twsrc%5Etfw&quot;&gt;May 4, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I have a few hours until I board my flight home so I figure I would share some of my take aways from the event in a series of tweets:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CNCF project adoption and the growth of the End User Community&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The amount of end users I’ve bumped into at the conference was incredible, insurance companies, medical, automative, government, airlines, tax offices and more. In Dan Kohn’s keynote, he covered our official &lt;a href=&quot;https://www.cncf.io/people/end-user-community/&quot;&gt;CNCF End User Community&lt;/a&gt; which was setup as a way to ensure End Users have a voice in CNCF governance:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;End user community growth in &lt;a href=&quot;https://twitter.com/CloudNativeFdn?ref_src=twsrc%5Etfw&quot;&gt;@CloudNativeFdn&lt;/a&gt; demonstrates this is more than a vendor party. &lt;a href=&quot;https://twitter.com/hashtag/Kubecon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Kubecon&lt;/a&gt; &lt;a href=&quot;https://t.co/BJB2hujrcR&quot;&gt;pic.twitter.com/BJB2hujrcR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Gabe Monroy (@gabrtv) &lt;a href=&quot;https://twitter.com/gabrtv/status/991575458851454978?ref_src=twsrc%5Etfw&quot;&gt;May 2, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;CNCF has one of the largest, if not largest end user community membership of any open source foundation. I’m proud of what we built and mark my words, there will be a day when the number of &lt;a href=&quot;https://www.cncf.io/people/end-user-community/&quot;&gt;official CNCF End Users&lt;/a&gt; will outnumber our vendors. Also, I was stoked to announce our first Top End User Award to Bloomberg showcasing one of our official end users using cloud native technology an interesting way:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Favorite part of the keynote – end user awards; &lt;a href=&quot;https://twitter.com/cra?ref_src=twsrc%5Etfw&quot;&gt;@cra&lt;/a&gt; presenting it to the first such recipient – &lt;a href=&quot;https://twitter.com/TechAtBloomberg?ref_src=twsrc%5Etfw&quot;&gt;@TechAtBloomberg&lt;/a&gt;, congratulations! &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; &lt;a href=&quot;https://t.co/DIa0eNaerT&quot;&gt;pic.twitter.com/DIa0eNaerT&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Sriram Subramanian (@sriramhere) &lt;a href=&quot;https://twitter.com/sriramhere/status/991708236066652161?ref_src=twsrc%5Etfw&quot;&gt;May 2, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;If you’re using CNCF projects an interesting ways, I implore you to join our official &lt;a href=&quot;https://www.cncf.io/people/end-user-community/&quot;&gt;End User Community&lt;/a&gt; so you have an official voice and more importantly, learn from other end users deploying CNCF projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;May a thousand [kubernetes] operators bloom&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In my opinion, one of the big themes of the conference was the rise of kubernetes operators. In Brandon Philips keynote, Red Hat (CoreOS) open sourced the &lt;a href=&quot;https://github.com/operator-framework&quot;&gt;Operator Framework&lt;/a&gt; which makes it easier to write and build operators:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;.&lt;a href=&quot;https://twitter.com/RedHat?ref_src=twsrc%5Etfw&quot;&gt;@RedHat&lt;/a&gt;’s Operator Framework can also be used to create an enterprise-wide service catalog of Kubernetes apps &lt;a href=&quot;https://twitter.com/BrandonPhilips?ref_src=twsrc%5Etfw&quot;&gt;@BrandonPhilips&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/kubecon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#kubecon&lt;/a&gt; &lt;a href=&quot;https://t.co/l497I6K3VT&quot;&gt;pic.twitter.com/l497I6K3VT&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— The New Stack @ #KubeCon (@thenewstack) &lt;a href=&quot;https://twitter.com/thenewstack/status/991947043429117952?ref_src=twsrc%5Etfw&quot;&gt;May 3, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;At the conference itself, there were many projects and companies announcing operators for their project or product (see dotmesh, spark, NATS, vitess, etc), expect this trend to continue and explode over the next year, you can see the growing list of operators out there via &lt;a href=&quot;https://github.com/operator-framework/awesome-operators&quot;&gt;awesome-operators repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CNCF is the center of open source serverless collaboration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/cncf/wg-serverless&quot;&gt;CNCF Serverless Working Group&lt;/a&gt; launched their first version of the CloudEvents project:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;If you are interested in &lt;a href=&quot;https://twitter.com/hashtag/cloudevents?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#cloudevents&lt;/a&gt;, you can find the specifications here: &lt;a href=&quot;https://t.co/pYWz2E28te&quot;&gt;https://t.co/pYWz2E28te&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;When you look at repo stats and pending PRs, you'll likely find that I've been doing a lot of writing on the transport mappings and event formats; some notes about the design:&lt;/p&gt;
&lt;p&gt;— Clemens Vasters &lt;img alt=&quot;🇪🇺&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.4/72x72/1f1ea-1f1fa.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;img alt=&quot;☁&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.4/72x72/2601.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;img alt=&quot;📨&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.4/72x72/1f4e8.png&quot; style=&quot;height: 1em;&quot; /&gt; (@clemensv) &lt;a href=&quot;https://twitter.com/clemensv/status/992478395178119168?ref_src=twsrc%5Etfw&quot;&gt;May 4, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;There was an incredible demo by Austen Collins showcasing the project across several cloud providers:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;This Friday @ &lt;a href=&quot;https://twitter.com/hashtag/CloudNativeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CloudNativeCon&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt;, I'm doing a talk on &lt;a href=&quot;https://twitter.com/hashtag/serverless?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#serverless&lt;/a&gt; / &lt;a href=&quot;https://twitter.com/hashtag/FaaS?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#FaaS&lt;/a&gt; everywhere, announcing a common format for event data, and demoing an event-driven, serverless architecture comprised of 8 cloud/FaaS providers.  It's going to be awesome.  &lt;a href=&quot;https://t.co/Hs92k9HtQb&quot;&gt;https://t.co/Hs92k9HtQb&lt;/a&gt; &lt;a href=&quot;https://t.co/AF9uITD0wg&quot;&gt;pic.twitter.com/AF9uITD0wg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Austen Collins (@austencollins) &lt;a href=&quot;https://twitter.com/austencollins/status/991555624239583232?ref_src=twsrc%5Etfw&quot;&gt;May 2, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;For an effort that started under a year ago, it’s nice to see Azure, Google, Oracle, IBM and other major cloud providers collaborate in the working group and support various open source serverless initiatives, I look forward to what they will do next:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Announced today and demo'd at &lt;a href=&quot;https://twitter.com/hashtag/kubecon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#kubecon&lt;/a&gt;, first-class support for &lt;a href=&quot;https://twitter.com/hashtag/CloudEvents?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CloudEvents&lt;/a&gt; on &lt;a href=&quot;https://twitter.com/Azure?ref_src=twsrc%5Etfw&quot;&gt;@Azure&lt;/a&gt; Event Grid. Thanks to &lt;a href=&quot;https://twitter.com/CloudNativeFdn?ref_src=twsrc%5Etfw&quot;&gt;@CloudNativeFdn&lt;/a&gt; for the great partnership! &lt;/p&gt;
&lt;p&gt;Open CloudEvents are the glue of the serverless world!&lt;a href=&quot;https://t.co/ariMe043n5&quot;&gt;https://t.co/ariMe043n5&lt;/a&gt; &lt;a href=&quot;https://t.co/FheC31kl8C&quot;&gt;pic.twitter.com/FheC31kl8C&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Corey Sanders (@CoreySandersWA) &lt;a href=&quot;https://twitter.com/CoreySandersWA/status/992384864606474241?ref_src=twsrc%5Etfw&quot;&gt;May 4, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;CNCF 2020: Expanding ecosystem + Kubernetes: just run my code&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Alexis Richardson gave a &lt;a href=&quot;https://drive.google.com/open?id=1s06LgFgmEuNo1iykxpl_moXrTqhGZ4Rb&quot;&gt;keynote&lt;/a&gt; outlining his thoughts on the future vision of CNCF which I found delightful for everyone who doesn’t attend every CNCF TOC meeting:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;&quot;Kubernetes, just run my code&quot; the goal of 2020 CNCF strategy &lt;a href=&quot;https://twitter.com/monadic?ref_src=twsrc%5Etfw&quot;&gt;@monadic&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; &lt;a href=&quot;https://t.co/aj6RiBwOqJ&quot;&gt;pic.twitter.com/aj6RiBwOqJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Schlomo Schapiro (@schlomoschapiro) &lt;a href=&quot;https://twitter.com/schlomoschapiro/status/991601611385573376?ref_src=twsrc%5Etfw&quot;&gt;May 2, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;It’s not a surprise that I concur with a lot of these thoughts. In the bootstrapping days of CNCF, we were laying the foundation of projects required to bootstrap the ecosystem around Kubernetes and cloud native. The next step was increasing the reach of Kubernetes outside of just orchestration and focusing on technology areas as storage and security. The future of CNCF is all about increasing the mean time to developer satisfaction by improving the state of developer tooling. We need to get to the same point that developers are with Linux with Kubernetes, while super important foundational technology, developers don’t have to know the intimate details of how these systems work and instead stand on the shoulders of them to build their applications.&lt;/p&gt;
&lt;p&gt;Another additional thing I’d like to mention that Alexis didn’t bring up formally.  One of my goals in CNCF is to ensure we build a sustainable ecosystem of projects, members and end users. As our ecosystem matures and some of our projects proverbially cross the chasm (we use the graduate parlance in CNCF)…&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Kubernetes has graduated out of &lt;a href=&quot;https://twitter.com/CloudNativeFdn?ref_src=twsrc%5Etfw&quot;&gt;@CloudNativeFdn&lt;/a&gt; incubation. What does that mean?&lt;/p&gt;
&lt;p&gt;Kubernetes has crossed the chasm.&lt;a href=&quot;https://twitter.com/hashtag/Kubecon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Kubecon&lt;/a&gt; &lt;a href=&quot;https://t.co/R7B0zgfkDE&quot;&gt;pic.twitter.com/R7B0zgfkDE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Gabe Monroy (@gabrtv) &lt;a href=&quot;https://twitter.com/gabrtv/status/991587978819571712?ref_src=twsrc%5Etfw&quot;&gt;May 2, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;How do we ensure each of these parties are receiving value from their participation in the foundation? It’s something I think about on a daily basis as more CNCF projects get embedded everywhere, graduate and cross the chasm.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes maturing and&lt;/strong&gt; &lt;strong&gt;container standardization unlocks innovation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At the conference, Google open sourced &lt;a href=&quot;https://github.com/google/gvisor&quot;&gt;gVisor&lt;/a&gt; as another approach to container runtimes which in my biased opinion is made possible due to OCI standardization efforts to allow this type of innovation without fear of breaking compatibility. As part of gVisor, &lt;a href=&quot;https://github.com/google/gvisor/tree/master/runsc&quot;&gt;&lt;code&gt;runsc&lt;/code&gt;&lt;/a&gt;(like runc in OCI) provides an isolation boundary between the application and the host kernel and they have a ton of information in their README about the tradeoffs versus other container runtimes out there:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;With more runtimes like gVisor coming out I'm trying to find a good way to abstract the runc CLI so that it's easier for people to build their own when they implement &lt;a href=&quot;https://twitter.com/OCI_ORG?ref_src=twsrc%5Etfw&quot;&gt;@OCI_ORG&lt;/a&gt; specs.  This is that I have so far:&lt;a href=&quot;https://t.co/URQdGqzBA8&quot;&gt;https://t.co/URQdGqzBA8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Michael Crosby (@crosbymichael) &lt;a href=&quot;https://twitter.com/crosbymichael/status/991690531184005120?ref_src=twsrc%5Etfw&quot;&gt;May 2, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;There are a lot more things to mention (e.g., rise of enovy and it becoming embedded everywhere, cloud native programming languages, chaos engineering) but I have to now board a flight home and get some sleep. Personally, I’m nothing but humbled by the growth of the community and conference the last few years, it’s been an honor helping build it out since the beginning. If you have any suggestions on improving the event or our community in anyway, please reach out via Twitter or shoot me an email:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;completely humbled with how much the &lt;a href=&quot;https://twitter.com/CloudNativeFdn?ref_src=twsrc%5Etfw&quot;&gt;@CloudNativeFdn&lt;/a&gt; has grown, hope you enjoyed &lt;a href=&quot;https://twitter.com/hashtag/kubecon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#kubecon&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/cloudnativecon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#cloudnativecon&lt;/a&gt; and please feel free to personally send me feedback on how we can make things better for you in the future&lt;/p&gt;
&lt;p&gt;— Chris Aniszczyk (@cra) &lt;a href=&quot;https://twitter.com/cra/status/992393098612367363?ref_src=twsrc%5Etfw&quot;&gt;May 4, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;We do listen to feedback and as an example, in Austin, people complained that the videos were taking too long to post and we aimed to have a quicker turn around this time and followed through with that in Copenhagen:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;missed &lt;a href=&quot;https://twitter.com/hashtag/kubecon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#kubecon&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/cloudnativecon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#cloudnativecon&lt;/a&gt; in Copenhagen? don't worry, videos are being uploaded to the &lt;a href=&quot;https://twitter.com/CloudNativeFdn?ref_src=twsrc%5Etfw&quot;&gt;@CloudNativeFdn&lt;/a&gt; as we speak! &lt;a href=&quot;https://t.co/0M2lZL6z55&quot;&gt;https://t.co/0M2lZL6z55&lt;/a&gt; &lt;a href=&quot;https://t.co/HFpuQhzPy2&quot;&gt;pic.twitter.com/HFpuQhzPy2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Chris Aniszczyk (@cra) &lt;a href=&quot;https://twitter.com/cra/status/992809904510562304?ref_src=twsrc%5Etfw&quot;&gt;May 5, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Thank you again for attending and see you in &lt;a href=&quot;https://www.lfasiallc.com/events/kubecon-cloudnativecon-china-2018/&quot;&gt;Shanghai&lt;/a&gt; and &lt;a href=&quot;https://events.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2018/&quot;&gt;Seattle&lt;/a&gt;!&lt;/p&gt;</description>
	<pubDate>Sun, 06 May 2018 12:34:00 +0000</pubDate>
</item>
<item>
	<title>EclipseCon France 2018: Learn about JakartaEE, MicroServices, Microprofile and EE4J</title>
	<guid isPermaLink="false">https://www.eclipsecon.org/france2018/news/3901 at https://www.eclipsecon.org/france2018</guid>
	<link>https://www.eclipsecon.org/france2018/news/learn-about-jakartaee-microservices-microprofile-and-ee4j</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;Meet the communities, learn about the technologies and get the latest news around these important Java initiatives. Newcomers to these projects can experience talks ranging from &lt;a href=&quot;https://www.eclipsecon.org/france2018/session/build-12-factor-microservice-half-hour&quot;&gt;Building a 12-factor microservice in half an hour &lt;/a&gt;to an introduction to JarkartaEE,  &lt;a href=&quot;https://www.eclipsecon.org/france2018/session/java-ee-jakarta-ee-user-perspective&quot;&gt;Java EE to Jakarta EE: a user perspective&lt;/a&gt;. Those already involved can hear the latest &lt;a href=&quot;https://www.eclipsecon.org/france2018/session/eclipse-microprofile-new-and-noteworthy&quot;&gt;New &amp;amp; Noteworthy on the Eclipse Microprofile&lt;/a&gt; project or learn about &lt;a href=&quot;https://www.eclipsecon.org/france2018/session/jax-rs-21-beyond&quot;&gt;JAX-RS 2.1 &amp;amp; Beyond&lt;/a&gt;. There’s much more - &lt;a href=&quot;https://www.eclipsecon.org/france2018/program/sessions/accepted?keys=&amp;amp;field_experience_value=All&amp;amp;field_session_type_tid=All&amp;amp;field_session_track_tid%5B%5D=1396&quot;&gt;follow this link to these topics&lt;/a&gt; and start planning your &lt;a href=&quot;https://www.eclipsecon.org/france2018/conference/program/sessions/schedule&quot;&gt;conference&lt;/a&gt;!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-news-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://www.eclipsecon.org/france2018/news/learn-about-jakartaee-microservices-microprofile-and-ee4j&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;img-responsive block-center&quot; height=&quot;250&quot; src=&quot;https://www.eclipsecon.org/france2018/sites/default/files/styles/solstice_news_-_default_-_thumbnail/public/news/jakarta_ee_logo_schooner_color_stacked_default.png?itok=QkiajDWv&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 04 May 2018 15:18:13 +0000</pubDate>
</item>
<item>
	<title>EclipseCon France 2018: Sponsor Testimonial: Typefox</title>
	<guid isPermaLink="false">https://www.eclipsecon.org/france2018/news/3900 at https://www.eclipsecon.org/france2018</guid>
	<link>https://www.eclipsecon.org/france2018/news/sponsor-testimonial-typefox</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;&quot;EclipseCon France is around the corner, and we at TypeFox are proud to sponsor this great community gathering again. Eclipse has morphed from being an IDE, over a tooling platform to an entire ecosystem, adopting trends and leading new endeavors like IoT, cloud technology and Jakarta EE ...&quot;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-news-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://www.eclipsecon.org/france2018/news/sponsor-testimonial-typefox&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;img-responsive block-center&quot; height=&quot;250&quot; src=&quot;https://www.eclipsecon.org/france2018/sites/default/files/styles/solstice_news_-_default_-_thumbnail/public/news/Typefoxtransp2.png?itok=YAJpLwwt&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 04 May 2018 15:09:17 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Newsletter - Java Tools and Runtimes</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/rXaTKjaH7WE/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/rXaTKjaH7WE/</link>
	<description>This month, read all about Eclipse projects: Collections, JNoSQL, MicroProfile, OpenJ9, and Vert.x&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/rXaTKjaH7WE&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 04 May 2018 10:00:00 +0000</pubDate>
</item>
<item>
	<title>itemis: Xtext 2.14 adds support for JUnit 5</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/xtext-2.14-adds-support-for-junit-5</guid>
	<link>https://blogs.itemis.com/en/xtext-2.14-adds-support-for-junit-5</link>
	<description>&lt;p&gt;Unit tests written for Xtext DSLs are typically using Xtext’s testing infrastructure provided by the &lt;code&gt;org.eclipse.xtext.testing&lt;/code&gt; bundle. Older tests might even still use the deprecated &lt;code&gt;org.eclipse.xtext.junit4&lt;/code&gt; bundle. Tests for DSLs need to inject a language specific &lt;code&gt;IInjectorProvider&lt;/code&gt; with an &lt;code&gt;@InjectWith&lt;/code&gt; annotation. Additionally a specialized JUnit runner, the &lt;code&gt;XtextRunner&lt;/code&gt;, is used with the &lt;code&gt;@RunWith&lt;/code&gt; annotation to run the test. &lt;/p&gt;  
&lt;p&gt;An Xtext test therefore looks like this:&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;@RunWith(XtextRunner)&lt;br /&gt;@InjectWith(MyDslInjectorProvider) &lt;br /&gt;class MyDslSomethingTest { &lt;br /&gt;...&lt;br /&gt; }&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;XtextRunner&lt;/code&gt; uses the injector provider, does the member injection into the class-under-test and takes care that internal registries are reset after test execution. This is required to avoid side effects from modifications on global EMF registries during test execution. However, &lt;a href=&quot;https://www.mscharhag.com/java/understanding-junits-runner-architecture&quot;&gt;JUnit runners&lt;/a&gt; are specific to JUnit 4 and therefore &lt;code&gt;XtextRunner&lt;/code&gt; can only be used to run tests with JUnit 4. &lt;/p&gt; 
&lt;p&gt;To support the new &lt;a href=&quot;https://junit.org/junit5/&quot;&gt;JUnit 5&lt;/a&gt; framework Xtext needed something equivalent to what the &lt;code&gt;XtextRunner&lt;/code&gt; does. In JUnit 5, additional logic that needs to be executed in a test’s lifecycle can be added with means of Extensions.&lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/#extensions&quot;&gt; JUnit 5 Extensions&lt;/a&gt; are more powerful than Runners. Especially there can be multiple of them, while you can only have a single runner.&lt;/p&gt; 
&lt;p&gt;The replacement for &lt;code&gt;XtextRunner&lt;/code&gt; is the new class &lt;code&gt;org.eclipse.xtext.testing.extensions.InjectionExtension&lt;/code&gt;. Use it together with the &lt;code&gt;@ExtendWith&lt;/code&gt; annotation. So a typical test now looks as follows:&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;strong&gt;@ExtendWith(InjectionExtension)&lt;/strong&gt; &lt;br /&gt;@InjectWith(MyDslInjectorProvider) &lt;br /&gt;class MyDslSomethingTest { &lt;br /&gt;... &lt;br /&gt;}&lt;/pre&gt; 
&lt;p&gt;That’s basically it to make tests run with JUnit 5! Easy, isn’t it?&lt;/p&gt; 
&lt;p&gt;In Eclipse, you can run them as you are used to with the &lt;em&gt;Run As / JUnit Test&lt;/em&gt; action. Note that the test execution now shows that it was run with the &lt;em&gt;JUnit 5&lt;/em&gt; engine.&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;JUnit5-Test-Execution&quot; height=&quot;175&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/JUnit5-Test-Execution.png?t=1525700151012&amp;amp;width=422&amp;amp;height=175&amp;amp;name=JUnit5-Test-Execution.png&quot; style=&quot;width: 422px;&quot; width=&quot;422&quot; /&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JUnit 5 dependencies&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;Of course a testing project needs different dependencies with JUnit 5. The following dependencies are used in the test project’s &lt;code&gt;MANIFEST.MF&lt;/code&gt;:&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;org.junit.jupiter.api;bundle-version=&quot;5.1.0&quot;, &lt;br /&gt;org.junit.jupiter.engine;bundle-version=&quot;5.1.0&quot;, &lt;br /&gt;org.junit.platform.commons;bundle-version=&quot;1.1.0&quot;, &lt;br /&gt;org.junit.platform.engine;bundle-version=&quot;1.1.0&quot;, &lt;br /&gt;org.opentest4j;bundle-version=&quot;1.0.0&quot;,&lt;/pre&gt; 
&lt;p&gt;When using Gradle add these dependencies to the build.gradle file in the test project:&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;dependencies {    &lt;br /&gt;    compile project(':org.xtext.example.mydsl')    &lt;br /&gt;&lt;strong&gt;    testCompile &quot;org.junit.jupiter:junit-jupiter-api:5.1.0&quot;    &lt;/strong&gt;&lt;br /&gt;&lt;strong&gt;    testCompile &quot;org.junit.jupiter:junit-jupiter-engine:5.1.0&quot;    &lt;/strong&gt;&lt;br /&gt;&lt;strong&gt;    testCompile &quot;org.junit.platform:junit-platform-commons:1.1.0&quot;    &lt;/strong&gt;&lt;br /&gt;&lt;strong&gt;    testCompile &quot;org.junit.platform:junit-platform-engine:1.1.0&quot;    &lt;/strong&gt;&lt;br /&gt;&lt;strong&gt;    testCompile &quot;org.opentest4j:opentest4j:1.0.0&quot;   &lt;/strong&gt; &lt;br /&gt;    testCompile &lt;br /&gt;&quot;org.eclipse.xtext:org.eclipse.xtext.testing:${xtextVersion}&quot;    &lt;br /&gt;    testCompile &lt;br /&gt;&quot;org.eclipse.xtext:org.eclipse.xtext.xbase.testing:${xtextVersion}&quot; &lt;br /&gt;}&lt;/pre&gt; 
&lt;p&gt;If you are creating Eclipse plugins, JUnit 5.1 must be part of your target platform. That version has just recently been added to Eclipse Orbit and there is at the time of writing of this article just an integration build repository available hosting these bundles: &lt;a href=&quot;http://download.eclipse.org/tools/orbit/downloads/drops/I20180417184143/repository/&quot;&gt;http://download.eclipse.org/tools/orbit/downloads/drops/I20180417184143/repository&lt;br /&gt;&lt;/a&gt;In the near future, use a more stable repository. That will be the recommended repository for Eclipse Photon, or before the Photon release, the repository for the Photon M7 milestone.&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;New Project Wizard&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;Xtext’s &lt;em&gt;New Project Wizard&lt;/em&gt; now lets you decide which JUnit version you want to use for new projects.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;new-Xtext-Project-Wizard&quot; height=&quot;633&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/new-Xtext-Project-Wizard.png?t=1525700151012&amp;amp;width=538&amp;amp;height=633&amp;amp;name=new-Xtext-Project-Wizard.png&quot; style=&quot;width: 538px;&quot; width=&quot;538&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br /&gt;In the language’s &lt;code&gt;.mwe2&lt;/code&gt; workflow file the &lt;code&gt;junitSupport&lt;/code&gt; will configured for version 5 then, which instructs Xtext’s generator to add the required dependencies to the test project and create the example parser test in JUnit 5 style.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;JUnit5-Support&quot; height=&quot;334&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/JUnit5-Support.png?t=1525700151012&amp;amp;width=524&amp;amp;height=334&amp;amp;name=JUnit5-Support.png&quot; style=&quot;width: 524px;&quot; width=&quot;524&quot; /&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Migrating Tests&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;To migrate your Xtext tests to JUnit 5 the most important things have already mentioned above:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make sure you add the JUnit 5 dependencies to your tests project  &lt;/li&gt; 
 &lt;li&gt;Replace &lt;span style=&quot;font-family: 'andale mono', times;&quot;&gt;@RunWith(XtextRunner.class)&lt;/span&gt; by &lt;span style=&quot;font-family: 'andale mono', times;&quot;&gt;@ExtendWith(InjectionExtensions.class)&lt;/span&gt;  &lt;/li&gt; 
 &lt;li&gt;Replace import &lt;span style=&quot;font-family: 'andale mono', times;&quot;&gt;org.junit.Test&lt;/span&gt; by &lt;span style=&quot;font-family: 'andale mono', times;&quot;&gt;org.junit.jupiter.api.Test &lt;/span&gt; &lt;/li&gt; 
 &lt;li&gt;Replace import &lt;span style=&quot;font-family: 'andale mono', times;&quot;&gt;org.junit.Assert&lt;/span&gt; by &lt;span style=&quot;font-family: 'andale mono', times;&quot;&gt;org.junit.jupiter.api.Assertions &lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Conclusion&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;With Xtext 2.14 tests can be written and executed with JUnit 5. For new projects Xtext’s wizard produces the right configuration automatically. However, migration of existing Xtext test projects and classes is quite easy. &lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fxtext-2.14-adds-support-for-junit-5&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 03 May 2018 09:30:00 +0000</pubDate>
	<author>thoms@itemis.de (Karsten Thoms)</author>
</item>
<item>
	<title>Eclipse Ditto: Connecting Eclipse Ditto to Eclipse Hono</title>
	<guid isPermaLink="true">https://www.eclipse.org/ditto/2018-05-02-connecting-ditto-hono.html</guid>
	<link>https://www.eclipse.org/ditto/2018-05-02-connecting-ditto-hono.html</link>
	<description>&lt;p&gt;With the recently released Ditto milestone &lt;a href=&quot;https://www.eclipse.org/ditto/2018-04-26-milestone-announcement-030-M1.html&quot;&gt;0.3.0-M1&lt;/a&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;connectivity&lt;/code&gt;
to AMQP 1.0 endpoints can now be established in a durable and stable way (including failovers, etc.).&lt;/p&gt;

&lt;p&gt;That means Ditto now is ready to be connected to &lt;a href=&quot;https://www.eclipse.org/hono/&quot;&gt;Eclipse Hono’s&lt;/a&gt; “northbound” API which
is provided via AMQP 1.0.&lt;br /&gt;
By doing so it is for example possible to receive &lt;a href=&quot;https://www.eclipse.org/hono/api/telemetry-api/&quot;&gt;Hono telemetry&lt;/a&gt; 
messages (see heading “Northbound Operations”) which a device &lt;code class=&quot;highlighter-rouge&quot;&gt;demo-device&lt;/code&gt; connected to the “southbound” of Hono sends 
via HTTP or MQTT (the currently available protocol adapters of Hono) in Ditto.&lt;br /&gt;
When received, the payload can be translated into a format Ditto understands in order to update the 
&lt;a href=&quot;https://www.eclipse.org/ditto/intro-digitaltwins.html&quot;&gt;digital twin&lt;/a&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;demo-device&lt;/code&gt; device and provide API access to the twin, e.g. via &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;
or &lt;code class=&quot;highlighter-rouge&quot;&gt;WebSocket&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This blog post walks through the steps required to connect Ditto and Hono by adding a connection between the Hono and 
Ditto sandboxes at&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://hono.eclipse.org&quot;&gt;hono.eclipse.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ditto.eclipse.org&quot;&gt;ditto.eclipse.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;

&lt;p&gt;The following graphic illustrates the scenario:&lt;/p&gt;

&lt;figure&gt;&lt;img alt=&quot;Ditto-Hono digital twin&quot; class=&quot;docimage&quot; src=&quot;https://www.eclipse.org/ditto/images/blog/2018-05-02-ditto-hono-digital-twin.png&quot; /&gt;Scenario for providing a digital twin in Ditto of a device connected via Hono&lt;/figure&gt;

&lt;p&gt;Let’s assume for this tutorial that we have a device (e.g. containing a sensor) &lt;code class=&quot;highlighter-rouge&quot;&gt;demo-device&lt;/code&gt; which is capable of 
measuring temperature and humidity.&lt;/p&gt;

&lt;p&gt;This device sends the sensor telemetry data every 5 minutes via MQTT into the cloud in either of the following formats:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;temp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;23.42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;44.42&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;temp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;23.42&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;44.42&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We want to create a digital twin for this device in order to access the device’s sensor data as API via Eclipse Ditto.&lt;/p&gt;

&lt;h2 id=&quot;steps-in-hono&quot;&gt;Steps in Hono&lt;/h2&gt;

&lt;p&gt;The steps in order to get started with Eclipse Hono are documented in the 
&lt;a href=&quot;https://www.eclipse.org/hono/getting-started/&quot;&gt;Hono getting started&lt;/a&gt; and in a new 
&lt;a href=&quot;https://blog.bosch-si.com/developer/using-multi-tenancy-in-eclipse-hono/&quot;&gt;Blog post about using multi-tenancy in Eclipse Hono&lt;/a&gt;. 
We show them very briefly here as well but in order to comprehend what and why we are doing what we do please consult 
the Hono documentation.&lt;/p&gt;

&lt;h3 id=&quot;create-a-tenant&quot;&gt;Create a tenant&lt;/h3&gt;

&lt;p&gt;First of all, create a new Hono tenant (we chose the tenant name &lt;code class=&quot;highlighter-rouge&quot;&gt;org.eclipse.ditto&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;tenant-id&quot;: &quot;org.eclipse.ditto&quot;}'&lt;/span&gt; http://hono.eclipse.org:28080/tenant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;register-a-device&quot;&gt;Register a device&lt;/h3&gt;

&lt;p&gt;Register a new device in Hono (we chose the device-id &lt;code class=&quot;highlighter-rouge&quot;&gt;demo-device&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;device-id&quot;: &quot;demo-device&quot;}'&lt;/span&gt; http://hono.eclipse.org:28080/registration/org.eclipse.ditto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;add-a-device-credential&quot;&gt;Add a device credential&lt;/h3&gt;

&lt;p&gt;In order for the device being able to send telemetry it needs to authenticate. For that we will need to add a credential
for that device in Hono.&lt;/p&gt;

&lt;p&gt;We choose the &lt;code class=&quot;highlighter-rouge&quot;&gt;hashed-password&lt;/code&gt; type:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ PWD_HASH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'demo-device-password'&lt;/span&gt; | openssl dgst &lt;span class=&quot;nt&quot;&gt;-binary&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sha512&lt;/span&gt; | base64 &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; 0&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
  &quot;device-id&quot;: &quot;demo-device&quot;,
  &quot;type&quot;: &quot;hashed-password&quot;,
  &quot;auth-id&quot;: &quot;demo-device-auth&quot;,
  &quot;secrets&quot;: [{
      &quot;hash-function&quot; : &quot;sha-512&quot;,
      &quot;pwd-hash&quot;: &quot;'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD_HASH&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&quot;
  }]
}'&lt;/span&gt; http://hono.eclipse.org:28080/credentials/org.eclipse.ditto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;publish-data&quot;&gt;Publish data&lt;/h3&gt;

&lt;p&gt;You are now able to publish &lt;code class=&quot;highlighter-rouge&quot;&gt;telemetry&lt;/code&gt; (or also &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt;) data via the Hono HTTP adapter:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; demo-device-auth@org.eclipse.ditto:demo-device-password &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;temp&quot;: 23.07}'&lt;/span&gt; http://hono.eclipse.org:8080/telemetry
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; demo-device-auth@org.eclipse.ditto:demo-device-password &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;hum&quot;: 45.85}'&lt;/span&gt;  http://hono.eclipse.org:8080/telemetry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However as there is not yet a &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer&lt;/code&gt; listening for the messages, the Hono HTTP adapter will for example return an
error code &lt;code class=&quot;highlighter-rouge&quot;&gt;503 - Service unavailable&lt;/code&gt; when publishing a &lt;code class=&quot;highlighter-rouge&quot;&gt;telemetry&lt;/code&gt; message.&lt;/p&gt;

&lt;p&gt;Alternatively you can also publish telemetry data via MQTT:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mosquitto_pub &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'demo-device-auth@org.eclipse.ditto'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; demo-device-password &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; telemetry &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;temp&quot;: 23.07}'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mosquitto_pub &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'demo-device-auth@org.eclipse.ditto'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; demo-device-password &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; telemetry &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;hum&quot;: 45.85}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the following steps we will register the missing &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer&lt;/code&gt; in Ditto by creating a connection to the Hono tenant 
in Ditto’s connectivity.&lt;/p&gt;

&lt;h2 id=&quot;steps-in-ditto&quot;&gt;Steps in Ditto&lt;/h2&gt;

&lt;p&gt;We want to create a digital twin of the device connected to Eclipse Hono in order to access its latest reported state 
via the Ditto &lt;a href=&quot;https://www.eclipse.org/ditto/httpapi-overview.html&quot;&gt;HTTP API&lt;/a&gt;, in order to be able to find it in a population of digital twins or
in order to be notified about changed via an API optimized for the web.&lt;/p&gt;

&lt;h3 id=&quot;create-a-digital-twin&quot;&gt;Create a digital twin&lt;/h3&gt;

&lt;p&gt;The first step is to create a skeleton for the digital twin by creating a Ditto &lt;code class=&quot;highlighter-rouge&quot;&gt;Thing&lt;/code&gt;.&lt;br /&gt;
Notice that we authenticate with the sandbox user &lt;code class=&quot;highlighter-rouge&quot;&gt;demo5&lt;/code&gt; - a default &lt;a href=&quot;https://www.eclipse.org/ditto/basic-policy.html&quot;&gt;Policy&lt;/a&gt; is implicitly 
created so that only that user may read+write the created &lt;code class=&quot;highlighter-rouge&quot;&gt;Thing&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; demo5:demo &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;attributes&quot;: {
        &quot;location&quot;: &quot;Germany&quot;
    },
    &quot;features&quot;: {
        &quot;temperature&quot;: {
            &quot;properties&quot;: {
                &quot;value&quot;: null
            }
        },
        &quot;humidity&quot;: {
            &quot;properties&quot;: {
                &quot;value&quot;: null
            }
        }
    }
}'&lt;/span&gt; https://ditto.eclipse.org/api/2/things/org.eclipse.ditto:demo-device
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure the digital twin was created:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; demo5:demo https://ditto.eclipse.org/api/2/things/org.eclipse.ditto:demo-device
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;create-a-connection-to-hono&quot;&gt;Create a connection to Hono&lt;/h3&gt;

&lt;p&gt;Ditto recently added support for &lt;a href=&quot;https://www.eclipse.org/ditto/connectivity-manage-connections.html&quot;&gt;managing connections&lt;/a&gt; to foreign endpoints 
(currently to AMQP 1.0 or to AMQP 0.9.1). As Hono provides an AMQP 1.0 endpoint, a connection can be added in Ditto 
which connects to Hono and acts as a “northbound” &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following configuration for the connection has to be applied:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AMQP 1.0 hostname: &lt;code class=&quot;highlighter-rouge&quot;&gt;hono.eclipse.org&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;AMQP 1.0 port: &lt;code class=&quot;highlighter-rouge&quot;&gt;15672&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;username: &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer@HONO&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;password: &lt;code class=&quot;highlighter-rouge&quot;&gt;verysecret&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;sources:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;telemetry/org.eclipse.ditto&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;event/org.eclipse.ditto&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;test-the-connection&quot;&gt;Test the connection&lt;/h4&gt;

&lt;p&gt;Send the following “test connection” command via HTTP in order to test if the Ditto sandbox can connect to the Hono one.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; devops:devopsPw1! &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;targetActorSelection&quot;: &quot;/system/sharding/connection&quot;,
    &quot;headers&quot;: {
        &quot;aggregate&quot;: false
    },
    &quot;piggybackCommand&quot;: {
        &quot;type&quot;: &quot;connectivity.commands:testConnection&quot;,
        &quot;connection&quot;: {
            &quot;id&quot;: &quot;hono-sandbox-connection-1&quot;,
            &quot;connectionType&quot;: &quot;amqp-10&quot;,
            &quot;connectionStatus&quot;: &quot;open&quot;,
            &quot;uri&quot;: &quot;amqp://consumer@HONO:verysecret@hono.eclipse.org:15672&quot;,
            &quot;authorizationContext&quot;: [&quot;nginx:demo5&quot;],
            &quot;failoverEnabled&quot;: true,
            &quot;sources&quot;: [{
                &quot;addresses&quot;: [
                    &quot;telemetry/org.eclipse.ditto&quot;,
                    &quot;event/org.eclipse.ditto&quot;
                ]
            }]
        }
    }
}'&lt;/span&gt; https://ditto.eclipse.org/devops/piggyback/connectivity?timeout&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The result should be:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connectivity.responses:testConnection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connectionId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hono-sandbox-connection-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;testResult&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ditto-cluster=Success(successfully connected + initialized mapper)&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great, it looks like with the provided credentials we can connect to the Hono sandbox.&lt;/p&gt;

&lt;h4 id=&quot;define-a-payload-mapping&quot;&gt;Define a payload mapping&lt;/h4&gt;

&lt;p&gt;In the &lt;a href=&quot;https://www.eclipse.org/ditto/feed.xml#scenario&quot;&gt;scenario&lt;/a&gt; we described the payloads our device sends via MQTT. As those JSON payloads are missing
some information required for Ditto to map it to a &lt;a href=&quot;https://www.eclipse.org/ditto/protocol-overview.html&quot;&gt;Ditto Protocol&lt;/a&gt; message Ditto uses for 
updating the digital twin, we have to configure a &lt;a href=&quot;https://www.eclipse.org/ditto/connectivity-mapping.html&quot;&gt;payload mapping&lt;/a&gt; in order to add the 
missing information.&lt;/p&gt;

&lt;p&gt;Whenever one of the 3 following messages arrives at Ditto’s &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer&lt;/code&gt;, a payload mapping should be performed:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;temp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;23.42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;44.42&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;temp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;23.42&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;44.42&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A JavaScript based mapping which exactly does this could look like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapToDittoProtocolMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;textPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;bytePayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;contentType&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contentType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// only handle messages with content-type application/json&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jsonData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jsonData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;humidity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jsonData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;humidity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/features&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temperature&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;humidity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;humidity&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/features/temperature/properties/value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;humidity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/features/humidity/properties/value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;humidity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ditto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buildDittoProtocolMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;org.eclipse.ditto&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// the namespace we use&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;device_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Hono sets the authenticated device-id in this header&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;things&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// it is a Thing entity we want to update&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;twin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;// we want to update the twin&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;commands&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;modify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// command = modify&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;// copy all headers as Ditto headers&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to add this script to the connection we want to create, the newlines have to be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; so that
the script fits in a single line JSON string and the &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt; characters have to be replaced with &lt;code class=&quot;highlighter-rouge&quot;&gt;\&quot;&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;function mapToDittoProtocolMsg(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    headers,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    textPayload,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    bytePayload,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    contentType&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) {&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    if (contentType !== &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) {&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        return null;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    }&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    var jsonData = JSON.parse(textPayload);&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    var temperature = jsonData.temp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    var humidity = jsonData.hum;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    var path;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    var value;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    if (temperature != null &amp;amp;&amp;amp; humidity != null) {&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        path = &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/features&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        value = {&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;                temperature: {&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;                    properties: {&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;                        value: temperature&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;                    }&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;                },&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;                humidity: {&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;                    properties: {&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;                        value: humidity&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;                    }&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;                }&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;            };&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    } else if (temperature != null) {&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        path = &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/features/temperature/properties/value&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        value = temperature;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    } else if (humidity != null) {&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        path = &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/features/humidity/properties/value&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        value = humidity;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    }&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    if (!path || !value) {&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        return null;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    }&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    return Ditto.buildDittoProtocolMsg(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;org.eclipse.ditto&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        headers[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;device_id&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;twin&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        path,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        headers,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;        value&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;    );&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;create-the-connection&quot;&gt;Create the connection&lt;/h4&gt;

&lt;p&gt;We use the payload of the previous “test connection” command and add the JavaScript mapping script from above in order
to specify the “create connection” command, which we will use to create the connection between Eclipse Hono and Ditto:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; devops:devopsPw1! &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;targetActorSelection&quot;: &quot;/system/sharding/connection&quot;,
    &quot;headers&quot;: {
        &quot;aggregate&quot;: false
    },
    &quot;piggybackCommand&quot;: {
        &quot;type&quot;: &quot;connectivity.commands:createConnection&quot;,
        &quot;connection&quot;: {
            &quot;id&quot;: &quot;hono-sandbox-connection-1&quot;,
            &quot;connectionType&quot;: &quot;amqp-10&quot;,
            &quot;connectionStatus&quot;: &quot;open&quot;,
            &quot;uri&quot;: &quot;amqp://consumer@HONO:verysecret@hono.eclipse.org:15672&quot;,
            &quot;authorizationContext&quot;: [&quot;nginx:demo5&quot;],
            &quot;failoverEnabled&quot;: true,
            &quot;sources&quot;: [{
                &quot;addresses&quot;: [
                    &quot;telemetry/org.eclipse.ditto&quot;,
                    &quot;event/org.eclipse.ditto&quot;
                ]
            }],
            &quot;mappingContext&quot;: {
                &quot;mappingEngine&quot;: &quot;JavaScript&quot;,
                &quot;options&quot;: {
                    &quot;incomingScript&quot;: &quot;function mapToDittoProtocolMsg(\n    headers,\n    textPayload,\n    bytePayload,\n    contentType\n) {\n\n    if (contentType !== \&quot;application/json\&quot;) {\n        return null;\n    }\n\n    var jsonData = JSON.parse(textPayload);\n    var temperature = jsonData.temp;\n    var humidity = jsonData.hum;\n    \n    var path;\n    var value;\n    if (temperature != null &amp;amp;&amp;amp; humidity != null) {\n        path = \&quot;/features\&quot;;\n        value = {\n                temperature: {\n                    properties: {\n                        value: temperature\n                    }\n                },\n                humidity: {\n                    properties: {\n                        value: humidity\n                    }\n                }\n            };\n    } else if (temperature != null) {\n        path = \&quot;/features/temperature/properties/value\&quot;;\n        value = temperature;\n    } else if (humidity != null) {\n        path = \&quot;/features/humidity/properties/value\&quot;;\n        value = humidity;\n    }\n    \n    if (!path || !value) {\n        return null;\n    }\n\n    return Ditto.buildDittoProtocolMsg(\n        \&quot;org.eclipse.ditto\&quot;,\n        headers[\&quot;device_id\&quot;],\n        \&quot;things\&quot;,\n        \&quot;twin\&quot;,\n        \&quot;commands\&quot;,\n        \&quot;modify\&quot;,\n        path,\n        headers,\n        value\n    );\n}&quot;
                }
            }
        }
    }
}'&lt;/span&gt; https://ditto.eclipse.org/devops/piggyback/connectivity?timeout&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When establishing the connection + parsing the JavaScript worked, we get a success result as HTTP response again, 
otherwise an error message would be returned.&lt;/p&gt;

&lt;h4 id=&quot;retrieve-connection-metrics&quot;&gt;Retrieve connection metrics&lt;/h4&gt;

&lt;p&gt;After the connection was created, we can use the following command in order to retrieve the current connection status
and some metrics about how many messages were consumed:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; devops:devopsPw1! &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;targetActorSelection&quot;: &quot;/system/sharding/connection&quot;,
    &quot;headers&quot;: {
        &quot;aggregate&quot;: false
    },
    &quot;piggybackCommand&quot;: {
        &quot;type&quot;: &quot;connectivity.commands:retrieveConnectionMetrics&quot;,
        &quot;connectionId&quot;: &quot;hono-sandbox-connection-1&quot;
    }
}'&lt;/span&gt; https://ditto.eclipse.org/devops/piggyback/connectivity?timeout&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The result looks like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connectivity.responses:aggregatedResponse&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connectionId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hono-sandbox-connection-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;responsesType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connectivity.responses:retrieveConnectionMetrics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;responses&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connectivity.responses:retrieveConnectionMetrics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connectionId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hono-sandbox-connection-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connectionMetrics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connectionStatus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connectionStatusDetails&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Connected at 2018-04-30T12:43:13.050Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;inConnectionStatusSince&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2018-04-30T12:43:13.050Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;clientState&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CONNECTED&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sourcesMetrics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;addressMetrics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;event/org.eclipse.ditto-0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;statusDetails&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Started at 2018-04-30T12:43:13.038Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;messageCount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;telemetry/org.eclipse.ditto-0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;statusDetails&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Started at 2018-04-30T12:43:13.039Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;messageCount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lastMessageAt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2018-04-30T12:51:12.537Z&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;consumedMessages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;targetsMetrics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;test-the-integration&quot;&gt;Test the integration&lt;/h2&gt;

&lt;p&gt;Whenever the device now sends telemetry in its own JSON format&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the message count of the &lt;a href=&quot;https://www.eclipse.org/ditto/feed.xml#retrieve-connection-metrics&quot;&gt;connection metrics in Ditto&lt;/a&gt; should be increased by one&lt;/li&gt;
  &lt;li&gt;the digital twin with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Thing&lt;/code&gt; ID &lt;code class=&quot;highlighter-rouge&quot;&gt;org.eclipse.ditto:demo-device&lt;/code&gt; should receive the updated value which is also
reflected at the twin’s HTTP endpoint 
&lt;a href=&quot;https://demo5:demo@ditto.eclipse.org/api/2/things/org.eclipse.ditto:demo-device&quot;&gt;https://ditto.eclipse.org/api/2/things/org.eclipse.ditto:demo-device&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Verify that by simulate sending telemetry using the Hono HTTP adapter:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; demo-device-auth@org.eclipse.ditto:demo-device-password &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;temp&quot;: 14.51}'&lt;/span&gt; http://hono.eclipse.org:8080/telemetry
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; demo-device-auth@org.eclipse.ditto:demo-device-password &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;hum&quot;: 52.17}'&lt;/span&gt;  http://hono.eclipse.org:8080/telemetry

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; demo-device-auth@org.eclipse.ditto:demo-device-password &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;temp&quot;: 23.07, &quot;hum&quot;: 45.85}'&lt;/span&gt;  http://hono.eclipse.org:8080/telemetry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Try it out for yourself and give us (the Ditto and the Hono teams) feedback what you like or what could be improved.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Ditto&quot; class=&quot;docimage&quot; src=&quot;https://www.eclipse.org/ditto/images/ditto.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;</description>
	<pubDate>Wed, 02 May 2018 04:00:00 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: ECF Photon supports osgi.async intent</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-7326966142920811809</guid>
	<link>http://eclipseecf.blogspot.com/2018/05/ecf-photon-supports-osgiasync-intent.html</link>
	<description>In a previous post, I indicated that &lt;a href=&quot;http://eclipseecf.blogspot.com/2018/04/ecf-photon-supports-osgi-r7.html&quot;&gt;ECF Photon  will support OSGi R7&lt;/a&gt;.   What does this mean for  developers?&lt;br /&gt;&lt;br /&gt;&lt;b&gt;osgi.async&lt;/b&gt; Remote Service Intent&lt;br /&gt;&lt;br /&gt;The &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html&quot;&gt;OSGi R7 Remote Services specification&lt;/a&gt; has been enhanced with new &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html#i1693415&quot;&gt;Remote Service intents&lt;/a&gt;.  Remote Service Intents allow remote service authors to specify requirements on the underlying distribution system.   The &lt;b&gt;osgi.async&lt;/b&gt; intent allows the service interface to use return types like Java8's &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html&quot;&gt;CompletableFuture&lt;/a&gt; or OSGi's &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/util.promise.html&quot;&gt;Promise&lt;/a&gt;.   When a distribution provider supports this intent, the remote service proxy will automatically implement the asynchronous/non-blocking behavior.&lt;br /&gt;&lt;br /&gt;For example, consider a service interface:&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;When an implementation of this service is registered and exported as a remote service:&lt;br /&gt;&lt;br /&gt; Then when a consumer discovers, imports and the remote service is injected by DS:&lt;br /&gt;&lt;br /&gt; The injected helloService instance will automatically implement the asynchronous/non-blocking remote call via the distribution provider.   No need for the consumer to implement anything other than calling the 'hello' method and handling the response via implementing whenComplete.   The Java8 CompletionStage, Future, and OSGi's Promise are also supported return types.&lt;br /&gt;&lt;br /&gt;This makes it very easy to define, implement, and efficiently use loosely-coupled asynchronous remote services.   It also makes remote service contracts transport independent, allowing the swapping of &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot;&gt;distribution providers&lt;/a&gt; or custom providers without changes to the service interface contract.</description>
	<pubDate>Tue, 01 May 2018 17:23:13 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>Nikhil Nanivadekar: Eclipse Collections: A Community Story</title>
	<guid isPermaLink="false">https://medium.com/p/dc63d0226fc2</guid>
	<link>https://medium.com/@nikhilnanivadekar/eclipse-collections-a-community-story-dc63d0226fc2?source=rss-4285d8a2ca86------2</link>
	<description>&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/proxy/1*FwXYmKTjYM1og40DIi5EBw.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Eclipse Collections has optimized List, Set and Map implementations and adds more specialized data structures like Bag, Multimap, BiMap. Since, most of the Eclipse Collections implementations extend the respective JDK collections interfaces, we ensure users can have inter-op with the JDK. The library also provides a rich suite of primitive Lists, Sets, Bags, Stacks and Maps for all 8 primitives. Eclipse Collections provides lazy and eager execution patterns, it provides Mutable, Unmodifiable and Immutable collection types. Eclipse Collections has 80+ iteration patterns/API on the collections itself. With so many rich features and ability to co-exist with the JDK, Eclipse Collections enhances the Java developers’ experience.&lt;/p&gt;&lt;p&gt;Eclipse Collections is a part of the &lt;a href=&quot;https://wiki.openjdk.java.net/display/quality/Quality+Outreach&quot;&gt;Quality Outreach&lt;/a&gt; program and we run regression builds for Java 8, 9, 10 and 11-EA. The library helps identify bugs and regression breaks in the JDK and IDEs like IntelliJ Idea and Eclipse.&lt;/p&gt;&lt;p&gt;Recently, we discovered that the community is helping us by adding &lt;a href=&quot;https://github.com/FasterXML/jackson-datatypes-collections/issues/29&quot;&gt;Jackson serialization support&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Last year, we made the decision to participate in the Eclipse Release train. Thanks to the extensive support from the developer community, the library is integrated in the Eclipse Photon release!&lt;/p&gt;&lt;p&gt;As of writing of this blog, we have &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/pulls&quot;&gt;12 open Pull Requests&lt;/a&gt; and &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/issues&quot;&gt;65 open issues&lt;/a&gt;. The &lt;a href=&quot;http://eclipse.org/collections&quot;&gt;Eclipse Collections website&lt;/a&gt; is available in 6 languages. These issues help us understand the requirements and the features which developers and users of the library care about. So far we have 37 contributors to the project. We have a &lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections/who&quot;&gt;project team&lt;/a&gt; comprised of 5 committers. In order to help first time contributors choose a contribution, we add a “&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&quot;&gt;good first issue&lt;/a&gt;” label.&lt;/p&gt;&lt;p&gt;I was voted as a project lead of Eclipse Collections in April ’17. In the past year, the framework has grown by leaps and bounds. I did a &lt;a href=&quot;https://medium.com/@nikhilnanivadekar/november-java-user-group-tour-2017-dbb103b80532&quot;&gt;UK, Ireland Java User Group tour&lt;/a&gt; in November ’17. I am writing this blog from the Bengaluru airport on my way to the fourth stop of my &lt;a href=&quot;https://medium.com/@nikhilnanivadekar/india-java-user-group-tour-2018-ecdd10e2543d&quot;&gt;India Java User Group tour&lt;/a&gt;. These JUG tours are a part of the project’s outreach initiative. I can’t help but be amazed at the maturity of the Eclipse Collections framework. But there is still a lot of work to be done, we would like to add more symmetry between the primitive and object side, make the framework modularized (similar to the JDK). The future is bright for the framework and you can help me keep it vibrant by adopting, contributing and evangelizing Eclipse Collections.&lt;/p&gt;&lt;p&gt;If you like it, show your support, put a star on our &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;GitHub Repo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/docs/guide.md&quot;&gt;Eclipse Collections Reference Guide&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata&quot;&gt;Eclipse Collections Kata&lt;/a&gt; to learn the basic concepts of the framework.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;Contribution guidelines&lt;/a&gt; to help get started contributing to the framework. If you have any questions, feel free to ask, we will be happy to help.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@donraab&quot;&gt;Eclipse Collections by example blog series&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Refactoring Collections: Making Your Java Streams Leaner, Meaner, and Cleaner: &lt;a href=&quot;https://github.com/vmzakharov/refactor-to-ec/blob/master/docs/RefactorToEcIntro.pdf&quot;&gt;Presentation&lt;/a&gt;, &lt;a href=&quot;https://youtu.be/Uje4vA3tRBI&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Java Evolution of Eclipse Collections: &lt;a href=&quot;https://www.infoq.com/articles/eclipse-collections&quot;&gt;Article&lt;/a&gt;, &lt;a href=&quot;https://www.infoq.com/presentations/java-eclipse-collections&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=dc63d0226fc2&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 28 Apr 2018 15:08:10 +0000</pubDate>
</item>
<item>
	<title>Niko Stotz: High-Performance Interpreters for JetBrains MPS</title>
	<guid isPermaLink="false">https://www.nikostotz.de/blog/?p=342</guid>
	<link>https://www.nikostotz.de/blog/high-performance-interpreters-for-jetbrains-mps/</link>
	<description>&lt;p&gt;&lt;b&gt;tl;dr&lt;/b&gt; An interpreter framework prototype based on &lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM / Truffle&lt;/a&gt; shows two orders of magnitude better performance than the &lt;a href=&quot;http://mbeddr.com/interpreter/Interpreter.html&quot;&gt;previous implementation&lt;/a&gt;. Vote for &lt;a href=&quot;https://youtrack.jetbrains.com/issue/MPS-27653&quot;&gt;Java Annotation Processor support in MPS&lt;/a&gt; to help this effort.&lt;/p&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;At the great &lt;a href=&quot;https://confluence.jetbrains.com/display/MPS/JetBrains+MPS+Community+Meetup%3A+Agenda&quot;&gt;MPS Meetup&lt;/a&gt; last week in Munich I had a chance to give a talk on the &lt;a href=&quot;http://mbeddr.com/interpreter/Interpreter.html&quot;&gt;MPS Interpreter Framework&lt;/a&gt; I worked on at itemis. The &lt;a href=&quot;https://nikostotz.de/mps/Interpreter-MPS.pdf&quot;&gt;slides are available&lt;/a&gt;, and the talk was recorded (I’ll add a link once the video is published).&lt;br /&gt;
We had an enthusiastic audience with lots of questions. This skewed my timing a bit, thus I could only spend a few minutes on my latest experiments in this field: A new take on the interpreter framework, based on &lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM / Truffle&lt;/a&gt;. &lt;a href=&quot;https://medium.com/@dslmeinte/the-munich-mps-meetup-2018-my-impression-91fa280e82e2&quot;&gt;Meinte Boersma&lt;/a&gt; inspired this blog post to add more details — thanks a lot for the motivation, Meinte!&lt;/p&gt;
&lt;p&gt;To shortly recap the first part of my talk: Interpreters are easy to implement, especially if an MPS language avoids the usual boilerplate and integration in the typesystem gets rid of &lt;tt&gt;instanceof&lt;/tt&gt; and casting orgies. This is pretty much the the state of the existing Interpreter Framework, which is used in a lot of real-world projects (e.g. &lt;a href=&quot;http://voelter.de/data/pub/kernelf-reference.pdf&quot;&gt;KernelF&lt;/a&gt; or at the Dutch tax office).&lt;/p&gt;
&lt;p&gt;This leaves us with one big drawback of interpreters: Usually, their performance is pretty bad. Enter GraalVM!&lt;br /&gt;
&lt;b&gt;GraalVM&lt;/b&gt; is a highly optimized just-in-time-compiler for Java. It also provides an API to the code running on the JVM, and thus can be leveraged by Truffle.&lt;br /&gt;
&lt;b&gt;Truffle&lt;/b&gt; is a library to implement high-performance interpreters, it uses all the tricks in the book: AST rewriting, partial evaluation, polymorphic inline caches, …, you name it. This leads to &lt;a href=&quot;https://www.graalvm.org/docs/examples/java-performance-examples/&quot;&gt;pretty impressive performance&lt;/a&gt;, like 90 % of the hand-optimized V8 JavaScript engine. Truffle makes use of GraalVM, but also runs on a regular JVM.&lt;br /&gt;
Another part of GraalVM ecosystem is called &lt;b&gt;Polyglot&lt;/b&gt;. It allows interaction and optimization across languages, e.g. starting a JavaScript program, calling an R routine, which calls Ruby, which uses JavaScript, and all of this without data serialization or performance drawback.&lt;br /&gt;
Incidentally, Oracle &lt;a href=&quot;https://blogs.oracle.com/developers/announcing-graalvm&quot;&gt;released GraalVM 1.0&lt;/a&gt; this week. We might see a lot more traction in this field.&lt;/p&gt;
&lt;p&gt;Based on the first non-representative, non-exhaustive tests, GraalVM delivers big time:&lt;br /&gt;
&lt;img alt=&quot;&quot; class=&quot;aligncenter size-large wp-image-345&quot; height=&quot;424&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/04/interpreterPerformance-1024x678.png&quot; width=&quot;640&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;Truffle&lt;/i&gt; runs within MPS, but on a regular JVM (i.e. without GraalVM JIT).&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Legacy&lt;/i&gt; is the existing interpreter framework within MPS.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Graal skewed&lt;/i&gt; runs Truffle within MPS on a GraalVM JIT. I must have messed up something there, as the performance should be better than pure Truffle. Also, MPS itself felt quite sluggish with this configuration.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Graal extrapolated&lt;/i&gt; uses the stand-alone version (outside MPS) as a comparison what should be achievable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note that the test program was quite basic, probably leading to overly optimistic results. However, I used a pretty old version of GraalVM (shipped with JDK9 on Windows) and Truffle (0.30), and reportedly newer versions perform a lot better. So in total, I think we can expect two orders of magnitude better performance.&lt;/p&gt;
&lt;h2&gt;Technical Details&lt;/h2&gt;
&lt;h3&gt;GraalVM&lt;/h3&gt;
&lt;p&gt;GraalVM is available in a special build of &lt;a href=&quot;https://www.graalvm.org/downloads/&quot;&gt;Java8 on Linux and Mac&lt;/a&gt;. Java9 on Windows and Mac and Java10 on Linux also contain a (probably outdated) version of GraalVM.&lt;/p&gt;
&lt;p&gt;As my current development environment is on Windows, I first tried to build the source version of GraalVM on Windows. I finally got it built, but the resulting &lt;tt&gt;java.exe&lt;/tt&gt; segfaulted even on &lt;tt&gt;java.exe -version&lt;/tt&gt;.&lt;br /&gt;
The next best way was to get MPS running on Java9. If we’re using Java8 for compilation and Java9 only as a runtime environment, we only need &lt;a href=&quot;https://youtrack.jetbrains.com/issue/MPS-27133&quot;&gt;a few adjustments&lt;/a&gt; to the MPS sources. I put my &lt;a href=&quot;https://github.com/enikao/MPS/tree/java9-annotationProcessor-truffle&quot;&gt;hack on github&lt;/a&gt;. Be warned: it contains a few hard-coded local paths!&lt;/p&gt;
&lt;h3&gt;Truffle&lt;/h3&gt;
&lt;p&gt;Truffle relies on &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/javax/annotation/processing/Processor.html&quot;&gt;Java Annotation Processors&lt;/a&gt;, a standardized way to extend the Java compiler.&lt;br /&gt;
MPS internally uses the Eclipse java compiler, which fully supports annotation processors. The Eclipse java compiler also supports both the IntelliJ compiler infrastructure and the &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/javax/tools/JavaCompiler.html&quot;&gt;Java standard for calling compilers&lt;/a&gt;, but MPS uses a hand-knitted interface to the compiler without annotation processor support. I opened a &lt;a href=&quot;https://youtrack.jetbrains.com/issue/MPS-27653&quot;&gt;Feature request for MPS to support Annotation Processors&lt;/a&gt;, so please upvote if you’re interested in high-performance interpreters.&lt;br /&gt;
My aforementioned hack also contains changes to enable the required annotation processors within MPS.&lt;/p&gt;
&lt;h3&gt;TruffleInterpreter Language&lt;/h3&gt;
&lt;p&gt;I started the language from scratch for several reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The existing Interpreter language was the first thing I implemented in MPS, and I learned a lot since then.&lt;/li&gt;
&lt;li&gt;The interpreter should become its own language aspect, thus requiring considerable changes anyway.&lt;/li&gt;
&lt;li&gt;Understanding Truffle and generating the correct code for it is hard enough, I didn’t want to add the burden of non-fitting abstractions.&lt;/li&gt;
&lt;li&gt;We need quite some additional information for the new backend.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, I kept the nice parts regarding concise syntax and typesystem integration.&lt;/p&gt;
&lt;p&gt;I did not spend much time yet on beautifying the language, but I think the general idea is already recognizable.&lt;/p&gt;
&lt;p&gt;As a &lt;a href=&quot;https://github.com/enikao/mps-interpreter-graalvm-truffle&quot;&gt;playground&lt;/a&gt;, I implemented &lt;a href=&quot;https://github.com/graalvm/simplelanguage&quot;&gt;SimpleLanguage&lt;/a&gt; as shipped with Truffle in both MPS interpreter frameworks. (Please find &lt;a href=&quot;https://www.nikostotz.de/blog/feed/#completeInterpreters&quot;&gt;screenshots of the complete interpreters&lt;/a&gt; at the end of this post.)&lt;/p&gt;
&lt;p&gt;Let’s look at a few examples from both interpreters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;Invoke Expression&lt;/b&gt;&lt;br /&gt;
Invoke maps quite directly.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Legacy&lt;br /&gt;
&lt;img alt=&quot;&quot; class=&quot;size-large wp-image-354&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/04/legacyInvoke.png&quot; /&gt;&lt;br /&gt;
Truffle&lt;br /&gt;
&lt;img alt=&quot;&quot; class=&quot;size-large wp-image-353&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/04/invoke.png&quot; /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Plus Expression&lt;/b&gt;&lt;br /&gt;
Plus is also similar, but we can spot some differences:&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mixtures of types are handled automatically by Truffle&lt;/li&gt;
&lt;li&gt;Truffle adds programmatic type guards for the String overload&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Legacy&lt;br /&gt;
&lt;img alt=&quot;&quot; class=&quot;size-large wp-image-355&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/04/legacyPlus.png&quot; /&gt;&lt;br /&gt;
Truffle&lt;br /&gt;
&lt;img alt=&quot;&quot; class=&quot;size-large wp-image-352&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/04/add.png&quot; /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Typemapping&lt;/b&gt;&lt;br /&gt;
The actual typemapping is very similar. However, Truffle needs to know about the run-time (aka interpretation-time) typesystem including type checks, type casts, and implicit casts.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Legacy&lt;br /&gt;
&lt;img alt=&quot;&quot; class=&quot;size-large wp-image-356&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/04/legacyTypeMapping.png&quot; /&gt;&lt;br /&gt;
Truffle&lt;br /&gt;
&lt;img alt=&quot;&quot; class=&quot;size-large wp-image-357&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/04/typeMapping.png&quot; /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Truffle variant contains a few more hints only accessible via inspector.&lt;/p&gt;
&lt;p&gt;I guess a converter from legacy to Truffle interpreters should be feasible, but the result might not run out-of-the-box.&lt;/p&gt;
&lt;h3&gt;Implementation&lt;/h3&gt;
&lt;p&gt;The implementation faced three main issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;Generating the correct code for Truffle&lt;/b&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Truffle is very picky about what code it accepts, e.g. some fields &lt;i&gt;must&lt;/i&gt; be &lt;tt&gt;final&lt;/tt&gt;, but others &lt;i&gt;must not&lt;/i&gt;. There seems no way for annotation processors to emit messages during compilation. Thus, we generate some code, and it either works or not, without any hints (in some cases we pass the compilation steps and get hints during execution).
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Providing the generated truffle interpreter to the Truffle runtime&lt;/b&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Truffle expects all its languages to be available in its &lt;tt&gt;classpath&lt;/tt&gt; at startup.&lt;br /&gt;
So currently, we cannot change the interpreters after the first invocation of any (!) interpreter.&lt;br /&gt;
There might be a way to add languages at runtime, but my hunch is this would get us into never-ending classloading issues. See &lt;a href=&quot;https://www.nikostotz.de/blog/feed/#oneForAll&quot;&gt;below&lt;/a&gt; for thoughts on a better approach.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Running annotation processors the same time as the regular compilation&lt;/b&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The code generated by MPS contains calls to classes only generated by Truffle’s annotation processors, so we have to execute both in the same step.&lt;br /&gt;
Re-implementing Truffle’s generators in MPS is also not an option, both from their size and complexity.&lt;/p&gt;
&lt;p&gt;This picture compares the input MPS Concepts mentioned in the interpreter, Java source files generated by MPS, and produced Java classes&lt;br /&gt;
&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-358&quot; height=&quot;839&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/04/concepts-sources-classes.png&quot; width=&quot;528&quot; /&gt;&lt;/p&gt;
&lt;p&gt;A small snippet of the Truffle-generated code. Who wants to tell me where I took it from?&lt;/p&gt;
&lt;div class=&quot;codecolorer-container java default&quot; style=&quot;overflow: auto; white-space: nowrap; width: 435px;&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;div&gt;1&lt;br /&gt;2&lt;br /&gt;3&lt;br /&gt;4&lt;br /&gt;5&lt;br /&gt;6&lt;br /&gt;7&lt;br /&gt;8&lt;br /&gt;9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;br /&gt;13&lt;br /&gt;14&lt;br /&gt;15&lt;br /&gt;16&lt;br /&gt;17&lt;br /&gt;18&lt;br /&gt;19&lt;br /&gt;20&lt;br /&gt;21&lt;br /&gt;22&lt;br /&gt;23&lt;br /&gt;24&lt;br /&gt;25&lt;br /&gt;26&lt;br /&gt;27&lt;br /&gt;28&lt;br /&gt;29&lt;br /&gt;30&lt;br /&gt;31&lt;br /&gt;32&lt;br /&gt;33&lt;br /&gt;34&lt;br /&gt;35&lt;br /&gt;36&lt;br /&gt;37&lt;br /&gt;38&lt;br /&gt;39&lt;br /&gt;40&lt;br /&gt;41&lt;br /&gt;&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;div class=&quot;java codecolorer&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #003399;&quot;&gt;Object&lt;/span&gt; executeGeneric_generic1&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;VirtualFrame frameValue, &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;int&lt;/span&gt; state&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;
  &lt;span style=&quot;color: #003399;&quot;&gt;Object&lt;/span&gt; leftValue_ &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;left_&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;executeGeneric&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;frameValue&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
  &lt;span style=&quot;color: #003399;&quot;&gt;Object&lt;/span&gt; rightValue_ &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;right_&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;executeGeneric&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;frameValue&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
  &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;state &lt;span style=&quot;color: #339933;&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; leftValue_ &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;instanceof&lt;/span&gt; &lt;span style=&quot;color: #003399;&quot;&gt;Long&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;
    &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;long&lt;/span&gt; leftValue__ &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Long&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;leftValue_&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
    &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;rightValue_ &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;instanceof&lt;/span&gt; &lt;span style=&quot;color: #003399;&quot;&gt;Long&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;
      &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;long&lt;/span&gt; rightValue__ &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Long&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;rightValue_&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
      &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;
        &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;specialization&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;leftValue__, rightValue__&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
      &lt;span style=&quot;color: #009900;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #003399;&quot;&gt;ArithmeticException&lt;/span&gt; var14&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;
        Lock lock &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;getLock&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
        lock.&lt;span style=&quot;color: #006633;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
        &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;
          &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;exclude_&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;|=&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
          &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;state_&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #cc66cc;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
        &lt;span style=&quot;color: #009900;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;
          lock.&lt;span style=&quot;color: #006633;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
        &lt;span style=&quot;color: #009900;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
        &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;executeAndSpecialize&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;leftValue__, rightValue__&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
      &lt;span style=&quot;color: #009900;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;
    &lt;span style=&quot;color: #009900;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;
  &lt;span style=&quot;color: #009900;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
  &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;state &lt;span style=&quot;color: #339933;&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; SLxTypesGen.&lt;span style=&quot;color: #006633;&quot;&gt;isImplicitBigInteger&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;state &lt;span style=&quot;color: #339933;&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;48&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;4&lt;/span&gt;, leftValue_&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;
    &lt;span style=&quot;color: #003399;&quot;&gt;BigInteger&lt;/span&gt; leftValue__ &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; SLxTypesGen.&lt;span style=&quot;color: #006633;&quot;&gt;asImplicitBigInteger&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;state &lt;span style=&quot;color: #339933;&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;48&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;4&lt;/span&gt;, leftValue_&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
    &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;SLxTypesGen.&lt;span style=&quot;color: #006633;&quot;&gt;isImplicitBigInteger&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;state &lt;span style=&quot;color: #339933;&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;192&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;6&lt;/span&gt;, rightValue_&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;
      &lt;span style=&quot;color: #003399;&quot;&gt;BigInteger&lt;/span&gt; rightValue__ &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; SLxTypesGen.&lt;span style=&quot;color: #006633;&quot;&gt;asImplicitBigInteger&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;state &lt;span style=&quot;color: #339933;&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;192&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;6&lt;/span&gt;, rightValue_&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
      &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;specialization&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;leftValue__, rightValue__&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
    &lt;span style=&quot;color: #009900;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;
  &lt;span style=&quot;color: #009900;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
  &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;state &lt;span style=&quot;color: #339933;&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;8&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;guardSpecialization&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;rightValue_, leftValue_&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;
    &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;specialization&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;leftValue_, rightValue_&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
  &lt;span style=&quot;color: #009900;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;
    CompilerDirectives.&lt;span style=&quot;color: #006633;&quot;&gt;transferToInterpreterAndInvalidate&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
    &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;executeAndSpecialize&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;leftValue_, rightValue_&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
  &lt;span style=&quot;color: #009900;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color: #009900;&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lifecycle&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-359&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/04/TruffleMps.png&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We start by defining our Language &lt;tt&gt;SimpleLanguage&lt;/tt&gt; as usual. As an example, we define a concept &lt;tt&gt;SlPlus&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;We create a TruffleInterpreter for &lt;tt&gt;SimpleLanguage&lt;/tt&gt;. In the interpreter, we create the evaluator for &lt;tt&gt;SlPlus&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;The generator of TruffleInterpreter turns the evaluator for &lt;tt&gt;SlPlus&lt;/tt&gt; into a Java class named &lt;tt&gt;SlPlusNode&lt;/tt&gt; that inherits from &lt;tt&gt;TruffleNode&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Once we want to evaluate our instance model of &lt;tt&gt;SimpleLanguage&lt;/tt&gt;, the TruffleInterpreter framework converts all instances of &lt;tt&gt;SlPlus&lt;/tt&gt; (i.e. MPS nodes of concept SlPlus) into instances of &lt;tt&gt;SlPlusNode&lt;/tt&gt; (i.e. Java objects of class SlPlusNode).&lt;/li&gt;
&lt;li&gt;The TruffleInterpreter framework invokes the &lt;tt&gt;TruffleRuntime&lt;/tt&gt; on the recently created &lt;tt&gt;SlPlusNode&lt;/tt&gt; object.&lt;/li&gt;
&lt;li&gt;We can retrieve the result of our interpretation, e.g. a &lt;tt&gt;java.lang.Long&lt;/tt&gt; object, from &lt;tt&gt;TruffleRuntime&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Truffle requires all evaluated nodes to be TruffleNodes to do its magic.&lt;br /&gt;
This implies some overhead to convert MpsNodes into TruffleNodes, but allows us to execute the interpreter without model access afterwards. We can even run the interpreter in a different thread and update our editor once the calculation is done.&lt;/p&gt;
&lt;h2&gt;Language Interoperability&lt;/h2&gt;
&lt;p&gt;The Polyglot part of GraalVM allows arbitrary mixture of languages. The prototype contains an example to call JavaScript:&lt;br /&gt;
&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-360&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/04/batman.png&quot; /&gt;&lt;br /&gt;
(You &lt;a href=&quot;https://www.destroyallsoftware.com/talks/wat&quot;&gt;have to know this joke!&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Polyglot supports language interoperability with complex types, but I didn’t implement this yet in this prototype.&lt;/p&gt;
&lt;h2&gt;Future Work&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;Turn Prototype into Production Code&lt;/b&gt;&lt;br /&gt;
This blog post is about a prototype, meant to explore the possibilities, pitfalls and benefits. It breaks quickly if you try something different. It does not implement all features of Truffle. The generator does not need to be rewritten from scratch, but needs a serious overhaul. The language is too close to Truffle specifics, and thus hard to use if you don’t know about Truffle.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Interpreter Language Aspect&lt;/b&gt;&lt;br /&gt;
Interpreters should be a separate language aspect, the same way as typesystem or constraints. At the MPS Meetup we agreed that executing your models is highly valuable in lots of domains; a language aspect emphasizes this importance.&lt;br /&gt;
Also, having a language aspect should improve integration with the rest of the MPS ecosystem and ease classloading for interpreters.&lt;/p&gt;
&lt;p&gt;&lt;b id=&quot;oneForAll&quot;&gt;One Interpreter for all Languages&lt;/b&gt;&lt;br /&gt;
The current implementation registers every interpreter as its own Truffle language; the idea was to leverage Polyglot for language interaction. However, this leads to classloading issues.&lt;/p&gt;
&lt;p&gt;An alternative would be to look at interpreters similar to editors: In MPS, we have a standard editor for all concepts. If we need to, we can provide other editors triggered by editor hints. Similarly, we could have one standard language (from a Truffle point of view), and all interpreters contribute to this standard Truffle language. We might register a few secondary Truffle languages by default, so we don’t have to restart MPS as soon as anybody wants to use an “interpreter hint”.&lt;/p&gt;
&lt;p&gt;This should maintain MPS language extensibility, as any MPS language can contribute standard interpreters for any concept, or might register secondary interpreters with an “interpreter hint”.&lt;/p&gt;
&lt;p&gt;I’m not sure yet what to do about nodes without any known interpreter. We might want to ignore them, or traverse their subnodes to find something we can interpret.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Fine-tuning MpsNode → TruffleNode Conversion&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;The current implementation converts an arbitrary selection of MpsNodes into TruffleNodes prior to invoking the interpreter. We could think of other approaches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convert the starting node and all contained and related nodes up to a specific depth; At the end of each branch, we’d insert a “ReloadNode” to convert more nodes once it’s needed.&lt;/li&gt;
&lt;li&gt;We could keep the converted TruffleNodes in memory and update them on any changes to the underlying MpsNodes (aka “Shadow model”).&lt;/li&gt;
&lt;li&gt;It should be feasible to make our TruffleNodes &lt;a id=&quot;serializable&quot;&gt;&lt;/a&gt;serializable. Thus, we could save and reload them on MPS restart, or even execute them outside MPS.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Typesystem Integration&lt;/b&gt;&lt;br /&gt;
As mentioned above, the Truffle interpreter needs to know a lot about runtime types. At least for some of the information, we might be able to infer it from the MPS typesystem aspect.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Scoping Integration&lt;/b&gt;&lt;br /&gt;
If our interpreted language had nested scopes, maybe even including shadowing, the interpreter needs to know this. We might be able to infer this knowledge from the MPS constraints aspect.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;DSL for Objects&lt;/b&gt;&lt;br /&gt;
Polyglot supports direct interaction between different languages on complex types. I only scratched this topic yet, but so far this seems to be very exiting both to interact with non-MPS Truffle languages (GraalVM ships with implementations of JavaScript, R, and Ruby) and to enable language composition at runtime.&lt;/p&gt;
&lt;p&gt;Truffle bases the interaction on a concept called Shapes; I’m pretty sure there could be a DSL to ease their usage.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Debugger Integration&lt;/b&gt;&lt;br /&gt;
For smaller interpreted programs, something similar to the Trace Explorer available for the legacy Interpreter could be very useful.&lt;/p&gt;
&lt;p&gt;GraalVM supports exposing the interpreted program via the standard JVM debugging APIs, including breakpoints and introspection. Contrary to popular belief, a Java program &lt;i&gt;can&lt;/i&gt; debug itself, as long as the debugger and the target (i.e. interpreter) run in different threads. So we might be able to use the debugging UI included in MPS (as inherited from IntelliJ) to debug our interpreted program. A long time ago, I wrote a proof-of-concept of this idea for the legacy Interpreter, so we know we can get to the appropriate APIs.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Ahead-of-Time Compilation Support&lt;/b&gt;&lt;br /&gt;
A yet unmentioned part of GraalVM is called Sulong: An ahead-of-time-compiler for Truffle languages. I have no experience with Sulong, so I can only guess about its possibilities.&lt;br /&gt;
Especially in combination with &lt;a href=&quot;https://www.nikostotz.de/blog/feed/#serializable&quot;&gt;serializable&lt;/a&gt; TruffleNodes this might lead to production-ready performance outside of MPS, thus rendering a separate implementation of the same logic in a generator obsolete.&lt;br /&gt;
&lt;i&gt;Edit: &lt;a href=&quot;https://www.nikostotz.de/blog/feed/#comment-2429&quot;&gt;I mixed up Sulong and SubstrateVM&lt;/a&gt;, as Oleg points out in the comments.&lt;/i&gt;&lt;/p&gt;
&lt;h2 id=&quot;completeInterpreters&quot;&gt;Appendix: Complete Interpreters&lt;/h2&gt;
&lt;p&gt;Legacy&lt;br /&gt;
&lt;a href=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/04/slLegacy.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;size-large wp-image-350&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/04/slLegacy-467x1024.png&quot; width=&quot;467&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Truffle&lt;br /&gt;
&lt;a href=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/04/sl.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;size-large wp-image-351&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/04/sl.png&quot; width=&quot;467&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 27 Apr 2018 16:57:18 +0000</pubDate>
        <enclosure url="https://www.nikostotz.de/blog/wp-content/uploads/2018/04/interpreterPerformance-1024x678.png" length="2854" type="image/png"/>
</item>
<item>
	<title>Mikael Barbero: Scaling up the Continuous Integration infrastructure for Eclipse Foundation’s projects</title>
	<guid isPermaLink="false">https://medium.com/p/6fd60d4dc41d</guid>
	<link>https://medium.com/@mikael.barbero/scaling-up-the-continuous-integration-infrastructure-for-eclipse-foundations-projects-6fd60d4dc41d?source=rss-4a3bd8487ad8------2</link>
	<description>&lt;blockquote&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/blockquote&gt;&lt;blockquote&gt;Projects hosted by the Eclipse Foundation will soon benefit from a brand new enterprise-grade continuous integration (CI) infrastructure. Expected improvements are: resiliency, scalability and nimbleness. We are doing this move with tremendous support from our friends at &lt;a href=&quot;https://www.cloudbees.com&quot;&gt;CloudBees&lt;/a&gt; and &lt;a href=&quot;http://redhat.com&quot;&gt;RedHat&lt;/a&gt; with their respective products &lt;strong&gt;Jenkins Enterprise&lt;/strong&gt; and &lt;strong&gt;OpenShift Container Platform&lt;/strong&gt;.&lt;/blockquote&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/640/1*w3pg3MQ5UpYM2FUmzADUgA.jpeg&quot; /&gt;&lt;a href=&quot;https://www.flickr.com/photos/efandorin/&quot;&gt;https://www.flickr.com/photos/efandorin/&lt;/a&gt; CC BY-NC-ND 2.0&lt;/figure&gt;&lt;p&gt;A decade ago or so, the Eclipse Foundation started the continuous integration (CI) As A Service adventure by providing a &lt;strong&gt;single, shared, Hudson instance&lt;/strong&gt; to its projects. It has been an immediate success. It helped projects to get more frequent integration builds and more stable releases. Despite its success, the solution had a lot of drawbacks. First, we had to find a set of plugins that were fitting everybody and that were working well together. It ended with installing only the common denominator, which was frustrating for projects which wanted to use additional plugins. Second drawback was about finding a time window for maintenance operations: it had become harder and harder. With so many projects, the utilization was close to 24/7. Updating or installing new projects was requiring a lot of coordination overhead. Third, victim of its own success, the shared instance was sometimes unstable and any downtime was affecting all projects. Finally, while this model scaled pretty well in term of computing resources (we could add more agents easily), resources were shared and it was easy for a project to (unintentionally) starve others.&lt;/p&gt;&lt;p&gt;In late 2011, the &lt;a href=&quot;https://www.eclipse.org/community/eclipse_newsletter/2015/may/article2.php&quot;&gt;Common Build Infrastructure (CBI) initiative ramped up&lt;/a&gt;. It had 3 goals:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Make it really easy to copy and modify the source&lt;/li&gt;&lt;li&gt;Make it really easy to build and test the modifications&lt;/li&gt;&lt;li&gt;Make it really easy to contribute a change&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;With these goals set up, it soon became clear that the single Hudson instance was not a good fit. To reach these goals, a project needs to build and test each and every gerrit review / pull request it gets from the community. As such, build jobs will be running more often, automatically and not necessarily under the control of the project team (build can be trigger by a new contribution from someone external to the team). Finding a time window for maintenance would become impossible. Projects also wished for deploying their build results automatically. It was not possible on the shared Hudson instance as it would mean sharing projects specific credentials with all other projects: highly undesirable. Hence, the Eclipse Foundation started to deliver one &lt;strong&gt;Hudson Instance Per Project (HIPP)&lt;/strong&gt;. It started slow, with a couple of projects migrated away from the crowded shared instance. But this again became a big success. By the end of 2016, about 150 instance were running. It was more stable, gave projects the freedom to install plugins they want and to run isolated (from a credential point of view) from other projects. In the same year, the Hudson development was stale and it was not wise to continue to use it. Thus, we initiated a huge effort to migrate all of our Hudson instances to &lt;strong&gt;Jenkins — JIPP&lt;/strong&gt;. Kudos to &lt;a href=&quot;https://twitter.com/fr3dg&quot;&gt;Frederic Gurr&lt;/a&gt; who lead this effort which ended in March 2018. Despite this migration, there was still something fishy about the solution: all instances are running colocated on a dozen of beefy bare metal servers. It was not an issue at the beginning, but the more JIPP we added to the farm, the more the builds of one project were affected by others on the same machine. For instance, build could last up to 5 times longer depending on the global load. Moreover, we now have about 200 JIPP. Maintaining all of this requires a lot of time. With the creation of &lt;a href=&quot;https://jakarta.ee&quot;&gt;Jakarta EE&lt;/a&gt; and the move of all Java EE reference implementations, this number will skyrocket…&lt;/p&gt;&lt;p&gt;&lt;strong&gt;It’s now time to scale up this setup and make it more efficient&lt;/strong&gt;. We need to better use our hardware and be able to add interim cloud resources when needed. We need something where each project resource consumption is isolated from each other. We need to be able to update Jenkins masters and to install/update Jenkins plugins in batch. We need to provide more flexibility to projects to let them build their code in containers so that they control the build environment. We need a solution where resilience is built-in.&lt;/p&gt;&lt;p&gt;We’ve studied a couple of options that would offer all of this. The first conclusion of this study was that &lt;strong&gt;we need to run our system on top of a Kubernetes cluster.&lt;/strong&gt; There are a couple of cluster orchestration systems out there, some more mature than Kubernetes. But we can’t ignore the momentum Kubernetes has these days and we bet that it’s a future proof solution to build on. Kubernetes offers everything we need for scalability and resiliency. The downside is that we need to run it on-premise and it can be quite overwhelming. That’s why we decided to run this cluster with the Red Hat’s distribution of Kubernetes: &lt;strong&gt;Red Hat OpenShift Container Platform&lt;/strong&gt;. Among other things, it provides a rock-solid opinionated setup of Kubernetes which is very reassuring when you just start with these technologies.&lt;/p&gt;&lt;p&gt;The second conclusion of our study was that we needed an orchestrator for all our Jenkins masters. We currently manage our 200 JIPP with a lot of heterogeneous script / tools. We need a more integrated solution. &lt;strong&gt;CloudBees Jenkins Enterprise&lt;/strong&gt; (CJE) provides exactly that in the form of the so called CloudBees Jenkins Operation Center. After some testing and demoing from CloudBees guys, and the fact that the new version 2.0 of CJE runs on top of Kubernetes, it was a no brainer: we needed this tool.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*2JD7PDgMxYFd6tf8.&quot; /&gt;by &lt;a href=&quot;https://unsplash.com/@samuelzeller?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Samuel Zeller&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;Good news is that setting up this whole new environment has already started. OpenShift is already running on our hardware and we plan to have CJE running by the end of May. &lt;strong&gt;We don’t expect much disruption, and most of projects won’t need to change anything to their build settings&lt;/strong&gt;.&lt;br /&gt;Starting in a couple of weeks, all new projects will get a CJE JIPP instead of a regular JIPP. Soon after, we will start migrating existing JIPPs by calling for volunteer guinea pig projects. Once this is done and we get confident in the process, we will gradually ramp up the migration and move all remaining projects over to CJE. There is no set timeline, but &lt;strong&gt;we aim to move most projects to CJE before the end of the year&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;We are starting a &lt;a href=&quot;https://wiki.eclipse.org/CBI/CJE_Migration_FAQ&quot;&gt;FAQ about the migration process&lt;/a&gt; and it will be shared very soon on the Eclipse Foundation &lt;a href=&quot;https://accounts.eclipse.org/mailing-list/cross-project-issues-dev&quot;&gt;cross-projects mailing list&lt;/a&gt; as well as on the &lt;a href=&quot;https://accounts.eclipse.org/mailing-list/cbi-dev&quot;&gt;CBI mailing list&lt;/a&gt;. We will also announce progress and milestones on these lists. Stay tuned!&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=6fd60d4dc41d&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 27 Apr 2018 15:26:37 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.5.2.AM2 for Eclipse Oxygen.2</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.5.2.am2-for-oxygen.2.html</guid>
	<link>https://tools.jboss.org/blog/4.5.2.am2-for-oxygen.2.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.5.2.AM2 (Developer Milestone 2) build for Eclipse Oxygen.2 (built with RC2).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/oxygen/4.5.2.AM2.html&quot;&gt;JBoss Tools 4.5.2 AM2&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.5.2.AM2.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;fuse-tooling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-tooling&quot;&gt;&lt;/a&gt;Fuse Tooling&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;fuse-7-karaf-based-runtime-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-7-karaf-based-runtime-server-adapter&quot;&gt;&lt;/a&gt;Fuse 7 Karaf-based runtime Server adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Fuse 7 is cooking and preliminary versions are already available on &lt;a href=&quot;http://repository.jboss.org/nexus/content/groups/ea/org/jboss/fuse/jboss-fuse-karaf&quot;&gt;early-access repository&lt;/a&gt;. Fuse Tooling is ready to leverage them so that you can try the upcoming major Fuse version.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse 7 Server Adapter&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/Fuse7-ServerAdapter.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Classical functionalities with server adapters are available: automatic redeploy, Java debug, Graphical Camel debug through created JMX connection.
      Please note:
      - you can’t retrieve the Fuse 7 Runtime yet directly from Fuse tooling, it is required to download it on your machine and point to it when creating the Server adapter.
      - the provided templates requires some modifications to have them working with Fuse 7, mainly adapting the bom. Please see work related to it in this &lt;a href=&quot;https://issues.jboss.org/browse/FUSETOOLS-2578&quot;&gt;JIRA task&lt;/a&gt; and its children.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;display-routes-defined-inside-routecontext-in-camel-graphical-editor-design-tab&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#display-routes-defined-inside-routecontext-in-camel-graphical-editor-design-tab&quot;&gt;&lt;/a&gt;Display routes defined inside &quot;routeContext&quot; in Camel Graphical Editor (Design tab)&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&quot;routeContext&quot; tag is a special tag used in Camel to provide the ability to reuse routes and to split them across different files. This is very useful on large projects. See Camel &lt;a href=&quot;http://camel.apache.org/how-do-i-import-routes-from-other-xml-files.html&quot;&gt;documentation&lt;/a&gt; for more information.
      Since this version, the Design of the routes defined in &quot;routeContext&quot; tags are now displayed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;usability-improvement-progress-bar-when-changing-the-camel-version&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#usability-improvement-progress-bar-when-changing-the-camel-version&quot;&gt;&lt;/a&gt;Usability improvement: Progress bar when &quot;Changing the Camel version&quot;&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Since Fuse Tooling 10.1.0, it is possible to change the Camel version. In case the Camel version was not cached locally yet and for slow internet connections, this operation can take a while. There is now a progress bar to see the progress.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Switch Camel Version with Progress Bar&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/switchCamelVersionWithProgressBar.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 26 Apr 2018 14:06:56 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools and Red Hat Developer Studio for Eclipse Oxygen.2</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/11.2.0.ga-for-oxygen.2.html</guid>
	<link>https://tools.jboss.org/blog/11.2.0.ga-for-oxygen.2.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/oxygen/4.5.2.Final.html&quot;&gt;JBoss Tools 4.5.2&lt;/a&gt; and &lt;a href=&quot;https://tools.jboss.org/downloads/devstudio/oxygen/11.2.0.GA.html&quot;&gt;Red Hat JBoss Developer Studio 11.2&lt;/a&gt; for Eclipse Oxygen.2 are here waiting for you. Check it out!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;devstudio11&quot; src=&quot;https://tools.jboss.org/blog/images/devstudio11.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Developer Studio comes with everything pre-bundled in its installer. Simply download it from our &lt;a href=&quot;https://www.jboss.org/products/devstudio.html&quot;&gt;JBoss Products page&lt;/a&gt; and run it like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;java -jar jboss-devstudio-&amp;lt;installername&amp;gt;.jar&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Tools or Bring-Your-Own-Eclipse (BYOE) JBoss Developer Studio require a bit more:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release requires at least Eclipse 4.7 (Oxygen) but we recommend
      using the latest &lt;a href=&quot;http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/oxygen2&quot;&gt;Eclipse 4.7.2 Oxygen JEE Bundle&lt;/a&gt; since then you get most of the dependencies preinstalled.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &quot;JBoss Tools&quot; or &quot;Red Hat JBoss Developer Studio&quot;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For JBoss Tools, you can also use our update site directly.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;http://download.jboss.org/jbosstools/oxygen/stable/updates/&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is new?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Our main focus for this release was on adoption of Java9, improvements for container based development and bug fixing.
      Eclipse Oxygen itself has &lt;a href=&quot;https://www.youtube.com/playlist?list=PLy7t4z5SYNaTM66CahSlkMh5YkndYXMUq&quot;&gt;a lot of new cool stuff&lt;/a&gt; but let me highlight just a few updates in both Eclipse Oxygen and JBoss Tools plugins that I think are worth mentioning.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;openshift-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-3&quot;&gt;&lt;/a&gt;OpenShift 3&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;spring-boot-applications-support-in-openshift-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#spring-boot-applications-support-in-openshift-server-adapter&quot;&gt;&lt;/a&gt;Spring Boot applications support in OpenShift server adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The OpenShift server adapter allowed hotdeploy and debugging for JEE and NodeJS based applications.
      It now supports Spring Boot applications with some limitations: the Spring Boot devtools module must be added to your application as it monitors code changes and as the application must be launched in exploded mode, you must use the upstream image (docker.io/fabric8/s2i-java) rather than the downstream image builder fis-java-openshift.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As an example, we’ve provided an OpenShift template that will create an OpenShift application based on the upstream application and a Git repository that added the Spring Boot devtools to the Fabric8 Spring Boot quickstart.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;{
        &quot;apiVersion&quot;: &quot;v1&quot;,
        &quot;kind&quot;: &quot;Template&quot;,
        &quot;metadata&quot;: {
          &quot;annotations&quot;: {
            &quot;description&quot;: &quot;Spring-Boot and CXF JAXRS QuickStart. This example demonstrates how you can use Apache CXF JAXRS with Spring Boot on Openshift. The quickstart uses Spring Boot to configure a little application that includes a CXF JAXRS endpoint with Swagger enabled.&quot;,
            &quot;tags&quot;: &quot;quickstart,java,springboot,fis&quot;,
            &quot;iconClass&quot;: &quot;icon-jboss&quot;,
            &quot;version&quot;: &quot;2.0&quot;
          },
          &quot;name&quot;: &quot;s2i-spring-boot-cxf-jaxrs&quot;
        },
        &quot;labels&quot;: {
          &quot;template&quot;: &quot;s2i-spring-boot-cxf-jaxrs&quot;
        },
        &quot;parameters&quot;: [
          {
            &quot;name&quot;: &quot;APP_NAME&quot;,
            &quot;displayName&quot;: &quot;Application Name&quot;,
            &quot;required&quot;: true,
            &quot;value&quot;: &quot;s2i-spring-boot-cxf-jaxrs&quot;,
            &quot;description&quot;: &quot;The name assigned to the application.&quot;
          },
          {
            &quot;name&quot;: &quot;GIT_REPO&quot;,
            &quot;displayName&quot;: &quot;Git Repository URL&quot;,
            &quot;required&quot;: true,
            &quot;value&quot;: &quot;https://github.com/jeffmaury/spring-boot-cxf-jaxrs.git&quot;,
            &quot;description&quot;: &quot;The URL of the repository with your application source code.&quot;
          },
          {
            &quot;name&quot;: &quot;GIT_REF&quot;,
            &quot;displayName&quot;: &quot;Git Reference&quot;,
            &quot;value&quot;: &quot;hotdeploy&quot;,
            &quot;description&quot;: &quot;Set this to a branch name, tag or other ref of your repository if you are not using the default branch.&quot;
          },
          {
            &quot;name&quot;: &quot;SERVICE_NAME&quot;,
            &quot;displayName&quot;: &quot;Service Name&quot;,
            &quot;value&quot;: &quot;cxf-jaxrs&quot;,
            &quot;description&quot;: &quot;Exposed service name.&quot;
          },
          {
            &quot;name&quot;: &quot;BUILDER_VERSION&quot;,
            &quot;displayName&quot;: &quot;Builder version&quot;,
            &quot;value&quot;: &quot;2.0&quot;,
            &quot;description&quot;: &quot;The version of the FIS S2I builder image to use.&quot;
          },
          {
            &quot;name&quot;: &quot;APP_VERSION&quot;,
            &quot;displayName&quot;: &quot;Application Version&quot;,
            &quot;value&quot;: &quot;1.0.0.redhat-000014&quot;,
            &quot;description&quot;: &quot;The application version.&quot;
          },
          {
            &quot;name&quot;: &quot;MAVEN_ARGS&quot;,
            &quot;displayName&quot;: &quot;Maven Arguments&quot;,
            &quot;value&quot;: &quot;package -DskipTests -Dfabric8.skip -e -B&quot;,
            &quot;description&quot;: &quot;Arguments passed to mvn in the build.&quot;
          },
          {
            &quot;name&quot;: &quot;MAVEN_ARGS_APPEND&quot;,
            &quot;displayName&quot;: &quot;Extra Maven Arguments&quot;,
            &quot;description&quot;: &quot;Extra arguments passed to mvn, e.g. for multi-module builds.&quot;
          },
          {
            &quot;name&quot;: &quot;ARTIFACT_DIR&quot;,
            &quot;displayName&quot;: &quot;Maven build directory&quot;,
            &quot;description&quot;: &quot;Directory of the artifact to be built, e.g. for multi-module builds.&quot;
          },
          {
            &quot;name&quot;: &quot;IMAGE_STREAM_NAMESPACE&quot;,
            &quot;displayName&quot;: &quot;Image Stream Namespace&quot;,
            &quot;value&quot;: &quot;openshift&quot;,
            &quot;required&quot;: true,
            &quot;description&quot;: &quot;Namespace in which the Fuse ImageStreams are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you&amp;amp;aposve installed the ImageStreams in a different namespace/project.&quot;
          },
          {
            &quot;name&quot;: &quot;BUILD_SECRET&quot;,
            &quot;displayName&quot;: &quot;Git Build Secret&quot;,
            &quot;generate&quot;: &quot;expression&quot;,
            &quot;description&quot;: &quot;The secret needed to trigger a build.&quot;,
            &quot;from&quot;: &quot;[a-zA-Z0-9]{40}&quot;
          },
          {
            &quot;name&quot;: &quot;CPU_REQUEST&quot;,
            &quot;displayName&quot;: &quot;CPU request&quot;,
            &quot;value&quot;: &quot;0.2&quot;,
            &quot;required&quot;: true,
            &quot;description&quot;: &quot;The amount of CPU to requests.&quot;
          },
          {
            &quot;name&quot;: &quot;CPU_LIMIT&quot;,
            &quot;displayName&quot;: &quot;CPU limit&quot;,
            &quot;value&quot;: &quot;1.0&quot;,
            &quot;required&quot;: true,
            &quot;description&quot;: &quot;The amount of CPU the container is limited to use.&quot;
          }
        ],
        &quot;objects&quot;: [
          {
            &quot;apiVersion&quot;: &quot;v1&quot;,
            &quot;kind&quot;: &quot;Route&quot;,
            &quot;metadata&quot;: {
              &quot;labels&quot;: {
                &quot;component&quot;: &quot;${APP_NAME}&quot;,
                &quot;provider&quot;: &quot;s2i&quot;,
                &quot;project&quot;: &quot;${APP_NAME}&quot;,
                &quot;version&quot;: &quot;${APP_VERSION}&quot;,
                &quot;group&quot;: &quot;quickstarts&quot;
              },
              &quot;name&quot;: &quot;${SERVICE_NAME}-route&quot;
            },
            &quot;spec&quot;: {
              &quot;to&quot;: {
                &quot;kind&quot;: &quot;Service&quot;,
                &quot;name&quot;: &quot;${SERVICE_NAME}&quot;
              }
            }
          },
          {
            &quot;apiVersion&quot;: &quot;v1&quot;,
            &quot;kind&quot;: &quot;Service&quot;,
            &quot;metadata&quot;: {
              &quot;annotations&quot;: {
              },
              &quot;labels&quot;: {
                &quot;component&quot;: &quot;${APP_NAME}&quot;,
                &quot;provider&quot;: &quot;s2i&quot;,
                &quot;project&quot;: &quot;${APP_NAME}&quot;,
                &quot;version&quot;: &quot;${APP_VERSION}&quot;,
                &quot;group&quot;: &quot;quickstarts&quot;
              },
              &quot;name&quot;: &quot;${SERVICE_NAME}&quot;
            },
            &quot;spec&quot;: {
              &quot;clusterIP&quot;: &quot;None&quot;,
              &quot;deprecatedPublicIPs&quot;: [],
              &quot;ports&quot;: [
                {
                  &quot;port&quot;: 9413,
                  &quot;protocol&quot;: &quot;TCP&quot;,
                  &quot;targetPort&quot;: 8080
                }
              ],
              &quot;selector&quot;: {
                &quot;project&quot;: &quot;${APP_NAME}&quot;,
                &quot;component&quot;: &quot;${APP_NAME}&quot;,
                &quot;provider&quot;: &quot;s2i&quot;,
                &quot;group&quot;: &quot;quickstarts&quot;
              }
            }
          },
          {
            &quot;kind&quot;: &quot;ImageStream&quot;,
            &quot;apiVersion&quot;: &quot;v1&quot;,
            &quot;metadata&quot;: {
              &quot;name&quot;: &quot;${APP_NAME}&quot;,
              &quot;creationTimestamp&quot;: null,
              &quot;labels&quot;: {
                &quot;component&quot;: &quot;${APP_NAME}&quot;,
                &quot;group&quot;: &quot;quickstarts&quot;,
                &quot;project&quot;: &quot;${APP_NAME}&quot;,
                &quot;provider&quot;: &quot;s2i&quot;,
                &quot;version&quot;: &quot;${APP_VERSION}&quot;
              }
            },
            &quot;spec&quot;: {},
            &quot;status&quot;: {
              &quot;dockerImageRepository&quot;: &quot;&quot;
            }
          },
          {
            &quot;kind&quot;: &quot;BuildConfig&quot;,
            &quot;apiVersion&quot;: &quot;v1&quot;,
            &quot;metadata&quot;: {
              &quot;name&quot;: &quot;${APP_NAME}&quot;,
              &quot;creationTimestamp&quot;: null,
              &quot;labels&quot;: {
                &quot;component&quot;: &quot;${APP_NAME}&quot;,
                &quot;group&quot;: &quot;quickstarts&quot;,
                &quot;project&quot;: &quot;${APP_NAME}&quot;,
                &quot;provider&quot;: &quot;s2i&quot;,
                &quot;version&quot;: &quot;${APP_VERSION}&quot;
              }
            },
            &quot;spec&quot;: {
              &quot;triggers&quot;: [
                {
                  &quot;type&quot;: &quot;GitHub&quot;,
                  &quot;github&quot;: {
                    &quot;secret&quot;: &quot;${BUILD_SECRET}&quot;
                  }
                },
                {
                  &quot;type&quot;: &quot;Generic&quot;,
                  &quot;generic&quot;: {
                    &quot;secret&quot;: &quot;${BUILD_SECRET}&quot;
                  }
                },
                {
                  &quot;type&quot;: &quot;ConfigChange&quot;
                },
                {
                  &quot;type&quot;: &quot;ImageChange&quot;,
                  &quot;imageChange&quot;: {}
                }
              ],
              &quot;source&quot;: {
                &quot;type&quot;: &quot;Git&quot;,
                &quot;git&quot;: {
                  &quot;uri&quot;: &quot;${GIT_REPO}&quot;,
                  &quot;ref&quot;: &quot;${GIT_REF}&quot;
                }
              },
              &quot;strategy&quot;: {
                &quot;type&quot;: &quot;Source&quot;,
                &quot;sourceStrategy&quot;: {
                  &quot;from&quot;: {
                    &quot;kind&quot;: &quot;DockerImage&quot;,
                    &quot;name&quot;: &quot;fabric8/s2i-java:${BUILDER_VERSION}&quot;
                  },
                  &quot;forcePull&quot;: true,
                  &quot;incremental&quot;: true,
                  &quot;env&quot;: [
                    {
                      &quot;name&quot;: &quot;BUILD_LOGLEVEL&quot;,
                      &quot;value&quot;: &quot;5&quot;
                    },
                    {
                      &quot;name&quot;: &quot;ARTIFACT_DIR&quot;,
                      &quot;value&quot;: &quot;${ARTIFACT_DIR}&quot;
                    },
                    {
                      &quot;name&quot;: &quot;MAVEN_ARGS&quot;,
                      &quot;value&quot;: &quot;${MAVEN_ARGS}&quot;
                    },
                    {
                      &quot;name&quot;: &quot;MAVEN_ARGS_APPEND&quot;,
                      &quot;value&quot;: &quot;${MAVEN_ARGS_APPEND}&quot;
                    }
                  ]
                }
              },
              &quot;output&quot;: {
                &quot;to&quot;: {
                  &quot;kind&quot;: &quot;ImageStreamTag&quot;,
                  &quot;name&quot;: &quot;${APP_NAME}:latest&quot;
                }
              },
              &quot;resources&quot;: {}
            },
            &quot;status&quot;: {
              &quot;lastVersion&quot;: 0
            }
          },
          {
            &quot;kind&quot;: &quot;DeploymentConfig&quot;,
            &quot;apiVersion&quot;: &quot;v1&quot;,
            &quot;metadata&quot;: {
              &quot;name&quot;: &quot;${APP_NAME}&quot;,
              &quot;creationTimestamp&quot;: null,
              &quot;labels&quot;: {
                &quot;component&quot;: &quot;${APP_NAME}&quot;,
                &quot;group&quot;: &quot;quickstarts&quot;,
                &quot;project&quot;: &quot;${APP_NAME}&quot;,
                &quot;provider&quot;: &quot;s2i&quot;,
                &quot;version&quot;: &quot;${APP_VERSION}&quot;
              }
            },
            &quot;spec&quot;: {
              &quot;strategy&quot;: {
                &quot;resources&quot;: {}
              },
              &quot;triggers&quot;: [
                {
                  &quot;type&quot;: &quot;ConfigChange&quot;
                },
                {
                  &quot;type&quot;: &quot;ImageChange&quot;,
                  &quot;imageChangeParams&quot;: {
                    &quot;automatic&quot;: true,
                    &quot;containerNames&quot;: [
                      &quot;${APP_NAME}&quot;
                    ],
                    &quot;from&quot;: {
                      &quot;kind&quot;: &quot;ImageStreamTag&quot;,
                      &quot;name&quot;: &quot;${APP_NAME}:latest&quot;
                    }
                  }
                }
              ],
              &quot;replicas&quot;: 1,
              &quot;selector&quot;: {
                &quot;component&quot;: &quot;${APP_NAME}&quot;,
                &quot;deploymentconfig&quot;: &quot;${APP_NAME}&quot;,
                &quot;group&quot;: &quot;quickstarts&quot;,
                &quot;project&quot;: &quot;${APP_NAME}&quot;,
                &quot;provider&quot;: &quot;s2i&quot;,
                &quot;version&quot;: &quot;${APP_VERSION}&quot;
              },
              &quot;template&quot;: {
                &quot;metadata&quot;: {
                  &quot;creationTimestamp&quot;: null,
                  &quot;labels&quot;: {
                    &quot;component&quot;: &quot;${APP_NAME}&quot;,
                    &quot;deploymentconfig&quot;: &quot;${APP_NAME}&quot;,
                    &quot;group&quot;: &quot;quickstarts&quot;,
                    &quot;project&quot;: &quot;${APP_NAME}&quot;,
                    &quot;provider&quot;: &quot;s2i&quot;,
                    &quot;version&quot;: &quot;${APP_VERSION}&quot;
                  }
                },
                &quot;spec&quot;: {
                  &quot;containers&quot;: [
                    {
                      &quot;name&quot;: &quot;${APP_NAME}&quot;,
                      &quot;image&quot;: &quot;library/${APP_NAME}:latest&quot;,
                      &quot;readinessProbe&quot; : {
                        &quot;httpGet&quot; : {
                          &quot;path&quot; : &quot;/health&quot;,
                          &quot;port&quot; : 8081
                        },
                        &quot;initialDelaySeconds&quot; : 10
                      },
                      &quot;livenessProbe&quot; : {
                        &quot;httpGet&quot; : {
                          &quot;path&quot; : &quot;/health&quot;,
                          &quot;port&quot; : 8081
                        },
                        &quot;initialDelaySeconds&quot; : 180
                      },
                      &quot;ports&quot;: [
                        {
                          &quot;containerPort&quot;: 8778,
                          &quot;name&quot;: &quot;jolokia&quot;
                        }
                      ],
                      &quot;env&quot; : [ {
                        &quot;name&quot; : &quot;KUBERNETES_NAMESPACE&quot;,
                        &quot;valueFrom&quot; : {
                          &quot;fieldRef&quot; : {
                            &quot;fieldPath&quot; : &quot;metadata.namespace&quot;
                          }
                        }
                      } ],
                      &quot;resources&quot;: {
                        &quot;requests&quot;: {
                          &quot;cpu&quot;: &quot;${CPU_REQUEST}&quot;
                        },
                        &quot;limits&quot;: {
                          &quot;cpu&quot;: &quot;${CPU_LIMIT}&quot;
                        }
                      }
                    }
                  ]
                }
              }
            },
            &quot;status&quot;: {}
          }
        ]
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can see a demo of the OpenShift server adapter for Spring Boot application here:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;videoblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;support-for-route-timeouts-and-liveness-probe-for-openshift-server-adapter-debugging-configurations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#support-for-route-timeouts-and-liveness-probe-for-openshift-server-adapter-debugging-configurations&quot;&gt;&lt;/a&gt;Support for route timeouts and liveness probe for OpenShift Server Adapter debugging configurations&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;While debugging your OpenShift deployment, you may face two different issues:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;if you launch your test through a Web browser, then it’s likely that you will access your OpenShift deployment through an OpenShift
      route. The problem is that, by default, OpenShift routes have a 30 seconds timeout for each request. So if you’re stepping through one
      of your breakpoints, you will get a timeout error message in the browser window even if you can still debug your OpenShift deployment.
      And you’re now stuck will the navigation of your OpenShift application.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;if your OpenShift deployment has a liveness probe configured, depending on your virtual machine capabilities or how your debugger is
      configured, if your stepping into one of your breakpoints, the liveness probe may fail thus OpenShift so OpenShift will restart your
      container and your debugging session will be destroyed.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So, from now, when the OpenShift server adapter is started in &lt;code&gt;debug&lt;/code&gt; mode, the following action are being performed:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;if an OpenShift route is found that is linked to the OpenShift deployment you want to debug, the route timeout will be
      set or increased to 1 hour. The original or default value will be restored when the OpenShift server adapter will be restarted
      in &lt;code&gt;run&lt;/code&gt; mode.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;if your OpenShift deployment has a liveness probe configured, the &lt;code&gt;initialDelay&lt;/code&gt; field will be increased to 1 hour if the defined
      value for this field is lower than 1 hour. If the value of this field is defined to a value greater than 1 hour, it is left intact.
      The original value will be restored when the OpenShift server adapter will be restarted
      in &lt;code&gt;run&lt;/code&gt; mode&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;enhanced-command-to-delete-resource-s&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#enhanced-command-to-delete-resource-s&quot;&gt;&lt;/a&gt;Enhanced command to delete resource(s)&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When it comes to delete OpenShift resources, you had two different choices:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;individually delete each resource but as some resources are hidden by the OpenShift explorer, it may become troublesome&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;delete the containing OpenShift project but you are then deleting more resources than required&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There is now a new enhanced command to delete resources. It is available at the OpenShift project level and it will first
      list all the available OpenShift resources for the selected OpenShift project. You can now select the ones you want to delete
      and you can also filter the list using a filter that will be applied to the labels for each retrieved OpenShift resource.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So if you have two different deployments in a single OpenShift project (if you using OpenShift Online Starter for example) or if
      you have different kind of resources in a single deployment, you can now distinct them.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let’s see this in action:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In this example, I have deployed an EAP6.4 based application and an EAP7.0 based one. Here is what you  can see from the OpenShift explorer:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;new delete resources explorer&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/new-delete-resources-explorer.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Now, let’s invoke the new delete command on the &lt;em&gt;eap&lt;/em&gt; OpenShift project: right click the OpenShift project and select &lt;strong&gt;Delete Resources…​&lt;/strong&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;new delete resources dialog&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/new-delete-resources-dialog.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let suppose that we want to delete the EAP6.4 deployement. Enter &lt;em&gt;eap=6.4&lt;/em&gt; in the filter field:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;new delete resources dialog1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/new-delete-resources-dialog1.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Push the &lt;strong&gt;Select All&lt;/strong&gt; button:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;new delete resources dialog2&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/new-delete-resources-dialog2.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Close this dialog by pushing the &lt;strong&gt;OK&lt;/strong&gt; button. The resources will be deleted and the OpenShift explorer will be updated accordingly:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;new delete resources explorer1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/new-delete-resources-explorer1.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;server-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#server-tools&quot;&gt;&lt;/a&gt;Server tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;eap-7-1-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#eap-7-1-server-adapter&quot;&gt;&lt;/a&gt;EAP 7.1 Server Adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A server adapter has been added to work with EAP 7.1 and Wildfly 11. It’s based on WildFly 11. This new server adapter includes support for incremental management
      deployment like it’s upstream WildFly 11 counterpart.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;fuse-tooling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-tooling&quot;&gt;&lt;/a&gt;Fuse Tooling&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;fuse-7-karaf-based-runtime-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-7-karaf-based-runtime-server-adapter&quot;&gt;&lt;/a&gt;Fuse 7 Karaf-based runtime Server adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Fuse 7 is cooking and preliminary versions are already available on &lt;a href=&quot;http://repository.jboss.org/nexus/content/groups/ea/org/jboss/fuse/jboss-fuse-karaf&quot;&gt;early-access repository&lt;/a&gt;. Fuse Tooling is ready to leverage them so that you can try the upcoming major Fuse version.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse 7 Server Adapter&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/Fuse7-ServerAdapter.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Classical functionalities with server adapters are available: automatic redeploy, Java debug, Graphical Camel debug through created JMX connection.
      Please note:
      - you can’t retrieve the Fuse 7 Runtime yet directly from Fuse tooling, it is required to download it on your machine and point to it when creating the Server adapter.
      - the provided templates requires some modifications to have them working with Fuse 7, mainly adapting the bom. Please see work related to it in this &lt;a href=&quot;https://issues.jboss.org/browse/FUSETOOLS-2578&quot;&gt;JIRA task&lt;/a&gt; and its children.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;display-routes-defined-inside-routecontext-in-camel-graphical-editor-design-tab&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#display-routes-defined-inside-routecontext-in-camel-graphical-editor-design-tab&quot;&gt;&lt;/a&gt;Display routes defined inside &quot;routeContext&quot; in Camel Graphical Editor (Design tab)&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&quot;routeContext&quot; tag is a special tag used in Camel to provide the ability to reuse routes and to split them across different files. This is very useful on large projects. See Camel &lt;a href=&quot;http://camel.apache.org/how-do-i-import-routes-from-other-xml-files.html&quot;&gt;documentation&lt;/a&gt; for more information.
      Since this version, the Design of the routes defined in &quot;routeContext&quot; tags are now displayed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;usability-improvement-progress-bar-when-changing-the-camel-version&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#usability-improvement-progress-bar-when-changing-the-camel-version&quot;&gt;&lt;/a&gt;Usability improvement: Progress bar when &quot;Changing the Camel version&quot;&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Since Fuse Tooling 10.1.0, it is possible to change the Camel version. In case the Camel version was not cached locally yet and for slow internet connections, this operation can take a while. There is now a progress bar to see the progress.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Switch Camel Version with Progress Bar&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/switchCamelVersionWithProgressBar.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;support-for-creating-fuse-ignite-technical-extensions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#support-for-creating-fuse-ignite-technical-extensions&quot;&gt;&lt;/a&gt;Support for creating Fuse Ignite Technical Extensions&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We are happy to announce the addition of support for creating Technical Extension projects for &lt;strong&gt;Fuse Ignite&lt;/strong&gt;*. That includes the creation of the project using the &lt;em&gt;&quot;New Fuse Ignite Extension Project&quot;&lt;/em&gt; wizard as well as support for building the deployable artifact directly from inside the Eclipse environment.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;*&lt;strong&gt;Fuse Ignite&lt;/strong&gt; is a JBoss Fuse feature that provides a web interface for integrating applications. Without writing code, a business expert can use Ignite to connect to applications and optionally operate on data between connections to different applications. In Ignite, a data operation is referred to as a step in an integration.
      Ignite provides steps for operations such as filtering and mapping data. To operate on data in ways that are not provided by Ignite built-in steps, you can develop an Ignite extension to define one or more custom steps.
      Fuse Ignite comes as part of &lt;a href=&quot;https://developers.redhat.com/products/fuse/overview/&quot;&gt;Fuse&lt;/a&gt; and &lt;a href=&quot;https://www.redhat.com/en/explore/fuse-online&quot;&gt;Fuse Online&lt;/a&gt;. Please refer to the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_fuse/6.3/html-single/tooling_user_guide/#IgniteExtension&quot;&gt;online documentation&lt;/a&gt; for more information on how to create and configure technical extensions for Fuse Ignite.&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse Ignite Technical Extension Wizard&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/igniteExtensionWizard.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The provided project template allows you to define an &lt;a href=&quot;http://camel.apache.org&quot;&gt;Apache Camel&lt;/a&gt; route as the base flow of your new technical extension.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse Ignite Technical Extension Route&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/igniteExtensionRoute.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To configure your new technical extension you can use the JSON file created with the new project.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse Ignite Technical Extension Configuration&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/igniteExtensionConfig.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;forge-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#forge-tools&quot;&gt;&lt;/a&gt;Forge Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;forge-runtime-updated-to-3-8-1-final&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#forge-runtime-updated-to-3-8-1-final&quot;&gt;&lt;/a&gt;Forge Runtime updated to 3.8.1.Final&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The included Forge runtime is now 3.8.1.Final. Read the official announcement &lt;a href=&quot;http://forge.jboss.org/news/jboss-forge-3.8.1.final-is-here&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;and-more&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#and-more&quot;&gt;&lt;/a&gt;And more…​&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can find more noteworthy updates in on &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.5.2.Final.html&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-next&quot;&gt;&lt;/a&gt;What is next?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Having JBoss Tools 4.5.2 and Developer Studio 11.2 out we are already working on the next maintenance release for Eclipse Oxygen.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 26 Apr 2018 14:06:56 +0000</pubDate>
</item>
<item>
	<title>itemis: Announcement: Xtext 2.14 RC1 is now available</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/announcement-xtext-2-14-rc1-is-now-available</guid>
	<link>https://blogs.itemis.com/en/announcement-xtext-2-14-rc1-is-now-available</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The Xtext team &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;proudly announces&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; the availability of the first release candidate for the upcoming 2.14 release. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Update-Tastatur&quot; height=&quot;439&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Update-Tastatur.jpg?t=1525700151012&amp;amp;width=922&amp;amp;height=439&amp;amp;name=Update-Tastatur.jpg&quot; style=&quot;width: 922px;&quot; width=&quot;922&quot; /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;The new release comes with an impressive list of new features! We will now document them in the &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/xtext/blob/website-master/xtext-website/_posts/releasenotes/2018-05-23-version-2-14-0.md&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;release notes for Xtext&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/xtext/blob/website-master/xtend-website/_posts/releasenotes/2018-05-23-version-2-14-0.md&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtend&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, and in the &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/xtext/tree/website-master/xtext-website/documentation&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext user manual&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. Make sure to visit these once in a while when you try the new features. We are going to update the docs regularly.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext 2.14 has been made ready for Java 9 and &lt;/span&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk10-downloads-4416644.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Java 10&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;! Especially &lt;/span&gt;&lt;a href=&quot;https://www.oracle.com/corporate/features/understanding-java-9-modules.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Java 9 Modules&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; caused major headaches, like for other projects that we rely on as JDT, Gradle and Tycho, too. This is also a great opportunity to check out Java 10 yourself. &lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Also Xtext 2.14 is fully compatible with your existing languages. To best employ the new features after the upgrade, we recommend to use the Xtext Project Wizard to create new projects with an up-to-date configuration and compare the setup with your existing language. For example, for Java 10 support we had to upgrade the ASM library to version 6.1.1 and so do you. In the next weeks we will work on a more thorough migration guide as part of the final release notes.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext 2.14 supports the brand &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/eclipse/news/4.8/M5/#Platform-Dev&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;new Code Mining API from Eclipse Photon&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. To give it a try, you’ll need Eclipse Photon. You should use the &lt;/span&gt;&lt;a href=&quot;http://download.eclipse.org/eclipse/downloads/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;latest Eclipse 4.8 Integration Build&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The Domainmodel Example DSL contains a sample implementation for Code Minings and serves as a blueprint if you plan to implement your own. As the Code Mining implementation in Eclipse is still under development, its inventor &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Angelo Zerr&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is happy to get your feedback, too. Fame and fortune is to come if you r&lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=Platform&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;eport bugs&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to the Platform Text component in time so they can be fixed for the Photon release.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The 2.14 release contains an updated testing infrastructure. The JUnit support has been extended so you can execute tests written with &lt;/span&gt;&lt;a href=&quot;https://junit.org/junit5/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JUnit 5&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The Xtext Project Wizard allows you now to select JUnit 5 for testing support and will produce a sample parser test and add the required dependencies.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We encourage you to check out Xtext 2.14.0.RC1 now. Also &lt;a href=&quot;https://github.com/eclipse/xtext/issues&quot;&gt;report issues&lt;/a&gt; and&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;take a look at the &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/xtext/blob/website-master/xtext-website/_posts/releasenotes/2018-05-23-version-2-14-0.md#fixed-issues&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;bugfix lists&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for changes that have not been highlighted here. We have spent endless hours to bring you the best Xtext release and love to hear from you what you think about it! &lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Get Xtext 2.14.0.RC1 from the &lt;a href=&quot;http://download.eclipse.org/modeling/tmf/xtext/updates/composite/milestones/&quot;&gt;Xtext Milestone Update Site&lt;/a&gt;, &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.eclipse.xtext%22%20OR%20g%3A%22org.eclipse.xtend%22&quot;&gt;Maven Central&lt;/a&gt; or &lt;a href=&quot;https://www.eclipse.org/modeling/tmf/downloads/index.php?project=xtext&amp;amp;showAll=0&amp;amp;showMax=5&amp;amp;sortBy=&quot;&gt;Download Area&lt;/a&gt; (Stable Build S201804242303). The final release is planned for May 23th 2018. &lt;/span&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fannouncement-xtext-2-14-rc1-is-now-available&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 26 Apr 2018 13:48:38 +0000</pubDate>
	<author>xtext@itemis.com (Xtext-Team)</author>
</item>
<item>
	<title>Eclipse Ditto: Announcing Ditto Milestone 0.3.0-M1</title>
	<guid isPermaLink="true">https://www.eclipse.org/ditto/2018-04-26-milestone-announcement-030-M1.html</guid>
	<link>https://www.eclipse.org/ditto/2018-04-26-milestone-announcement-030-M1.html</link>
	<description>&lt;p&gt;After some time of silence of Ditto milestone releases we are very proud to present our next one to the public.&lt;/p&gt;

&lt;p&gt;Have a look at the Milestone &lt;a href=&quot;https://www.eclipse.org/ditto/release_notes_030-M1.html&quot;&gt;0.3.0-M1 release notes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main changes are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;switch to &lt;a href=&quot;https://www.eclipse.org/openj9/&quot;&gt;Eclipse OpenJ9&lt;/a&gt; JVM in Ditto’s Docker images&lt;/li&gt;
  &lt;li&gt;renaming of Ditto’s “AMQP bridge” service to “Connectivity” due to more responsibilities for that service:
    &lt;ul&gt;
      &lt;li&gt;managing + connecting to AMQP 0.9.1 endpoints as well as to AMQP 1.0 endpoints&lt;/li&gt;
      &lt;li&gt;transforming/mapping message payloads to/from &lt;a href=&quot;https://www.eclipse.org/ditto/protocol-overview.html&quot;&gt;Ditto Protocol&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;for further details, have a look at our &lt;a href=&quot;https://www.eclipse.org/ditto/2018-04-25-connectivity-service.html&quot;&gt;blogpost about that&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Ditto&quot; class=&quot;docimage&quot; src=&quot;https://www.eclipse.org/ditto/images/ditto.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;</description>
	<pubDate>Thu, 26 Apr 2018 04:00:00 +0000</pubDate>
</item>
<item>
	<title>Tom Schindl: Fluent-Log API landed in e(fx)clipse</title>
	<guid isPermaLink="false">http://tomsondev.bestsolution.at/?p=5101</guid>
	<link>https://tomsondev.bestsolution.at/2018/04/25/fluent-log-api-landed-in-efxclipse/</link>
	<description>&lt;p&gt;Last week I came a cross &lt;a href=&quot;https://github.com/google/flogger&quot;&gt;Googles FLogger-API&lt;/a&gt; and I really liked it. &lt;/p&gt;
&lt;p&gt;Back in &lt;a href=&quot;http://efxclipse.org/&quot;&gt;e(fx)clipse&lt;/a&gt; land I started to miss it but because introducing a dependency to other log-frameworks is not possible – I implemented our own fluent log API inspired by &lt;a href=&quot;https://github.com/google/flogger&quot;&gt;Flogger&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So how do you use it:&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;// if you have a logger
Logger logger = LoggerCreator.createLogger( Sample.class );
FluentLogger flogger = FluentLogger.of( logger );

// if you use @Log
@Inject
@Log
FluentLogger flogger;

// Log something
FluentLogContext debug = flogger.atDebug();
debug.log( &quot;Hello World&quot; );
debug.log( &quot;Hello World with format %s&quot;, 10 );
debug.log( () -&amp;gt; &quot;Lazy Hello World&quot; );
debug.log( t -&amp;gt; &quot;Lazy Hello World with Context&quot; + t, o );

// Log with exception
try {
   // ...
} catch( Throwable l ) {
  flogger.atInfo().withException( t ).log( &quot;Hello World&quot; );
}

// Throttle: Only log every 100 log statement
flogger.atInfo().throttleByCount(100)
  .log( &quot;Log every 100 time&quot; );

// Throttle: Only log every minute
flogger.atInfo().throttleByTime(1, TimeUnit.MINUTES)
  .log( &quot;Log every minute&quot; );

// Build your own condition fluent addition
logger.atInfo().with( Throttle::new ).every( 100 )
  .log( &quot;Log every 100 time&quot; )
&lt;/pre&gt;</description>
	<pubDate>Wed, 25 Apr 2018 21:21:04 +0000</pubDate>
</item>
<item>
	<title>EclipseCon France 2018: Interview: Cloud scale IoT messaging</title>
	<guid isPermaLink="false">https://www.eclipsecon.org/france2018/news/3894 at https://www.eclipsecon.org/france2018</guid>
	<link>https://www.eclipsecon.org/france2018/news/interview-cloud-scale-iot-messaging</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;&lt;em&gt;Eclipse Hono is a cloud-based IoT connectivity platform. In this interview Jens Reimann and Dejan Bosanac's give us insights into the project. You can learn more at their talk, &lt;a href=&quot;https://www.eclipsecon.org/france2018/session/cloud-scale-iot-messaging&quot;&gt;Cloud scale IoT messaging&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&quot;..IoT connectivity is one of the main challenges in building IoT cloud platforms, as having a single broker is not enough anymore. Hono solves scalable messaging problem with adding more specifics to IoT use cases. This means it’s interesting to other companies that want to build their own IoT cloud platforms...&quot;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-news-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://www.eclipsecon.org/france2018/news/interview-cloud-scale-iot-messaging&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;img-responsive block-center&quot; height=&quot;250&quot; src=&quot;https://www.eclipsecon.org/france2018/sites/default/files/styles/solstice_news_-_default_-_thumbnail/public/news/HonoLogosq.png?itok=cLjSdK-n&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 25 Apr 2018 16:26:11 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: EclipseCon France 2018: Register Early!</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/JlZYcHvzL3E/registration</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/JlZYcHvzL3E/registration</link>
	<description>Prices go up after April 30, so register now.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/JlZYcHvzL3E&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 25 Apr 2018 13:30:00 +0000</pubDate>
</item>

</channel>
</rss>
